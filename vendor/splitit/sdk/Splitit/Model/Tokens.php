<?php
/**
 * Tokens
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * Tokens Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Tokens implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Tokens';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'token' => 'string',
        'valid_till' => '\DateTime',
        'last_usage' => '\DateTime',
        'parameter_group_id' => 'int',
        'type' => 'string',
        'parameter_group' => '\SplititSdkClient\Model\ParameterGroups',
        'user_id' => 'int',
        'user_type' => '\SplititSdkClient\Model\UserType',
        'installment_plan_id' => 'int',
        'installment_plan' => '\SplititSdkClient\Model\InstallmentPlans'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'token' => null,
        'valid_till' => 'date-time',
        'last_usage' => 'date-time',
        'parameter_group_id' => 'int64',
        'type' => null,
        'parameter_group' => null,
        'user_id' => 'int64',
        'user_type' => null,
        'installment_plan_id' => 'int64',
        'installment_plan' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'token' => 'Token',
        'valid_till' => 'ValidTill',
        'last_usage' => 'LastUsage',
        'parameter_group_id' => 'ParameterGroupId',
        'type' => 'Type',
        'parameter_group' => 'ParameterGroup',
        'user_id' => 'UserId',
        'user_type' => 'UserType',
        'installment_plan_id' => 'InstallmentPlanId',
        'installment_plan' => 'InstallmentPlan'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'token' => 'setToken',
        'valid_till' => 'setValidTill',
        'last_usage' => 'setLastUsage',
        'parameter_group_id' => 'setParameterGroupId',
        'type' => 'setType',
        'parameter_group' => 'setParameterGroup',
        'user_id' => 'setUserId',
        'user_type' => 'setUserType',
        'installment_plan_id' => 'setInstallmentPlanId',
        'installment_plan' => 'setInstallmentPlan'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'token' => 'getToken',
        'valid_till' => 'getValidTill',
        'last_usage' => 'getLastUsage',
        'parameter_group_id' => 'getParameterGroupId',
        'type' => 'getType',
        'parameter_group' => 'getParameterGroup',
        'user_id' => 'getUserId',
        'user_type' => 'getUserType',
        'installment_plan_id' => 'getInstallmentPlanId',
        'installment_plan' => 'getInstallmentPlan'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['valid_till'] = isset($data['valid_till']) ? $data['valid_till'] : null;
        $this->container['last_usage'] = isset($data['last_usage']) ? $data['last_usage'] : null;
        $this->container['parameter_group_id'] = isset($data['parameter_group_id']) ? $data['parameter_group_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['parameter_group'] = isset($data['parameter_group']) ? $data['parameter_group'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['user_type'] = isset($data['user_type']) ? $data['user_type'] : null;
        $this->container['installment_plan_id'] = isset($data['installment_plan_id']) ? $data['installment_plan_id'] : null;
        $this->container['installment_plan'] = isset($data['installment_plan']) ? $data['installment_plan'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['user_type'] === null) {
            $invalidProperties[] = "'user_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token token
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets valid_till
     *
     * @return \DateTime
     */
    public function getValidTill()
    {
        return $this->container['valid_till'];
    }

    /**
     * Sets valid_till
     *
     * @param \DateTime $valid_till valid_till
     *
     * @return $this
     */
    public function setValidTill($valid_till)
    {
        $this->container['valid_till'] = $valid_till;

        return $this;
    }

    /**
     * Gets last_usage
     *
     * @return \DateTime
     */
    public function getLastUsage()
    {
        return $this->container['last_usage'];
    }

    /**
     * Sets last_usage
     *
     * @param \DateTime $last_usage last_usage
     *
     * @return $this
     */
    public function setLastUsage($last_usage)
    {
        $this->container['last_usage'] = $last_usage;

        return $this;
    }

    /**
     * Gets parameter_group_id
     *
     * @return int
     */
    public function getParameterGroupId()
    {
        return $this->container['parameter_group_id'];
    }

    /**
     * Sets parameter_group_id
     *
     * @param int $parameter_group_id parameter_group_id
     *
     * @return $this
     */
    public function setParameterGroupId($parameter_group_id)
    {
        $this->container['parameter_group_id'] = $parameter_group_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets parameter_group
     *
     * @return \SplititSdkClient\Model\ParameterGroups
     */
    public function getParameterGroup()
    {
        return $this->container['parameter_group'];
    }

    /**
     * Sets parameter_group
     *
     * @param \SplititSdkClient\Model\ParameterGroups $parameter_group parameter_group
     *
     * @return $this
     */
    public function setParameterGroup($parameter_group)
    {
        $this->container['parameter_group'] = $parameter_group;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user_type
     *
     * @return \SplititSdkClient\Model\UserType
     */
    public function getUserType()
    {
        return $this->container['user_type'];
    }

    /**
     * Sets user_type
     *
     * @param \SplititSdkClient\Model\UserType $user_type user_type
     *
     * @return $this
     */
    public function setUserType($user_type)
    {
        $this->container['user_type'] = $user_type;

        return $this;
    }

    /**
     * Gets installment_plan_id
     *
     * @return int
     */
    public function getInstallmentPlanId()
    {
        return $this->container['installment_plan_id'];
    }

    /**
     * Sets installment_plan_id
     *
     * @param int $installment_plan_id installment_plan_id
     *
     * @return $this
     */
    public function setInstallmentPlanId($installment_plan_id)
    {
        $this->container['installment_plan_id'] = $installment_plan_id;

        return $this;
    }

    /**
     * Gets installment_plan
     *
     * @return \SplititSdkClient\Model\InstallmentPlans
     */
    public function getInstallmentPlan()
    {
        return $this->container['installment_plan'];
    }

    /**
     * Sets installment_plan
     *
     * @param \SplititSdkClient\Model\InstallmentPlans $installment_plan installment_plan
     *
     * @return $this
     */
    public function setInstallmentPlan($installment_plan)
    {
        $this->container['installment_plan'] = $installment_plan;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


