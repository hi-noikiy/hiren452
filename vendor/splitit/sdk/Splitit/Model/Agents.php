<?php
/**
 * Agents
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * Agents Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Agents implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Agents';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'agent_number' => 'string',
        'email' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'job_title' => 'string',
        'fax_number' => 'string',
        'mobile_number' => 'string',
        'work_phone_number' => 'string',
        'notes' => 'string',
        'crm_id' => 'string',
        'pis_user_unique_id' => 'string',
        'merchant_id' => 'int',
        'pis_user_id' => 'int',
        'merchant' => '\SplititSdkClient\Model\Merchants',
        'pis_user' => 'object',
        'terminals' => '\SplititSdkClient\Model\Terminals[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'agent_number' => null,
        'email' => null,
        'first_name' => null,
        'last_name' => null,
        'job_title' => null,
        'fax_number' => null,
        'mobile_number' => null,
        'work_phone_number' => null,
        'notes' => null,
        'crm_id' => null,
        'pis_user_unique_id' => null,
        'merchant_id' => 'int64',
        'pis_user_id' => 'int64',
        'merchant' => null,
        'pis_user' => null,
        'terminals' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'agent_number' => 'AgentNumber',
        'email' => 'Email',
        'first_name' => 'FirstName',
        'last_name' => 'LastName',
        'job_title' => 'JobTitle',
        'fax_number' => 'FaxNumber',
        'mobile_number' => 'MobileNumber',
        'work_phone_number' => 'WorkPhoneNumber',
        'notes' => 'Notes',
        'crm_id' => 'CrmId',
        'pis_user_unique_id' => 'PisUserUniqueId',
        'merchant_id' => 'MerchantId',
        'pis_user_id' => 'PisUserId',
        'merchant' => 'Merchant',
        'pis_user' => 'PisUser',
        'terminals' => 'Terminals'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'agent_number' => 'setAgentNumber',
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'job_title' => 'setJobTitle',
        'fax_number' => 'setFaxNumber',
        'mobile_number' => 'setMobileNumber',
        'work_phone_number' => 'setWorkPhoneNumber',
        'notes' => 'setNotes',
        'crm_id' => 'setCrmId',
        'pis_user_unique_id' => 'setPisUserUniqueId',
        'merchant_id' => 'setMerchantId',
        'pis_user_id' => 'setPisUserId',
        'merchant' => 'setMerchant',
        'pis_user' => 'setPisUser',
        'terminals' => 'setTerminals'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'agent_number' => 'getAgentNumber',
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'job_title' => 'getJobTitle',
        'fax_number' => 'getFaxNumber',
        'mobile_number' => 'getMobileNumber',
        'work_phone_number' => 'getWorkPhoneNumber',
        'notes' => 'getNotes',
        'crm_id' => 'getCrmId',
        'pis_user_unique_id' => 'getPisUserUniqueId',
        'merchant_id' => 'getMerchantId',
        'pis_user_id' => 'getPisUserId',
        'merchant' => 'getMerchant',
        'pis_user' => 'getPisUser',
        'terminals' => 'getTerminals'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['agent_number'] = isset($data['agent_number']) ? $data['agent_number'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['job_title'] = isset($data['job_title']) ? $data['job_title'] : null;
        $this->container['fax_number'] = isset($data['fax_number']) ? $data['fax_number'] : null;
        $this->container['mobile_number'] = isset($data['mobile_number']) ? $data['mobile_number'] : null;
        $this->container['work_phone_number'] = isset($data['work_phone_number']) ? $data['work_phone_number'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['crm_id'] = isset($data['crm_id']) ? $data['crm_id'] : null;
        $this->container['pis_user_unique_id'] = isset($data['pis_user_unique_id']) ? $data['pis_user_unique_id'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['pis_user_id'] = isset($data['pis_user_id']) ? $data['pis_user_id'] : null;
        $this->container['merchant'] = isset($data['merchant']) ? $data['merchant'] : null;
        $this->container['pis_user'] = isset($data['pis_user']) ? $data['pis_user'] : null;
        $this->container['terminals'] = isset($data['terminals']) ? $data['terminals'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets agent_number
     *
     * @return string
     */
    public function getAgentNumber()
    {
        return $this->container['agent_number'];
    }

    /**
     * Sets agent_number
     *
     * @param string $agent_number agent_number
     *
     * @return $this
     */
    public function setAgentNumber($agent_number)
    {
        $this->container['agent_number'] = $agent_number;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string $job_title job_title
     *
     * @return $this
     */
    public function setJobTitle($job_title)
    {
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets fax_number
     *
     * @return string
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     *
     * @param string $fax_number fax_number
     *
     * @return $this
     */
    public function setFaxNumber($fax_number)
    {
        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets mobile_number
     *
     * @return string
     */
    public function getMobileNumber()
    {
        return $this->container['mobile_number'];
    }

    /**
     * Sets mobile_number
     *
     * @param string $mobile_number mobile_number
     *
     * @return $this
     */
    public function setMobileNumber($mobile_number)
    {
        $this->container['mobile_number'] = $mobile_number;

        return $this;
    }

    /**
     * Gets work_phone_number
     *
     * @return string
     */
    public function getWorkPhoneNumber()
    {
        return $this->container['work_phone_number'];
    }

    /**
     * Sets work_phone_number
     *
     * @param string $work_phone_number work_phone_number
     *
     * @return $this
     */
    public function setWorkPhoneNumber($work_phone_number)
    {
        $this->container['work_phone_number'] = $work_phone_number;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets crm_id
     *
     * @return string
     */
    public function getCrmId()
    {
        return $this->container['crm_id'];
    }

    /**
     * Sets crm_id
     *
     * @param string $crm_id crm_id
     *
     * @return $this
     */
    public function setCrmId($crm_id)
    {
        $this->container['crm_id'] = $crm_id;

        return $this;
    }

    /**
     * Gets pis_user_unique_id
     *
     * @return string
     */
    public function getPisUserUniqueId()
    {
        return $this->container['pis_user_unique_id'];
    }

    /**
     * Sets pis_user_unique_id
     *
     * @param string $pis_user_unique_id pis_user_unique_id
     *
     * @return $this
     */
    public function setPisUserUniqueId($pis_user_unique_id)
    {
        $this->container['pis_user_unique_id'] = $pis_user_unique_id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id merchant_id
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets pis_user_id
     *
     * @return int
     */
    public function getPisUserId()
    {
        return $this->container['pis_user_id'];
    }

    /**
     * Sets pis_user_id
     *
     * @param int $pis_user_id pis_user_id
     *
     * @return $this
     */
    public function setPisUserId($pis_user_id)
    {
        $this->container['pis_user_id'] = $pis_user_id;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \SplititSdkClient\Model\Merchants
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \SplititSdkClient\Model\Merchants $merchant merchant
     *
     * @return $this
     */
    public function setMerchant($merchant)
    {
        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets pis_user
     *
     * @return object
     */
    public function getPisUser()
    {
        return $this->container['pis_user'];
    }

    /**
     * Sets pis_user
     *
     * @param object $pis_user pis_user
     *
     * @return $this
     */
    public function setPisUser($pis_user)
    {
        $this->container['pis_user'] = $pis_user;

        return $this;
    }

    /**
     * Gets terminals
     *
     * @return \SplititSdkClient\Model\Terminals[]
     */
    public function getTerminals()
    {
        return $this->container['terminals'];
    }

    /**
     * Sets terminals
     *
     * @param \SplititSdkClient\Model\Terminals[] $terminals terminals
     *
     * @return $this
     */
    public function setTerminals($terminals)
    {
        $this->container['terminals'] = $terminals;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


