<?php
/**
 * ScpProviders
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * ScpProviders Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ScpProviders implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ScpProviders';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'implementation_code' => 'string',
        'total_funds' => 'float',
        'max_non_secure_plans_percent' => 'float',
        'scp_variable_cost_annual_percent' => 'float',
        'scp_fixed_cost' => 'float',
        'scp_revenue_share_percent' => 'float',
        'total_funds_currency_id' => 'int',
        'emails_list' => 'string',
        'is_operated_by_splitit' => 'bool',
        'is_funding_by_splitit' => 'bool',
        'deduct_revenue_share_automatically_from_last_installment' => 'bool',
        'fund_first_installment' => 'bool',
        'total_funds_currency' => '\SplititSdkClient\Model\Currencies',
        'parameter_group' => '\SplititSdkClient\Model\ParameterGroups',
        'scp_providers_currencies' => '\SplititSdkClient\Model\ScpProvidersCurrencies[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'name' => null,
        'implementation_code' => null,
        'total_funds' => 'decimal',
        'max_non_secure_plans_percent' => 'decimal',
        'scp_variable_cost_annual_percent' => 'decimal',
        'scp_fixed_cost' => 'decimal',
        'scp_revenue_share_percent' => 'decimal',
        'total_funds_currency_id' => 'int64',
        'emails_list' => null,
        'is_operated_by_splitit' => null,
        'is_funding_by_splitit' => null,
        'deduct_revenue_share_automatically_from_last_installment' => null,
        'fund_first_installment' => null,
        'total_funds_currency' => null,
        'parameter_group' => null,
        'scp_providers_currencies' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'name' => 'Name',
        'implementation_code' => 'ImplementationCode',
        'total_funds' => 'TotalFunds',
        'max_non_secure_plans_percent' => 'MaxNonSecurePlansPercent',
        'scp_variable_cost_annual_percent' => 'ScpVariableCostAnnualPercent',
        'scp_fixed_cost' => 'ScpFixedCost',
        'scp_revenue_share_percent' => 'ScpRevenueSharePercent',
        'total_funds_currency_id' => 'TotalFundsCurrencyId',
        'emails_list' => 'EmailsList',
        'is_operated_by_splitit' => 'IsOperatedBySplitit',
        'is_funding_by_splitit' => 'IsFundingBySplitit',
        'deduct_revenue_share_automatically_from_last_installment' => 'DeductRevenueShareAutomaticallyFromLastInstallment',
        'fund_first_installment' => 'FundFirstInstallment',
        'total_funds_currency' => 'TotalFundsCurrency',
        'parameter_group' => 'ParameterGroup',
        'scp_providers_currencies' => 'ScpProvidersCurrencies'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'implementation_code' => 'setImplementationCode',
        'total_funds' => 'setTotalFunds',
        'max_non_secure_plans_percent' => 'setMaxNonSecurePlansPercent',
        'scp_variable_cost_annual_percent' => 'setScpVariableCostAnnualPercent',
        'scp_fixed_cost' => 'setScpFixedCost',
        'scp_revenue_share_percent' => 'setScpRevenueSharePercent',
        'total_funds_currency_id' => 'setTotalFundsCurrencyId',
        'emails_list' => 'setEmailsList',
        'is_operated_by_splitit' => 'setIsOperatedBySplitit',
        'is_funding_by_splitit' => 'setIsFundingBySplitit',
        'deduct_revenue_share_automatically_from_last_installment' => 'setDeductRevenueShareAutomaticallyFromLastInstallment',
        'fund_first_installment' => 'setFundFirstInstallment',
        'total_funds_currency' => 'setTotalFundsCurrency',
        'parameter_group' => 'setParameterGroup',
        'scp_providers_currencies' => 'setScpProvidersCurrencies'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'implementation_code' => 'getImplementationCode',
        'total_funds' => 'getTotalFunds',
        'max_non_secure_plans_percent' => 'getMaxNonSecurePlansPercent',
        'scp_variable_cost_annual_percent' => 'getScpVariableCostAnnualPercent',
        'scp_fixed_cost' => 'getScpFixedCost',
        'scp_revenue_share_percent' => 'getScpRevenueSharePercent',
        'total_funds_currency_id' => 'getTotalFundsCurrencyId',
        'emails_list' => 'getEmailsList',
        'is_operated_by_splitit' => 'getIsOperatedBySplitit',
        'is_funding_by_splitit' => 'getIsFundingBySplitit',
        'deduct_revenue_share_automatically_from_last_installment' => 'getDeductRevenueShareAutomaticallyFromLastInstallment',
        'fund_first_installment' => 'getFundFirstInstallment',
        'total_funds_currency' => 'getTotalFundsCurrency',
        'parameter_group' => 'getParameterGroup',
        'scp_providers_currencies' => 'getScpProvidersCurrencies'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['implementation_code'] = isset($data['implementation_code']) ? $data['implementation_code'] : null;
        $this->container['total_funds'] = isset($data['total_funds']) ? $data['total_funds'] : null;
        $this->container['max_non_secure_plans_percent'] = isset($data['max_non_secure_plans_percent']) ? $data['max_non_secure_plans_percent'] : null;
        $this->container['scp_variable_cost_annual_percent'] = isset($data['scp_variable_cost_annual_percent']) ? $data['scp_variable_cost_annual_percent'] : null;
        $this->container['scp_fixed_cost'] = isset($data['scp_fixed_cost']) ? $data['scp_fixed_cost'] : null;
        $this->container['scp_revenue_share_percent'] = isset($data['scp_revenue_share_percent']) ? $data['scp_revenue_share_percent'] : null;
        $this->container['total_funds_currency_id'] = isset($data['total_funds_currency_id']) ? $data['total_funds_currency_id'] : null;
        $this->container['emails_list'] = isset($data['emails_list']) ? $data['emails_list'] : null;
        $this->container['is_operated_by_splitit'] = isset($data['is_operated_by_splitit']) ? $data['is_operated_by_splitit'] : null;
        $this->container['is_funding_by_splitit'] = isset($data['is_funding_by_splitit']) ? $data['is_funding_by_splitit'] : null;
        $this->container['deduct_revenue_share_automatically_from_last_installment'] = isset($data['deduct_revenue_share_automatically_from_last_installment']) ? $data['deduct_revenue_share_automatically_from_last_installment'] : null;
        $this->container['fund_first_installment'] = isset($data['fund_first_installment']) ? $data['fund_first_installment'] : null;
        $this->container['total_funds_currency'] = isset($data['total_funds_currency']) ? $data['total_funds_currency'] : null;
        $this->container['parameter_group'] = isset($data['parameter_group']) ? $data['parameter_group'] : null;
        $this->container['scp_providers_currencies'] = isset($data['scp_providers_currencies']) ? $data['scp_providers_currencies'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['total_funds'] === null) {
            $invalidProperties[] = "'total_funds' can't be null";
        }
        if ($this->container['max_non_secure_plans_percent'] === null) {
            $invalidProperties[] = "'max_non_secure_plans_percent' can't be null";
        }
        if ($this->container['scp_variable_cost_annual_percent'] === null) {
            $invalidProperties[] = "'scp_variable_cost_annual_percent' can't be null";
        }
        if ($this->container['scp_fixed_cost'] === null) {
            $invalidProperties[] = "'scp_fixed_cost' can't be null";
        }
        if ($this->container['scp_revenue_share_percent'] === null) {
            $invalidProperties[] = "'scp_revenue_share_percent' can't be null";
        }
        if ($this->container['is_funding_by_splitit'] === null) {
            $invalidProperties[] = "'is_funding_by_splitit' can't be null";
        }
        if ($this->container['deduct_revenue_share_automatically_from_last_installment'] === null) {
            $invalidProperties[] = "'deduct_revenue_share_automatically_from_last_installment' can't be null";
        }
        if ($this->container['fund_first_installment'] === null) {
            $invalidProperties[] = "'fund_first_installment' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets implementation_code
     *
     * @return string
     */
    public function getImplementationCode()
    {
        return $this->container['implementation_code'];
    }

    /**
     * Sets implementation_code
     *
     * @param string $implementation_code implementation_code
     *
     * @return $this
     */
    public function setImplementationCode($implementation_code)
    {
        $this->container['implementation_code'] = $implementation_code;

        return $this;
    }

    /**
     * Gets total_funds
     *
     * @return float
     */
    public function getTotalFunds()
    {
        return $this->container['total_funds'];
    }

    /**
     * Sets total_funds
     *
     * @param float $total_funds total_funds
     *
     * @return $this
     */
    public function setTotalFunds($total_funds)
    {
        $this->container['total_funds'] = $total_funds;

        return $this;
    }

    /**
     * Gets max_non_secure_plans_percent
     *
     * @return float
     */
    public function getMaxNonSecurePlansPercent()
    {
        return $this->container['max_non_secure_plans_percent'];
    }

    /**
     * Sets max_non_secure_plans_percent
     *
     * @param float $max_non_secure_plans_percent max_non_secure_plans_percent
     *
     * @return $this
     */
    public function setMaxNonSecurePlansPercent($max_non_secure_plans_percent)
    {
        $this->container['max_non_secure_plans_percent'] = $max_non_secure_plans_percent;

        return $this;
    }

    /**
     * Gets scp_variable_cost_annual_percent
     *
     * @return float
     */
    public function getScpVariableCostAnnualPercent()
    {
        return $this->container['scp_variable_cost_annual_percent'];
    }

    /**
     * Sets scp_variable_cost_annual_percent
     *
     * @param float $scp_variable_cost_annual_percent scp_variable_cost_annual_percent
     *
     * @return $this
     */
    public function setScpVariableCostAnnualPercent($scp_variable_cost_annual_percent)
    {
        $this->container['scp_variable_cost_annual_percent'] = $scp_variable_cost_annual_percent;

        return $this;
    }

    /**
     * Gets scp_fixed_cost
     *
     * @return float
     */
    public function getScpFixedCost()
    {
        return $this->container['scp_fixed_cost'];
    }

    /**
     * Sets scp_fixed_cost
     *
     * @param float $scp_fixed_cost scp_fixed_cost
     *
     * @return $this
     */
    public function setScpFixedCost($scp_fixed_cost)
    {
        $this->container['scp_fixed_cost'] = $scp_fixed_cost;

        return $this;
    }

    /**
     * Gets scp_revenue_share_percent
     *
     * @return float
     */
    public function getScpRevenueSharePercent()
    {
        return $this->container['scp_revenue_share_percent'];
    }

    /**
     * Sets scp_revenue_share_percent
     *
     * @param float $scp_revenue_share_percent scp_revenue_share_percent
     *
     * @return $this
     */
    public function setScpRevenueSharePercent($scp_revenue_share_percent)
    {
        $this->container['scp_revenue_share_percent'] = $scp_revenue_share_percent;

        return $this;
    }

    /**
     * Gets total_funds_currency_id
     *
     * @return int
     */
    public function getTotalFundsCurrencyId()
    {
        return $this->container['total_funds_currency_id'];
    }

    /**
     * Sets total_funds_currency_id
     *
     * @param int $total_funds_currency_id total_funds_currency_id
     *
     * @return $this
     */
    public function setTotalFundsCurrencyId($total_funds_currency_id)
    {
        $this->container['total_funds_currency_id'] = $total_funds_currency_id;

        return $this;
    }

    /**
     * Gets emails_list
     *
     * @return string
     */
    public function getEmailsList()
    {
        return $this->container['emails_list'];
    }

    /**
     * Sets emails_list
     *
     * @param string $emails_list emails_list
     *
     * @return $this
     */
    public function setEmailsList($emails_list)
    {
        $this->container['emails_list'] = $emails_list;

        return $this;
    }

    /**
     * Gets is_operated_by_splitit
     *
     * @return bool
     */
    public function getIsOperatedBySplitit()
    {
        return $this->container['is_operated_by_splitit'];
    }

    /**
     * Sets is_operated_by_splitit
     *
     * @param bool $is_operated_by_splitit is_operated_by_splitit
     *
     * @return $this
     */
    public function setIsOperatedBySplitit($is_operated_by_splitit)
    {
        $this->container['is_operated_by_splitit'] = $is_operated_by_splitit;

        return $this;
    }

    /**
     * Gets is_funding_by_splitit
     *
     * @return bool
     */
    public function getIsFundingBySplitit()
    {
        return $this->container['is_funding_by_splitit'];
    }

    /**
     * Sets is_funding_by_splitit
     *
     * @param bool $is_funding_by_splitit is_funding_by_splitit
     *
     * @return $this
     */
    public function setIsFundingBySplitit($is_funding_by_splitit)
    {
        $this->container['is_funding_by_splitit'] = $is_funding_by_splitit;

        return $this;
    }

    /**
     * Gets deduct_revenue_share_automatically_from_last_installment
     *
     * @return bool
     */
    public function getDeductRevenueShareAutomaticallyFromLastInstallment()
    {
        return $this->container['deduct_revenue_share_automatically_from_last_installment'];
    }

    /**
     * Sets deduct_revenue_share_automatically_from_last_installment
     *
     * @param bool $deduct_revenue_share_automatically_from_last_installment deduct_revenue_share_automatically_from_last_installment
     *
     * @return $this
     */
    public function setDeductRevenueShareAutomaticallyFromLastInstallment($deduct_revenue_share_automatically_from_last_installment)
    {
        $this->container['deduct_revenue_share_automatically_from_last_installment'] = $deduct_revenue_share_automatically_from_last_installment;

        return $this;
    }

    /**
     * Gets fund_first_installment
     *
     * @return bool
     */
    public function getFundFirstInstallment()
    {
        return $this->container['fund_first_installment'];
    }

    /**
     * Sets fund_first_installment
     *
     * @param bool $fund_first_installment fund_first_installment
     *
     * @return $this
     */
    public function setFundFirstInstallment($fund_first_installment)
    {
        $this->container['fund_first_installment'] = $fund_first_installment;

        return $this;
    }

    /**
     * Gets total_funds_currency
     *
     * @return \SplititSdkClient\Model\Currencies
     */
    public function getTotalFundsCurrency()
    {
        return $this->container['total_funds_currency'];
    }

    /**
     * Sets total_funds_currency
     *
     * @param \SplititSdkClient\Model\Currencies $total_funds_currency total_funds_currency
     *
     * @return $this
     */
    public function setTotalFundsCurrency($total_funds_currency)
    {
        $this->container['total_funds_currency'] = $total_funds_currency;

        return $this;
    }

    /**
     * Gets parameter_group
     *
     * @return \SplititSdkClient\Model\ParameterGroups
     */
    public function getParameterGroup()
    {
        return $this->container['parameter_group'];
    }

    /**
     * Sets parameter_group
     *
     * @param \SplititSdkClient\Model\ParameterGroups $parameter_group parameter_group
     *
     * @return $this
     */
    public function setParameterGroup($parameter_group)
    {
        $this->container['parameter_group'] = $parameter_group;

        return $this;
    }

    /**
     * Gets scp_providers_currencies
     *
     * @return \SplititSdkClient\Model\ScpProvidersCurrencies[]
     */
    public function getScpProvidersCurrencies()
    {
        return $this->container['scp_providers_currencies'];
    }

    /**
     * Sets scp_providers_currencies
     *
     * @param \SplititSdkClient\Model\ScpProvidersCurrencies[] $scp_providers_currencies scp_providers_currencies
     *
     * @return $this
     */
    public function setScpProvidersCurrencies($scp_providers_currencies)
    {
        $this->container['scp_providers_currencies'] = $scp_providers_currencies;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


