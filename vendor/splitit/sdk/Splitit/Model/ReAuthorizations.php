<?php
/**
 * ReAuthorizations
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * ReAuthorizations Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReAuthorizations implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReAuthorizations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'installment_plan_id' => 'int',
        'processor_id' => 'int',
        'amount' => 'float',
        'process_date_time' => '\DateTime',
        'is_test' => 'bool',
        'card_state_id' => 'int',
        'card_state' => '\SplititSdkClient\Model\CardStateLogs',
        'installment_plan' => '\SplititSdkClient\Model\InstallmentPlans',
        'processor' => '\SplititSdkClient\Model\Processors',
        're_authorization_payment_gateway_transaction_logs' => '\SplititSdkClient\Model\ReAuthorizationPaymentGatewayTransactionLogs[]',
        'status' => '\SplititSdkClient\Model\InstallmentStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'installment_plan_id' => 'int64',
        'processor_id' => 'int64',
        'amount' => 'decimal',
        'process_date_time' => 'date-time',
        'is_test' => null,
        'card_state_id' => 'int64',
        'card_state' => null,
        'installment_plan' => null,
        'processor' => null,
        're_authorization_payment_gateway_transaction_logs' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'installment_plan_id' => 'InstallmentPlanId',
        'processor_id' => 'ProcessorId',
        'amount' => 'Amount',
        'process_date_time' => 'ProcessDateTime',
        'is_test' => 'IsTest',
        'card_state_id' => 'CardStateId',
        'card_state' => 'CardState',
        'installment_plan' => 'InstallmentPlan',
        'processor' => 'Processor',
        're_authorization_payment_gateway_transaction_logs' => 'ReAuthorizationPaymentGatewayTransactionLogs',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'installment_plan_id' => 'setInstallmentPlanId',
        'processor_id' => 'setProcessorId',
        'amount' => 'setAmount',
        'process_date_time' => 'setProcessDateTime',
        'is_test' => 'setIsTest',
        'card_state_id' => 'setCardStateId',
        'card_state' => 'setCardState',
        'installment_plan' => 'setInstallmentPlan',
        'processor' => 'setProcessor',
        're_authorization_payment_gateway_transaction_logs' => 'setReAuthorizationPaymentGatewayTransactionLogs',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'installment_plan_id' => 'getInstallmentPlanId',
        'processor_id' => 'getProcessorId',
        'amount' => 'getAmount',
        'process_date_time' => 'getProcessDateTime',
        'is_test' => 'getIsTest',
        'card_state_id' => 'getCardStateId',
        'card_state' => 'getCardState',
        'installment_plan' => 'getInstallmentPlan',
        'processor' => 'getProcessor',
        're_authorization_payment_gateway_transaction_logs' => 'getReAuthorizationPaymentGatewayTransactionLogs',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['installment_plan_id'] = isset($data['installment_plan_id']) ? $data['installment_plan_id'] : null;
        $this->container['processor_id'] = isset($data['processor_id']) ? $data['processor_id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['process_date_time'] = isset($data['process_date_time']) ? $data['process_date_time'] : null;
        $this->container['is_test'] = isset($data['is_test']) ? $data['is_test'] : null;
        $this->container['card_state_id'] = isset($data['card_state_id']) ? $data['card_state_id'] : null;
        $this->container['card_state'] = isset($data['card_state']) ? $data['card_state'] : null;
        $this->container['installment_plan'] = isset($data['installment_plan']) ? $data['installment_plan'] : null;
        $this->container['processor'] = isset($data['processor']) ? $data['processor'] : null;
        $this->container['re_authorization_payment_gateway_transaction_logs'] = isset($data['re_authorization_payment_gateway_transaction_logs']) ? $data['re_authorization_payment_gateway_transaction_logs'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['installment_plan_id'] === null) {
            $invalidProperties[] = "'installment_plan_id' can't be null";
        }
        if ($this->container['processor_id'] === null) {
            $invalidProperties[] = "'processor_id' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['is_test'] === null) {
            $invalidProperties[] = "'is_test' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets installment_plan_id
     *
     * @return int
     */
    public function getInstallmentPlanId()
    {
        return $this->container['installment_plan_id'];
    }

    /**
     * Sets installment_plan_id
     *
     * @param int $installment_plan_id installment_plan_id
     *
     * @return $this
     */
    public function setInstallmentPlanId($installment_plan_id)
    {
        $this->container['installment_plan_id'] = $installment_plan_id;

        return $this;
    }

    /**
     * Gets processor_id
     *
     * @return int
     */
    public function getProcessorId()
    {
        return $this->container['processor_id'];
    }

    /**
     * Sets processor_id
     *
     * @param int $processor_id processor_id
     *
     * @return $this
     */
    public function setProcessorId($processor_id)
    {
        $this->container['processor_id'] = $processor_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets process_date_time
     *
     * @return \DateTime
     */
    public function getProcessDateTime()
    {
        return $this->container['process_date_time'];
    }

    /**
     * Sets process_date_time
     *
     * @param \DateTime $process_date_time process_date_time
     *
     * @return $this
     */
    public function setProcessDateTime($process_date_time)
    {
        $this->container['process_date_time'] = $process_date_time;

        return $this;
    }

    /**
     * Gets is_test
     *
     * @return bool
     */
    public function getIsTest()
    {
        return $this->container['is_test'];
    }

    /**
     * Sets is_test
     *
     * @param bool $is_test is_test
     *
     * @return $this
     */
    public function setIsTest($is_test)
    {
        $this->container['is_test'] = $is_test;

        return $this;
    }

    /**
     * Gets card_state_id
     *
     * @return int
     */
    public function getCardStateId()
    {
        return $this->container['card_state_id'];
    }

    /**
     * Sets card_state_id
     *
     * @param int $card_state_id card_state_id
     *
     * @return $this
     */
    public function setCardStateId($card_state_id)
    {
        $this->container['card_state_id'] = $card_state_id;

        return $this;
    }

    /**
     * Gets card_state
     *
     * @return \SplititSdkClient\Model\CardStateLogs
     */
    public function getCardState()
    {
        return $this->container['card_state'];
    }

    /**
     * Sets card_state
     *
     * @param \SplititSdkClient\Model\CardStateLogs $card_state card_state
     *
     * @return $this
     */
    public function setCardState($card_state)
    {
        $this->container['card_state'] = $card_state;

        return $this;
    }

    /**
     * Gets installment_plan
     *
     * @return \SplititSdkClient\Model\InstallmentPlans
     */
    public function getInstallmentPlan()
    {
        return $this->container['installment_plan'];
    }

    /**
     * Sets installment_plan
     *
     * @param \SplititSdkClient\Model\InstallmentPlans $installment_plan installment_plan
     *
     * @return $this
     */
    public function setInstallmentPlan($installment_plan)
    {
        $this->container['installment_plan'] = $installment_plan;

        return $this;
    }

    /**
     * Gets processor
     *
     * @return \SplititSdkClient\Model\Processors
     */
    public function getProcessor()
    {
        return $this->container['processor'];
    }

    /**
     * Sets processor
     *
     * @param \SplititSdkClient\Model\Processors $processor processor
     *
     * @return $this
     */
    public function setProcessor($processor)
    {
        $this->container['processor'] = $processor;

        return $this;
    }

    /**
     * Gets re_authorization_payment_gateway_transaction_logs
     *
     * @return \SplititSdkClient\Model\ReAuthorizationPaymentGatewayTransactionLogs[]
     */
    public function getReAuthorizationPaymentGatewayTransactionLogs()
    {
        return $this->container['re_authorization_payment_gateway_transaction_logs'];
    }

    /**
     * Sets re_authorization_payment_gateway_transaction_logs
     *
     * @param \SplititSdkClient\Model\ReAuthorizationPaymentGatewayTransactionLogs[] $re_authorization_payment_gateway_transaction_logs re_authorization_payment_gateway_transaction_logs
     *
     * @return $this
     */
    public function setReAuthorizationPaymentGatewayTransactionLogs($re_authorization_payment_gateway_transaction_logs)
    {
        $this->container['re_authorization_payment_gateway_transaction_logs'] = $re_authorization_payment_gateway_transaction_logs;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \SplititSdkClient\Model\InstallmentStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \SplititSdkClient\Model\InstallmentStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


