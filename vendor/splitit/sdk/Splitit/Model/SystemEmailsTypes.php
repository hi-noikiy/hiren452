<?php
/**
 * SystemEmailsTypes
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;
use \SplititSdkClient\ObjectSerializer;

/**
 * SystemEmailsTypes Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SystemEmailsTypes
{
    /**
     * Possible values of this enum
     */
    const CONSUMER_RE_AUTHORIZATION_NOTIFICATION = 'ConsumerReAuthorizationNotification';
    const ADMIN_NEW_USER = 'AdminNewUser';
    const MERCHANT_PAYMENT_FAILURE = 'MerchantPaymentFailure';
    const MERCHANT_AUTHORIZATION_FAILURE = 'MerchantAuthorizationFailure';
    const MERCHANT_CHB = 'MerchantChb';
    const MERCHANT_CREDIT_CARD_CHANGE_CONFIRMATION = 'MerchantCreditCardChangeConfirmation';
    const MERCHANT_FULL_CAPTURE_CONFIRMATION = 'MerchantFullCaptureConfirmation';
    const MERCHANT_NEW_USER = 'MerchantNewUser';
    const MERCHANT_NEW_API_USER = 'MerchantNewApiUser';
    const CONSUMER_INSTALLMENT_PLAN_CONFIRMATION = 'ConsumerInstallmentPlanConfirmation';
    const CONSUMER_PAYMENT_CONFIRMATION = 'ConsumerPaymentConfirmation';
    const CONSUMER_PAYMENT_FAILURE = 'ConsumerPaymentFailure';
    const CONSUMER_AUTHORIZATION_FAILURE = 'ConsumerAuthorizationFailure';
    const CONSUMER_PARTIAL_REFUND_PLAN_IN_PROGRESS = 'ConsumerPartialRefundPlanInProgress';
    const CONSUMER_CREDIT_CARD_CHANGE_CONFIRMATION = 'ConsumerCreditCardChangeConfirmation';
    const CONSUMER_FULL_CAPTURE_CONFIRMATION = 'ConsumerFullCaptureConfirmation';
    const CONSUMER_PASSWORD_RESET_USER_UNLOCK = 'ConsumerPasswordResetUserUnlock';
    const CONSUMER_WAITING_FOR_APPROVAL = 'ConsumerWaitingForApproval';
    const MERCHANT_NOTIFY_CONSUMER_APPROVAL_SET = 'MerchantNotifyConsumerApprovalSet';
    const CONSUMER_NOTIFY_MERCHANT_UPDATE_INSTALLMENTS = 'ConsumerNotifyMerchantUpdateInstallments';
    const MERCHANT_REMAINDER_CONSUMER_WAITING_FOR_APPROVAL = 'MerchantRemainderConsumerWaitingForApproval';
    const CONSUMER_FULL_CAPTURE_CONFIRMATION_TRIGGERED_BY_CONSUMER = 'ConsumerFullCaptureConfirmationTriggeredByConsumer';
    const MERCHANT_FULL_CAPTURE_CONFIRMATION_TRIGGERED_BY_CONSUMER = 'MerchantFullCaptureConfirmationTriggeredByConsumer';
    const CONSUMER_PLAN_CANCELLED = 'ConsumerPlanCancelled';
    const MERCHANT_PLAN_CANCELLED = 'MerchantPlanCancelled';
    const CONSUMER_PLAN_CANCELLED_WITH_REFUND = 'ConsumerPlanCancelledWithRefund';
    const MERCHANT_PLAN_CANCELLED_WITH_REFUND = 'MerchantPlanCancelledWithRefund';
    const CONSUMER_CARD_EXPIRATION_NOTIFICATION = 'ConsumerCardExpirationNotification';
    const SUPPORT_CONSUMER_PAYMENT_FAILURE = 'SupportConsumerPaymentFailure';
    const SUPPORT_CONSUMER_AUTHORIZATION_FAILURE = 'SupportConsumerAuthorizationFailure';
    const CONSUMER_CC_REJECTION_SUCCESSFULLY_RECOVERED = 'ConsumerCcRejectionSuccessfullyRecovered';
    const MERCHANT_PENDING_SHIPMENT_REMINDER_NOTIFICATION = 'MerchantPendingShipmentReminderNotification';
    const CONSUMER_PARTIAL_REFUND_PLAN_COMPLETED = 'ConsumerPartialRefundPlanCompleted';
    const CONSUMER_FULL_REFUND_PLAN = 'ConsumerFullRefundPlan';
    const MERCHANT_FUNDING_IS_OVER_NOTIFICATION = 'MerchantFundingIsOverNotification';
    const MERCHANT_SCP_TERMINAL_FUNDING_HAS_EXCEEDS_THRESHOLD_NOTIFICATION = 'MerchantScpTerminalFundingHasExceedsThresholdNotification';
    const MERCHANT_BOARDING_SIGNUP = 'MerchantBoardingSignup';
    const MERCHANT_BOARDING_SUBMIT = 'MerchantBoardingSubmit';
    const MERCHANT_BOARDING_TEST = 'MerchantBoardingTest';
    const MERCHANT_BOARDING_CERTIFIED = 'MerchantBoardingCertified';
    const MERCHANT_BOARDING_GO_LIVE = 'MerchantBoardingGoLive';
    const CONSUMER_NON_SECURED_PAYMENT_FAILURE = 'ConsumerNonSecuredPaymentFailure';
    const MERCHANT_NON_SECURED_PAYMENT_FAILURE = 'MerchantNonSecuredPaymentFailure';
    const AGENT_NEW_USER = 'AgentNewUser';
    const CONSUMER_CC_REJECTION_SUCCESSFULLY_RECOVERED_SINGLE_INSTALLMENT = 'ConsumerCcRejectionSuccessfullyRecoveredSingleInstallment';
    const CONSUMER_AUTHORIZATION_FAILURE_SINGLE_INSTALLMENT = 'ConsumerAuthorizationFailureSingleInstallment';
    const CONSUMER_CARD_EXPIRATION_NOTIFICATION_SINGLE_INSTALLMENT = 'ConsumerCardExpirationNotificationSingleInstallment';
    const REQUEST_PAYMENT = 'RequestPayment';
    const REQUEST_UPDATE_CARD = 'RequestUpdateCard';
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::CONSUMER_RE_AUTHORIZATION_NOTIFICATION,
            self::ADMIN_NEW_USER,
            self::MERCHANT_PAYMENT_FAILURE,
            self::MERCHANT_AUTHORIZATION_FAILURE,
            self::MERCHANT_CHB,
            self::MERCHANT_CREDIT_CARD_CHANGE_CONFIRMATION,
            self::MERCHANT_FULL_CAPTURE_CONFIRMATION,
            self::MERCHANT_NEW_USER,
            self::MERCHANT_NEW_API_USER,
            self::CONSUMER_INSTALLMENT_PLAN_CONFIRMATION,
            self::CONSUMER_PAYMENT_CONFIRMATION,
            self::CONSUMER_PAYMENT_FAILURE,
            self::CONSUMER_AUTHORIZATION_FAILURE,
            self::CONSUMER_PARTIAL_REFUND_PLAN_IN_PROGRESS,
            self::CONSUMER_CREDIT_CARD_CHANGE_CONFIRMATION,
            self::CONSUMER_FULL_CAPTURE_CONFIRMATION,
            self::CONSUMER_PASSWORD_RESET_USER_UNLOCK,
            self::CONSUMER_WAITING_FOR_APPROVAL,
            self::MERCHANT_NOTIFY_CONSUMER_APPROVAL_SET,
            self::CONSUMER_NOTIFY_MERCHANT_UPDATE_INSTALLMENTS,
            self::MERCHANT_REMAINDER_CONSUMER_WAITING_FOR_APPROVAL,
            self::CONSUMER_FULL_CAPTURE_CONFIRMATION_TRIGGERED_BY_CONSUMER,
            self::MERCHANT_FULL_CAPTURE_CONFIRMATION_TRIGGERED_BY_CONSUMER,
            self::CONSUMER_PLAN_CANCELLED,
            self::MERCHANT_PLAN_CANCELLED,
            self::CONSUMER_PLAN_CANCELLED_WITH_REFUND,
            self::MERCHANT_PLAN_CANCELLED_WITH_REFUND,
            self::CONSUMER_CARD_EXPIRATION_NOTIFICATION,
            self::SUPPORT_CONSUMER_PAYMENT_FAILURE,
            self::SUPPORT_CONSUMER_AUTHORIZATION_FAILURE,
            self::CONSUMER_CC_REJECTION_SUCCESSFULLY_RECOVERED,
            self::MERCHANT_PENDING_SHIPMENT_REMINDER_NOTIFICATION,
            self::CONSUMER_PARTIAL_REFUND_PLAN_COMPLETED,
            self::CONSUMER_FULL_REFUND_PLAN,
            self::MERCHANT_FUNDING_IS_OVER_NOTIFICATION,
            self::MERCHANT_SCP_TERMINAL_FUNDING_HAS_EXCEEDS_THRESHOLD_NOTIFICATION,
            self::MERCHANT_BOARDING_SIGNUP,
            self::MERCHANT_BOARDING_SUBMIT,
            self::MERCHANT_BOARDING_TEST,
            self::MERCHANT_BOARDING_CERTIFIED,
            self::MERCHANT_BOARDING_GO_LIVE,
            self::CONSUMER_NON_SECURED_PAYMENT_FAILURE,
            self::MERCHANT_NON_SECURED_PAYMENT_FAILURE,
            self::AGENT_NEW_USER,
            self::CONSUMER_CC_REJECTION_SUCCESSFULLY_RECOVERED_SINGLE_INSTALLMENT,
            self::CONSUMER_AUTHORIZATION_FAILURE_SINGLE_INSTALLMENT,
            self::CONSUMER_CARD_EXPIRATION_NOTIFICATION_SINGLE_INSTALLMENT,
            self::REQUEST_PAYMENT,
            self::REQUEST_UPDATE_CARD,
        ];
    }
}


