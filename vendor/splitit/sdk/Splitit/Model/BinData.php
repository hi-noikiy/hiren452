<?php
/**
 * BinData
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * BinData Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BinData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BinData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bin_number' => 'string',
        'card_brand' => '\SplititSdkClient\Model\CardBrand',
        'issuing_country_iso_number' => 'string',
        'card_type' => '\SplititSdkClient\Model\CardType',
        'is_prepaid' => 'bool',
        'card_class' => 'string',
        'product_id' => 'string',
        'issuer_bank_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bin_number' => null,
        'card_brand' => null,
        'issuing_country_iso_number' => null,
        'card_type' => null,
        'is_prepaid' => null,
        'card_class' => null,
        'product_id' => null,
        'issuer_bank_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bin_number' => 'BinNumber',
        'card_brand' => 'CardBrand',
        'issuing_country_iso_number' => 'IssuingCountryIsoNumber',
        'card_type' => 'CardType',
        'is_prepaid' => 'IsPrepaid',
        'card_class' => 'CardClass',
        'product_id' => 'ProductId',
        'issuer_bank_name' => 'IssuerBankName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bin_number' => 'setBinNumber',
        'card_brand' => 'setCardBrand',
        'issuing_country_iso_number' => 'setIssuingCountryIsoNumber',
        'card_type' => 'setCardType',
        'is_prepaid' => 'setIsPrepaid',
        'card_class' => 'setCardClass',
        'product_id' => 'setProductId',
        'issuer_bank_name' => 'setIssuerBankName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bin_number' => 'getBinNumber',
        'card_brand' => 'getCardBrand',
        'issuing_country_iso_number' => 'getIssuingCountryIsoNumber',
        'card_type' => 'getCardType',
        'is_prepaid' => 'getIsPrepaid',
        'card_class' => 'getCardClass',
        'product_id' => 'getProductId',
        'issuer_bank_name' => 'getIssuerBankName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bin_number'] = isset($data['bin_number']) ? $data['bin_number'] : null;
        $this->container['card_brand'] = isset($data['card_brand']) ? $data['card_brand'] : null;
        $this->container['issuing_country_iso_number'] = isset($data['issuing_country_iso_number']) ? $data['issuing_country_iso_number'] : null;
        $this->container['card_type'] = isset($data['card_type']) ? $data['card_type'] : null;
        $this->container['is_prepaid'] = isset($data['is_prepaid']) ? $data['is_prepaid'] : null;
        $this->container['card_class'] = isset($data['card_class']) ? $data['card_class'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['issuer_bank_name'] = isset($data['issuer_bank_name']) ? $data['issuer_bank_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['card_brand'] === null) {
            $invalidProperties[] = "'card_brand' can't be null";
        }
        if ($this->container['card_type'] === null) {
            $invalidProperties[] = "'card_type' can't be null";
        }
        if ($this->container['is_prepaid'] === null) {
            $invalidProperties[] = "'is_prepaid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bin_number
     *
     * @return string
     */
    public function getBinNumber()
    {
        return $this->container['bin_number'];
    }

    /**
     * Sets bin_number
     *
     * @param string $bin_number bin_number
     *
     * @return $this
     */
    public function setBinNumber($bin_number)
    {
        $this->container['bin_number'] = $bin_number;

        return $this;
    }

    /**
     * Gets card_brand
     *
     * @return \SplititSdkClient\Model\CardBrand
     */
    public function getCardBrand()
    {
        return $this->container['card_brand'];
    }

    /**
     * Sets card_brand
     *
     * @param \SplititSdkClient\Model\CardBrand $card_brand card_brand
     *
     * @return $this
     */
    public function setCardBrand($card_brand)
    {
        $this->container['card_brand'] = $card_brand;

        return $this;
    }

    /**
     * Gets issuing_country_iso_number
     *
     * @return string
     */
    public function getIssuingCountryIsoNumber()
    {
        return $this->container['issuing_country_iso_number'];
    }

    /**
     * Sets issuing_country_iso_number
     *
     * @param string $issuing_country_iso_number issuing_country_iso_number
     *
     * @return $this
     */
    public function setIssuingCountryIsoNumber($issuing_country_iso_number)
    {
        $this->container['issuing_country_iso_number'] = $issuing_country_iso_number;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return \SplititSdkClient\Model\CardType
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param \SplititSdkClient\Model\CardType $card_type card_type
     *
     * @return $this
     */
    public function setCardType($card_type)
    {
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets is_prepaid
     *
     * @return bool
     */
    public function getIsPrepaid()
    {
        return $this->container['is_prepaid'];
    }

    /**
     * Sets is_prepaid
     *
     * @param bool $is_prepaid is_prepaid
     *
     * @return $this
     */
    public function setIsPrepaid($is_prepaid)
    {
        $this->container['is_prepaid'] = $is_prepaid;

        return $this;
    }

    /**
     * Gets card_class
     *
     * @return string
     */
    public function getCardClass()
    {
        return $this->container['card_class'];
    }

    /**
     * Sets card_class
     *
     * @param string $card_class card_class
     *
     * @return $this
     */
    public function setCardClass($card_class)
    {
        $this->container['card_class'] = $card_class;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets issuer_bank_name
     *
     * @return string
     */
    public function getIssuerBankName()
    {
        return $this->container['issuer_bank_name'];
    }

    /**
     * Sets issuer_bank_name
     *
     * @param string $issuer_bank_name issuer_bank_name
     *
     * @return $this
     */
    public function setIssuerBankName($issuer_bank_name)
    {
        $this->container['issuer_bank_name'] = $issuer_bank_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


