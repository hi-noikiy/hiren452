<?php
/**
 * FundingRuleDataScpProviderSetting
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * FundingRuleDataScpProviderSetting Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FundingRuleDataScpProviderSetting implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FundingRuleDataScpProviderSetting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'scp_provider_id' => 'int',
        'funding_rule_data_id' => 'int',
        'credit_line' => 'float',
        'effective_scp_revenue_share_percent' => 'float',
        'effective_scp_variable_cost_apr' => 'float',
        'is_secondary' => 'bool',
        'rotation_weight' => 'double',
        'is_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'scp_provider_id' => 'int64',
        'funding_rule_data_id' => 'int64',
        'credit_line' => 'decimal',
        'effective_scp_revenue_share_percent' => 'decimal',
        'effective_scp_variable_cost_apr' => 'decimal',
        'is_secondary' => null,
        'rotation_weight' => 'double',
        'is_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'scp_provider_id' => 'ScpProviderId',
        'funding_rule_data_id' => 'FundingRuleDataId',
        'credit_line' => 'CreditLine',
        'effective_scp_revenue_share_percent' => 'EffectiveScpRevenueSharePercent',
        'effective_scp_variable_cost_apr' => 'EffectiveScpVariableCostApr',
        'is_secondary' => 'IsSecondary',
        'rotation_weight' => 'RotationWeight',
        'is_enabled' => 'IsEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'scp_provider_id' => 'setScpProviderId',
        'funding_rule_data_id' => 'setFundingRuleDataId',
        'credit_line' => 'setCreditLine',
        'effective_scp_revenue_share_percent' => 'setEffectiveScpRevenueSharePercent',
        'effective_scp_variable_cost_apr' => 'setEffectiveScpVariableCostApr',
        'is_secondary' => 'setIsSecondary',
        'rotation_weight' => 'setRotationWeight',
        'is_enabled' => 'setIsEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'scp_provider_id' => 'getScpProviderId',
        'funding_rule_data_id' => 'getFundingRuleDataId',
        'credit_line' => 'getCreditLine',
        'effective_scp_revenue_share_percent' => 'getEffectiveScpRevenueSharePercent',
        'effective_scp_variable_cost_apr' => 'getEffectiveScpVariableCostApr',
        'is_secondary' => 'getIsSecondary',
        'rotation_weight' => 'getRotationWeight',
        'is_enabled' => 'getIsEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['scp_provider_id'] = isset($data['scp_provider_id']) ? $data['scp_provider_id'] : null;
        $this->container['funding_rule_data_id'] = isset($data['funding_rule_data_id']) ? $data['funding_rule_data_id'] : null;
        $this->container['credit_line'] = isset($data['credit_line']) ? $data['credit_line'] : null;
        $this->container['effective_scp_revenue_share_percent'] = isset($data['effective_scp_revenue_share_percent']) ? $data['effective_scp_revenue_share_percent'] : null;
        $this->container['effective_scp_variable_cost_apr'] = isset($data['effective_scp_variable_cost_apr']) ? $data['effective_scp_variable_cost_apr'] : null;
        $this->container['is_secondary'] = isset($data['is_secondary']) ? $data['is_secondary'] : null;
        $this->container['rotation_weight'] = isset($data['rotation_weight']) ? $data['rotation_weight'] : null;
        $this->container['is_enabled'] = isset($data['is_enabled']) ? $data['is_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['scp_provider_id'] === null) {
            $invalidProperties[] = "'scp_provider_id' can't be null";
        }
        if ($this->container['funding_rule_data_id'] === null) {
            $invalidProperties[] = "'funding_rule_data_id' can't be null";
        }
        if ($this->container['credit_line'] === null) {
            $invalidProperties[] = "'credit_line' can't be null";
        }
        if ($this->container['effective_scp_revenue_share_percent'] === null) {
            $invalidProperties[] = "'effective_scp_revenue_share_percent' can't be null";
        }
        if ($this->container['effective_scp_variable_cost_apr'] === null) {
            $invalidProperties[] = "'effective_scp_variable_cost_apr' can't be null";
        }
        if ($this->container['is_secondary'] === null) {
            $invalidProperties[] = "'is_secondary' can't be null";
        }
        if ($this->container['rotation_weight'] === null) {
            $invalidProperties[] = "'rotation_weight' can't be null";
        }
        if ($this->container['is_enabled'] === null) {
            $invalidProperties[] = "'is_enabled' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets scp_provider_id
     *
     * @return int
     */
    public function getScpProviderId()
    {
        return $this->container['scp_provider_id'];
    }

    /**
     * Sets scp_provider_id
     *
     * @param int $scp_provider_id scp_provider_id
     *
     * @return $this
     */
    public function setScpProviderId($scp_provider_id)
    {
        $this->container['scp_provider_id'] = $scp_provider_id;

        return $this;
    }

    /**
     * Gets funding_rule_data_id
     *
     * @return int
     */
    public function getFundingRuleDataId()
    {
        return $this->container['funding_rule_data_id'];
    }

    /**
     * Sets funding_rule_data_id
     *
     * @param int $funding_rule_data_id funding_rule_data_id
     *
     * @return $this
     */
    public function setFundingRuleDataId($funding_rule_data_id)
    {
        $this->container['funding_rule_data_id'] = $funding_rule_data_id;

        return $this;
    }

    /**
     * Gets credit_line
     *
     * @return float
     */
    public function getCreditLine()
    {
        return $this->container['credit_line'];
    }

    /**
     * Sets credit_line
     *
     * @param float $credit_line credit_line
     *
     * @return $this
     */
    public function setCreditLine($credit_line)
    {
        $this->container['credit_line'] = $credit_line;

        return $this;
    }

    /**
     * Gets effective_scp_revenue_share_percent
     *
     * @return float
     */
    public function getEffectiveScpRevenueSharePercent()
    {
        return $this->container['effective_scp_revenue_share_percent'];
    }

    /**
     * Sets effective_scp_revenue_share_percent
     *
     * @param float $effective_scp_revenue_share_percent effective_scp_revenue_share_percent
     *
     * @return $this
     */
    public function setEffectiveScpRevenueSharePercent($effective_scp_revenue_share_percent)
    {
        $this->container['effective_scp_revenue_share_percent'] = $effective_scp_revenue_share_percent;

        return $this;
    }

    /**
     * Gets effective_scp_variable_cost_apr
     *
     * @return float
     */
    public function getEffectiveScpVariableCostApr()
    {
        return $this->container['effective_scp_variable_cost_apr'];
    }

    /**
     * Sets effective_scp_variable_cost_apr
     *
     * @param float $effective_scp_variable_cost_apr effective_scp_variable_cost_apr
     *
     * @return $this
     */
    public function setEffectiveScpVariableCostApr($effective_scp_variable_cost_apr)
    {
        $this->container['effective_scp_variable_cost_apr'] = $effective_scp_variable_cost_apr;

        return $this;
    }

    /**
     * Gets is_secondary
     *
     * @return bool
     */
    public function getIsSecondary()
    {
        return $this->container['is_secondary'];
    }

    /**
     * Sets is_secondary
     *
     * @param bool $is_secondary is_secondary
     *
     * @return $this
     */
    public function setIsSecondary($is_secondary)
    {
        $this->container['is_secondary'] = $is_secondary;

        return $this;
    }

    /**
     * Gets rotation_weight
     *
     * @return double
     */
    public function getRotationWeight()
    {
        return $this->container['rotation_weight'];
    }

    /**
     * Sets rotation_weight
     *
     * @param double $rotation_weight rotation_weight
     *
     * @return $this
     */
    public function setRotationWeight($rotation_weight)
    {
        $this->container['rotation_weight'] = $rotation_weight;

        return $this;
    }

    /**
     * Gets is_enabled
     *
     * @return bool
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool $is_enabled is_enabled
     *
     * @return $this
     */
    public function setIsEnabled($is_enabled)
    {
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


