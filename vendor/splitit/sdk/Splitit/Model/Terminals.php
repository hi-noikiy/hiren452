<?php
/**
 * Terminals
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * Terminals Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Terminals implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Terminals';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'email' => 'string',
        'api_key' => 'string',
        'wizard_timeout' => 'int',
        'merchant_id' => 'int',
        'utc_offset' => 'double',
        'is_disabled' => 'bool',
        'charge_before_shipping' => 'bool',
        'terminal_id' => 'string',
        'agent_id' => 'int',
        'can_cancel_installments_plan' => 'bool',
        'crm_id' => 'string',
        'currency_id' => 'int',
        'pending_shipment_reminder_days' => 'int',
        'business_unit_id' => 'int',
        'keep_non_approved_plan_live' => 'int',
        'use_test_gateway' => 'bool',
        'agent' => '\SplititSdkClient\Model\Agents',
        'business_unit' => '\SplititSdkClient\Model\BusinessUnits',
        'currency' => '\SplititSdkClient\Model\Currencies',
        'merchant' => '\SplititSdkClient\Model\Merchants',
        'account_updater_subscribers_scopes' => '\SplititSdkClient\Model\AccountUpdaterSubscribersScopes[]',
        'installment_plans' => '\SplititSdkClient\Model\InstallmentPlans[]',
        'reconciliation_reports' => '\SplititSdkClient\Model\ReconciliationReports[]',
        'state_limit_rule_datas' => '\SplititSdkClient\Model\StateLimitRuleDatas[]',
        'terminal_countries' => '\SplititSdkClient\Model\TerminalCountries[]',
        'terminal_gateway_datas' => '\SplititSdkClient\Model\TerminalGatewayDatas[]',
        'terminal_kvps' => '\SplititSdkClient\Model\TerminalKvps[]',
        'continue_existing_plan_with_original_gateway' => 'bool',
        'active_terminal_data' => '\SplititSdkClient\Model\TerminalGatewayDatas',
        'chb_default_action' => '\SplititSdkClient\Model\ChbDefaultAction',
        'failure_under_frozen_installments_plan' => '\SplititSdkClient\Model\FailureUnderFrozenInstallmentsPlan',
        'refund_under_cancelation' => '\SplititSdkClient\Model\RefundUnderCancelation',
        'integration_type' => '\SplititSdkClient\Model\IntegrationType',
        'test_mode' => '\SplititSdkClient\Model\TestModes'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'name' => null,
        'email' => null,
        'api_key' => null,
        'wizard_timeout' => 'int32',
        'merchant_id' => 'int64',
        'utc_offset' => 'double',
        'is_disabled' => null,
        'charge_before_shipping' => null,
        'terminal_id' => null,
        'agent_id' => 'int64',
        'can_cancel_installments_plan' => null,
        'crm_id' => null,
        'currency_id' => 'int64',
        'pending_shipment_reminder_days' => 'int32',
        'business_unit_id' => 'int64',
        'keep_non_approved_plan_live' => 'int64',
        'use_test_gateway' => null,
        'agent' => null,
        'business_unit' => null,
        'currency' => null,
        'merchant' => null,
        'account_updater_subscribers_scopes' => null,
        'installment_plans' => null,
        'reconciliation_reports' => null,
        'state_limit_rule_datas' => null,
        'terminal_countries' => null,
        'terminal_gateway_datas' => null,
        'terminal_kvps' => null,
        'continue_existing_plan_with_original_gateway' => null,
        'active_terminal_data' => null,
        'chb_default_action' => null,
        'failure_under_frozen_installments_plan' => null,
        'refund_under_cancelation' => null,
        'integration_type' => null,
        'test_mode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'name' => 'Name',
        'email' => 'Email',
        'api_key' => 'ApiKey',
        'wizard_timeout' => 'WizardTimeout',
        'merchant_id' => 'MerchantId',
        'utc_offset' => 'UtcOffset',
        'is_disabled' => 'IsDisabled',
        'charge_before_shipping' => 'ChargeBeforeShipping',
        'terminal_id' => 'TerminalId',
        'agent_id' => 'AgentId',
        'can_cancel_installments_plan' => 'CanCancelInstallmentsPlan',
        'crm_id' => 'CrmId',
        'currency_id' => 'CurrencyId',
        'pending_shipment_reminder_days' => 'PendingShipmentReminderDays',
        'business_unit_id' => 'BusinessUnitId',
        'keep_non_approved_plan_live' => 'KeepNonApprovedPlanLive',
        'use_test_gateway' => 'UseTestGateway',
        'agent' => 'Agent',
        'business_unit' => 'BusinessUnit',
        'currency' => 'Currency',
        'merchant' => 'Merchant',
        'account_updater_subscribers_scopes' => 'AccountUpdaterSubscribersScopes',
        'installment_plans' => 'InstallmentPlans',
        'reconciliation_reports' => 'ReconciliationReports',
        'state_limit_rule_datas' => 'StateLimitRuleDatas',
        'terminal_countries' => 'TerminalCountries',
        'terminal_gateway_datas' => 'TerminalGatewayDatas',
        'terminal_kvps' => 'TerminalKvps',
        'continue_existing_plan_with_original_gateway' => 'ContinueExistingPlanWithOriginalGateway',
        'active_terminal_data' => 'ActiveTerminalData',
        'chb_default_action' => 'ChbDefaultAction',
        'failure_under_frozen_installments_plan' => 'FailureUnderFrozenInstallmentsPlan',
        'refund_under_cancelation' => 'RefundUnderCancelation',
        'integration_type' => 'IntegrationType',
        'test_mode' => 'TestMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'email' => 'setEmail',
        'api_key' => 'setApiKey',
        'wizard_timeout' => 'setWizardTimeout',
        'merchant_id' => 'setMerchantId',
        'utc_offset' => 'setUtcOffset',
        'is_disabled' => 'setIsDisabled',
        'charge_before_shipping' => 'setChargeBeforeShipping',
        'terminal_id' => 'setTerminalId',
        'agent_id' => 'setAgentId',
        'can_cancel_installments_plan' => 'setCanCancelInstallmentsPlan',
        'crm_id' => 'setCrmId',
        'currency_id' => 'setCurrencyId',
        'pending_shipment_reminder_days' => 'setPendingShipmentReminderDays',
        'business_unit_id' => 'setBusinessUnitId',
        'keep_non_approved_plan_live' => 'setKeepNonApprovedPlanLive',
        'use_test_gateway' => 'setUseTestGateway',
        'agent' => 'setAgent',
        'business_unit' => 'setBusinessUnit',
        'currency' => 'setCurrency',
        'merchant' => 'setMerchant',
        'account_updater_subscribers_scopes' => 'setAccountUpdaterSubscribersScopes',
        'installment_plans' => 'setInstallmentPlans',
        'reconciliation_reports' => 'setReconciliationReports',
        'state_limit_rule_datas' => 'setStateLimitRuleDatas',
        'terminal_countries' => 'setTerminalCountries',
        'terminal_gateway_datas' => 'setTerminalGatewayDatas',
        'terminal_kvps' => 'setTerminalKvps',
        'continue_existing_plan_with_original_gateway' => 'setContinueExistingPlanWithOriginalGateway',
        'active_terminal_data' => 'setActiveTerminalData',
        'chb_default_action' => 'setChbDefaultAction',
        'failure_under_frozen_installments_plan' => 'setFailureUnderFrozenInstallmentsPlan',
        'refund_under_cancelation' => 'setRefundUnderCancelation',
        'integration_type' => 'setIntegrationType',
        'test_mode' => 'setTestMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'email' => 'getEmail',
        'api_key' => 'getApiKey',
        'wizard_timeout' => 'getWizardTimeout',
        'merchant_id' => 'getMerchantId',
        'utc_offset' => 'getUtcOffset',
        'is_disabled' => 'getIsDisabled',
        'charge_before_shipping' => 'getChargeBeforeShipping',
        'terminal_id' => 'getTerminalId',
        'agent_id' => 'getAgentId',
        'can_cancel_installments_plan' => 'getCanCancelInstallmentsPlan',
        'crm_id' => 'getCrmId',
        'currency_id' => 'getCurrencyId',
        'pending_shipment_reminder_days' => 'getPendingShipmentReminderDays',
        'business_unit_id' => 'getBusinessUnitId',
        'keep_non_approved_plan_live' => 'getKeepNonApprovedPlanLive',
        'use_test_gateway' => 'getUseTestGateway',
        'agent' => 'getAgent',
        'business_unit' => 'getBusinessUnit',
        'currency' => 'getCurrency',
        'merchant' => 'getMerchant',
        'account_updater_subscribers_scopes' => 'getAccountUpdaterSubscribersScopes',
        'installment_plans' => 'getInstallmentPlans',
        'reconciliation_reports' => 'getReconciliationReports',
        'state_limit_rule_datas' => 'getStateLimitRuleDatas',
        'terminal_countries' => 'getTerminalCountries',
        'terminal_gateway_datas' => 'getTerminalGatewayDatas',
        'terminal_kvps' => 'getTerminalKvps',
        'continue_existing_plan_with_original_gateway' => 'getContinueExistingPlanWithOriginalGateway',
        'active_terminal_data' => 'getActiveTerminalData',
        'chb_default_action' => 'getChbDefaultAction',
        'failure_under_frozen_installments_plan' => 'getFailureUnderFrozenInstallmentsPlan',
        'refund_under_cancelation' => 'getRefundUnderCancelation',
        'integration_type' => 'getIntegrationType',
        'test_mode' => 'getTestMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['api_key'] = isset($data['api_key']) ? $data['api_key'] : null;
        $this->container['wizard_timeout'] = isset($data['wizard_timeout']) ? $data['wizard_timeout'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['utc_offset'] = isset($data['utc_offset']) ? $data['utc_offset'] : null;
        $this->container['is_disabled'] = isset($data['is_disabled']) ? $data['is_disabled'] : null;
        $this->container['charge_before_shipping'] = isset($data['charge_before_shipping']) ? $data['charge_before_shipping'] : null;
        $this->container['terminal_id'] = isset($data['terminal_id']) ? $data['terminal_id'] : null;
        $this->container['agent_id'] = isset($data['agent_id']) ? $data['agent_id'] : null;
        $this->container['can_cancel_installments_plan'] = isset($data['can_cancel_installments_plan']) ? $data['can_cancel_installments_plan'] : null;
        $this->container['crm_id'] = isset($data['crm_id']) ? $data['crm_id'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['pending_shipment_reminder_days'] = isset($data['pending_shipment_reminder_days']) ? $data['pending_shipment_reminder_days'] : null;
        $this->container['business_unit_id'] = isset($data['business_unit_id']) ? $data['business_unit_id'] : null;
        $this->container['keep_non_approved_plan_live'] = isset($data['keep_non_approved_plan_live']) ? $data['keep_non_approved_plan_live'] : null;
        $this->container['use_test_gateway'] = isset($data['use_test_gateway']) ? $data['use_test_gateway'] : null;
        $this->container['agent'] = isset($data['agent']) ? $data['agent'] : null;
        $this->container['business_unit'] = isset($data['business_unit']) ? $data['business_unit'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['merchant'] = isset($data['merchant']) ? $data['merchant'] : null;
        $this->container['account_updater_subscribers_scopes'] = isset($data['account_updater_subscribers_scopes']) ? $data['account_updater_subscribers_scopes'] : null;
        $this->container['installment_plans'] = isset($data['installment_plans']) ? $data['installment_plans'] : null;
        $this->container['reconciliation_reports'] = isset($data['reconciliation_reports']) ? $data['reconciliation_reports'] : null;
        $this->container['state_limit_rule_datas'] = isset($data['state_limit_rule_datas']) ? $data['state_limit_rule_datas'] : null;
        $this->container['terminal_countries'] = isset($data['terminal_countries']) ? $data['terminal_countries'] : null;
        $this->container['terminal_gateway_datas'] = isset($data['terminal_gateway_datas']) ? $data['terminal_gateway_datas'] : null;
        $this->container['terminal_kvps'] = isset($data['terminal_kvps']) ? $data['terminal_kvps'] : null;
        $this->container['continue_existing_plan_with_original_gateway'] = isset($data['continue_existing_plan_with_original_gateway']) ? $data['continue_existing_plan_with_original_gateway'] : null;
        $this->container['active_terminal_data'] = isset($data['active_terminal_data']) ? $data['active_terminal_data'] : null;
        $this->container['chb_default_action'] = isset($data['chb_default_action']) ? $data['chb_default_action'] : null;
        $this->container['failure_under_frozen_installments_plan'] = isset($data['failure_under_frozen_installments_plan']) ? $data['failure_under_frozen_installments_plan'] : null;
        $this->container['refund_under_cancelation'] = isset($data['refund_under_cancelation']) ? $data['refund_under_cancelation'] : null;
        $this->container['integration_type'] = isset($data['integration_type']) ? $data['integration_type'] : null;
        $this->container['test_mode'] = isset($data['test_mode']) ? $data['test_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['wizard_timeout'] === null) {
            $invalidProperties[] = "'wizard_timeout' can't be null";
        }
        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ($this->container['utc_offset'] === null) {
            $invalidProperties[] = "'utc_offset' can't be null";
        }
        if ($this->container['is_disabled'] === null) {
            $invalidProperties[] = "'is_disabled' can't be null";
        }
        if ($this->container['charge_before_shipping'] === null) {
            $invalidProperties[] = "'charge_before_shipping' can't be null";
        }
        if ($this->container['agent_id'] === null) {
            $invalidProperties[] = "'agent_id' can't be null";
        }
        if ($this->container['can_cancel_installments_plan'] === null) {
            $invalidProperties[] = "'can_cancel_installments_plan' can't be null";
        }
        if ($this->container['pending_shipment_reminder_days'] === null) {
            $invalidProperties[] = "'pending_shipment_reminder_days' can't be null";
        }
        if ($this->container['business_unit_id'] === null) {
            $invalidProperties[] = "'business_unit_id' can't be null";
        }
        if ($this->container['keep_non_approved_plan_live'] === null) {
            $invalidProperties[] = "'keep_non_approved_plan_live' can't be null";
        }
        if ($this->container['use_test_gateway'] === null) {
            $invalidProperties[] = "'use_test_gateway' can't be null";
        }
        if ($this->container['continue_existing_plan_with_original_gateway'] === null) {
            $invalidProperties[] = "'continue_existing_plan_with_original_gateway' can't be null";
        }
        if ($this->container['chb_default_action'] === null) {
            $invalidProperties[] = "'chb_default_action' can't be null";
        }
        if ($this->container['failure_under_frozen_installments_plan'] === null) {
            $invalidProperties[] = "'failure_under_frozen_installments_plan' can't be null";
        }
        if ($this->container['refund_under_cancelation'] === null) {
            $invalidProperties[] = "'refund_under_cancelation' can't be null";
        }
        if ($this->container['integration_type'] === null) {
            $invalidProperties[] = "'integration_type' can't be null";
        }
        if ($this->container['test_mode'] === null) {
            $invalidProperties[] = "'test_mode' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets api_key
     *
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string $api_key api_key
     *
     * @return $this
     */
    public function setApiKey($api_key)
    {
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets wizard_timeout
     *
     * @return int
     */
    public function getWizardTimeout()
    {
        return $this->container['wizard_timeout'];
    }

    /**
     * Sets wizard_timeout
     *
     * @param int $wizard_timeout wizard_timeout
     *
     * @return $this
     */
    public function setWizardTimeout($wizard_timeout)
    {
        $this->container['wizard_timeout'] = $wizard_timeout;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id merchant_id
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets utc_offset
     *
     * @return double
     */
    public function getUtcOffset()
    {
        return $this->container['utc_offset'];
    }

    /**
     * Sets utc_offset
     *
     * @param double $utc_offset utc_offset
     *
     * @return $this
     */
    public function setUtcOffset($utc_offset)
    {
        $this->container['utc_offset'] = $utc_offset;

        return $this;
    }

    /**
     * Gets is_disabled
     *
     * @return bool
     */
    public function getIsDisabled()
    {
        return $this->container['is_disabled'];
    }

    /**
     * Sets is_disabled
     *
     * @param bool $is_disabled is_disabled
     *
     * @return $this
     */
    public function setIsDisabled($is_disabled)
    {
        $this->container['is_disabled'] = $is_disabled;

        return $this;
    }

    /**
     * Gets charge_before_shipping
     *
     * @return bool
     */
    public function getChargeBeforeShipping()
    {
        return $this->container['charge_before_shipping'];
    }

    /**
     * Sets charge_before_shipping
     *
     * @param bool $charge_before_shipping charge_before_shipping
     *
     * @return $this
     */
    public function setChargeBeforeShipping($charge_before_shipping)
    {
        $this->container['charge_before_shipping'] = $charge_before_shipping;

        return $this;
    }

    /**
     * Gets terminal_id
     *
     * @return string
     */
    public function getTerminalId()
    {
        return $this->container['terminal_id'];
    }

    /**
     * Sets terminal_id
     *
     * @param string $terminal_id terminal_id
     *
     * @return $this
     */
    public function setTerminalId($terminal_id)
    {
        $this->container['terminal_id'] = $terminal_id;

        return $this;
    }

    /**
     * Gets agent_id
     *
     * @return int
     */
    public function getAgentId()
    {
        return $this->container['agent_id'];
    }

    /**
     * Sets agent_id
     *
     * @param int $agent_id agent_id
     *
     * @return $this
     */
    public function setAgentId($agent_id)
    {
        $this->container['agent_id'] = $agent_id;

        return $this;
    }

    /**
     * Gets can_cancel_installments_plan
     *
     * @return bool
     */
    public function getCanCancelInstallmentsPlan()
    {
        return $this->container['can_cancel_installments_plan'];
    }

    /**
     * Sets can_cancel_installments_plan
     *
     * @param bool $can_cancel_installments_plan can_cancel_installments_plan
     *
     * @return $this
     */
    public function setCanCancelInstallmentsPlan($can_cancel_installments_plan)
    {
        $this->container['can_cancel_installments_plan'] = $can_cancel_installments_plan;

        return $this;
    }

    /**
     * Gets crm_id
     *
     * @return string
     */
    public function getCrmId()
    {
        return $this->container['crm_id'];
    }

    /**
     * Sets crm_id
     *
     * @param string $crm_id crm_id
     *
     * @return $this
     */
    public function setCrmId($crm_id)
    {
        $this->container['crm_id'] = $crm_id;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return int
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param int $currency_id currency_id
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets pending_shipment_reminder_days
     *
     * @return int
     */
    public function getPendingShipmentReminderDays()
    {
        return $this->container['pending_shipment_reminder_days'];
    }

    /**
     * Sets pending_shipment_reminder_days
     *
     * @param int $pending_shipment_reminder_days pending_shipment_reminder_days
     *
     * @return $this
     */
    public function setPendingShipmentReminderDays($pending_shipment_reminder_days)
    {
        $this->container['pending_shipment_reminder_days'] = $pending_shipment_reminder_days;

        return $this;
    }

    /**
     * Gets business_unit_id
     *
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     *
     * @param int $business_unit_id business_unit_id
     *
     * @return $this
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets keep_non_approved_plan_live
     *
     * @return int
     */
    public function getKeepNonApprovedPlanLive()
    {
        return $this->container['keep_non_approved_plan_live'];
    }

    /**
     * Sets keep_non_approved_plan_live
     *
     * @param int $keep_non_approved_plan_live keep_non_approved_plan_live
     *
     * @return $this
     */
    public function setKeepNonApprovedPlanLive($keep_non_approved_plan_live)
    {
        $this->container['keep_non_approved_plan_live'] = $keep_non_approved_plan_live;

        return $this;
    }

    /**
     * Gets use_test_gateway
     *
     * @return bool
     */
    public function getUseTestGateway()
    {
        return $this->container['use_test_gateway'];
    }

    /**
     * Sets use_test_gateway
     *
     * @param bool $use_test_gateway use_test_gateway
     *
     * @return $this
     */
    public function setUseTestGateway($use_test_gateway)
    {
        $this->container['use_test_gateway'] = $use_test_gateway;

        return $this;
    }

    /**
     * Gets agent
     *
     * @return \SplititSdkClient\Model\Agents
     */
    public function getAgent()
    {
        return $this->container['agent'];
    }

    /**
     * Sets agent
     *
     * @param \SplititSdkClient\Model\Agents $agent agent
     *
     * @return $this
     */
    public function setAgent($agent)
    {
        $this->container['agent'] = $agent;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \SplititSdkClient\Model\BusinessUnits
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \SplititSdkClient\Model\BusinessUnits $business_unit business_unit
     *
     * @return $this
     */
    public function setBusinessUnit($business_unit)
    {
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \SplititSdkClient\Model\Currencies
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \SplititSdkClient\Model\Currencies $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \SplititSdkClient\Model\Merchants
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \SplititSdkClient\Model\Merchants $merchant merchant
     *
     * @return $this
     */
    public function setMerchant($merchant)
    {
        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets account_updater_subscribers_scopes
     *
     * @return \SplititSdkClient\Model\AccountUpdaterSubscribersScopes[]
     */
    public function getAccountUpdaterSubscribersScopes()
    {
        return $this->container['account_updater_subscribers_scopes'];
    }

    /**
     * Sets account_updater_subscribers_scopes
     *
     * @param \SplititSdkClient\Model\AccountUpdaterSubscribersScopes[] $account_updater_subscribers_scopes account_updater_subscribers_scopes
     *
     * @return $this
     */
    public function setAccountUpdaterSubscribersScopes($account_updater_subscribers_scopes)
    {
        $this->container['account_updater_subscribers_scopes'] = $account_updater_subscribers_scopes;

        return $this;
    }

    /**
     * Gets installment_plans
     *
     * @return \SplititSdkClient\Model\InstallmentPlans[]
     */
    public function getInstallmentPlans()
    {
        return $this->container['installment_plans'];
    }

    /**
     * Sets installment_plans
     *
     * @param \SplititSdkClient\Model\InstallmentPlans[] $installment_plans installment_plans
     *
     * @return $this
     */
    public function setInstallmentPlans($installment_plans)
    {
        $this->container['installment_plans'] = $installment_plans;

        return $this;
    }

    /**
     * Gets reconciliation_reports
     *
     * @return \SplititSdkClient\Model\ReconciliationReports[]
     */
    public function getReconciliationReports()
    {
        return $this->container['reconciliation_reports'];
    }

    /**
     * Sets reconciliation_reports
     *
     * @param \SplititSdkClient\Model\ReconciliationReports[] $reconciliation_reports reconciliation_reports
     *
     * @return $this
     */
    public function setReconciliationReports($reconciliation_reports)
    {
        $this->container['reconciliation_reports'] = $reconciliation_reports;

        return $this;
    }

    /**
     * Gets state_limit_rule_datas
     *
     * @return \SplititSdkClient\Model\StateLimitRuleDatas[]
     */
    public function getStateLimitRuleDatas()
    {
        return $this->container['state_limit_rule_datas'];
    }

    /**
     * Sets state_limit_rule_datas
     *
     * @param \SplititSdkClient\Model\StateLimitRuleDatas[] $state_limit_rule_datas state_limit_rule_datas
     *
     * @return $this
     */
    public function setStateLimitRuleDatas($state_limit_rule_datas)
    {
        $this->container['state_limit_rule_datas'] = $state_limit_rule_datas;

        return $this;
    }

    /**
     * Gets terminal_countries
     *
     * @return \SplititSdkClient\Model\TerminalCountries[]
     */
    public function getTerminalCountries()
    {
        return $this->container['terminal_countries'];
    }

    /**
     * Sets terminal_countries
     *
     * @param \SplititSdkClient\Model\TerminalCountries[] $terminal_countries terminal_countries
     *
     * @return $this
     */
    public function setTerminalCountries($terminal_countries)
    {
        $this->container['terminal_countries'] = $terminal_countries;

        return $this;
    }

    /**
     * Gets terminal_gateway_datas
     *
     * @return \SplititSdkClient\Model\TerminalGatewayDatas[]
     */
    public function getTerminalGatewayDatas()
    {
        return $this->container['terminal_gateway_datas'];
    }

    /**
     * Sets terminal_gateway_datas
     *
     * @param \SplititSdkClient\Model\TerminalGatewayDatas[] $terminal_gateway_datas terminal_gateway_datas
     *
     * @return $this
     */
    public function setTerminalGatewayDatas($terminal_gateway_datas)
    {
        $this->container['terminal_gateway_datas'] = $terminal_gateway_datas;

        return $this;
    }

    /**
     * Gets terminal_kvps
     *
     * @return \SplititSdkClient\Model\TerminalKvps[]
     */
    public function getTerminalKvps()
    {
        return $this->container['terminal_kvps'];
    }

    /**
     * Sets terminal_kvps
     *
     * @param \SplititSdkClient\Model\TerminalKvps[] $terminal_kvps terminal_kvps
     *
     * @return $this
     */
    public function setTerminalKvps($terminal_kvps)
    {
        $this->container['terminal_kvps'] = $terminal_kvps;

        return $this;
    }

    /**
     * Gets continue_existing_plan_with_original_gateway
     *
     * @return bool
     */
    public function getContinueExistingPlanWithOriginalGateway()
    {
        return $this->container['continue_existing_plan_with_original_gateway'];
    }

    /**
     * Sets continue_existing_plan_with_original_gateway
     *
     * @param bool $continue_existing_plan_with_original_gateway continue_existing_plan_with_original_gateway
     *
     * @return $this
     */
    public function setContinueExistingPlanWithOriginalGateway($continue_existing_plan_with_original_gateway)
    {
        $this->container['continue_existing_plan_with_original_gateway'] = $continue_existing_plan_with_original_gateway;

        return $this;
    }

    /**
     * Gets active_terminal_data
     *
     * @return \SplititSdkClient\Model\TerminalGatewayDatas
     */
    public function getActiveTerminalData()
    {
        return $this->container['active_terminal_data'];
    }

    /**
     * Sets active_terminal_data
     *
     * @param \SplititSdkClient\Model\TerminalGatewayDatas $active_terminal_data active_terminal_data
     *
     * @return $this
     */
    public function setActiveTerminalData($active_terminal_data)
    {
        $this->container['active_terminal_data'] = $active_terminal_data;

        return $this;
    }

    /**
     * Gets chb_default_action
     *
     * @return \SplititSdkClient\Model\ChbDefaultAction
     */
    public function getChbDefaultAction()
    {
        return $this->container['chb_default_action'];
    }

    /**
     * Sets chb_default_action
     *
     * @param \SplititSdkClient\Model\ChbDefaultAction $chb_default_action chb_default_action
     *
     * @return $this
     */
    public function setChbDefaultAction($chb_default_action)
    {
        $this->container['chb_default_action'] = $chb_default_action;

        return $this;
    }

    /**
     * Gets failure_under_frozen_installments_plan
     *
     * @return \SplititSdkClient\Model\FailureUnderFrozenInstallmentsPlan
     */
    public function getFailureUnderFrozenInstallmentsPlan()
    {
        return $this->container['failure_under_frozen_installments_plan'];
    }

    /**
     * Sets failure_under_frozen_installments_plan
     *
     * @param \SplititSdkClient\Model\FailureUnderFrozenInstallmentsPlan $failure_under_frozen_installments_plan failure_under_frozen_installments_plan
     *
     * @return $this
     */
    public function setFailureUnderFrozenInstallmentsPlan($failure_under_frozen_installments_plan)
    {
        $this->container['failure_under_frozen_installments_plan'] = $failure_under_frozen_installments_plan;

        return $this;
    }

    /**
     * Gets refund_under_cancelation
     *
     * @return \SplititSdkClient\Model\RefundUnderCancelation
     */
    public function getRefundUnderCancelation()
    {
        return $this->container['refund_under_cancelation'];
    }

    /**
     * Sets refund_under_cancelation
     *
     * @param \SplititSdkClient\Model\RefundUnderCancelation $refund_under_cancelation refund_under_cancelation
     *
     * @return $this
     */
    public function setRefundUnderCancelation($refund_under_cancelation)
    {
        $this->container['refund_under_cancelation'] = $refund_under_cancelation;

        return $this;
    }

    /**
     * Gets integration_type
     *
     * @return \SplititSdkClient\Model\IntegrationType
     */
    public function getIntegrationType()
    {
        return $this->container['integration_type'];
    }

    /**
     * Sets integration_type
     *
     * @param \SplititSdkClient\Model\IntegrationType $integration_type integration_type
     *
     * @return $this
     */
    public function setIntegrationType($integration_type)
    {
        $this->container['integration_type'] = $integration_type;

        return $this;
    }

    /**
     * Gets test_mode
     *
     * @return \SplititSdkClient\Model\TestModes
     */
    public function getTestMode()
    {
        return $this->container['test_mode'];
    }

    /**
     * Sets test_mode
     *
     * @param \SplititSdkClient\Model\TestModes $test_mode test_mode
     *
     * @return $this
     */
    public function setTestMode($test_mode)
    {
        $this->container['test_mode'] = $test_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


