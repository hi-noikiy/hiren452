<?php
/**
 * ConfigValues
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * ConfigValues Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConfigValues implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConfigValues';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'value' => 'string',
        'config_key_id' => 'int',
        'touch_point_color_values_id' => 'int',
        'config_key' => '\SplititSdkClient\Model\ConfigKeys',
        'touch_point_color_values' => '\SplititSdkClient\Model\TouchPointColorValues'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'value' => null,
        'config_key_id' => 'int64',
        'touch_point_color_values_id' => 'int64',
        'config_key' => null,
        'touch_point_color_values' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'value' => 'Value',
        'config_key_id' => 'ConfigKeyId',
        'touch_point_color_values_id' => 'TouchPointColorValuesId',
        'config_key' => 'ConfigKey',
        'touch_point_color_values' => 'TouchPointColorValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'value' => 'setValue',
        'config_key_id' => 'setConfigKeyId',
        'touch_point_color_values_id' => 'setTouchPointColorValuesId',
        'config_key' => 'setConfigKey',
        'touch_point_color_values' => 'setTouchPointColorValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'value' => 'getValue',
        'config_key_id' => 'getConfigKeyId',
        'touch_point_color_values_id' => 'getTouchPointColorValuesId',
        'config_key' => 'getConfigKey',
        'touch_point_color_values' => 'getTouchPointColorValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['config_key_id'] = isset($data['config_key_id']) ? $data['config_key_id'] : null;
        $this->container['touch_point_color_values_id'] = isset($data['touch_point_color_values_id']) ? $data['touch_point_color_values_id'] : null;
        $this->container['config_key'] = isset($data['config_key']) ? $data['config_key'] : null;
        $this->container['touch_point_color_values'] = isset($data['touch_point_color_values']) ? $data['touch_point_color_values'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['config_key_id'] === null) {
            $invalidProperties[] = "'config_key_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets config_key_id
     *
     * @return int
     */
    public function getConfigKeyId()
    {
        return $this->container['config_key_id'];
    }

    /**
     * Sets config_key_id
     *
     * @param int $config_key_id config_key_id
     *
     * @return $this
     */
    public function setConfigKeyId($config_key_id)
    {
        $this->container['config_key_id'] = $config_key_id;

        return $this;
    }

    /**
     * Gets touch_point_color_values_id
     *
     * @return int
     */
    public function getTouchPointColorValuesId()
    {
        return $this->container['touch_point_color_values_id'];
    }

    /**
     * Sets touch_point_color_values_id
     *
     * @param int $touch_point_color_values_id touch_point_color_values_id
     *
     * @return $this
     */
    public function setTouchPointColorValuesId($touch_point_color_values_id)
    {
        $this->container['touch_point_color_values_id'] = $touch_point_color_values_id;

        return $this;
    }

    /**
     * Gets config_key
     *
     * @return \SplititSdkClient\Model\ConfigKeys
     */
    public function getConfigKey()
    {
        return $this->container['config_key'];
    }

    /**
     * Sets config_key
     *
     * @param \SplititSdkClient\Model\ConfigKeys $config_key config_key
     *
     * @return $this
     */
    public function setConfigKey($config_key)
    {
        $this->container['config_key'] = $config_key;

        return $this;
    }

    /**
     * Gets touch_point_color_values
     *
     * @return \SplititSdkClient\Model\TouchPointColorValues
     */
    public function getTouchPointColorValues()
    {
        return $this->container['touch_point_color_values'];
    }

    /**
     * Sets touch_point_color_values
     *
     * @param \SplititSdkClient\Model\TouchPointColorValues $touch_point_color_values touch_point_color_values
     *
     * @return $this
     */
    public function setTouchPointColorValues($touch_point_color_values)
    {
        $this->container['touch_point_color_values'] = $touch_point_color_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


