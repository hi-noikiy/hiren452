<?php
/**
 * CollectDocuments
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * CollectDocuments Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CollectDocuments implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CollectDocuments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'amount' => 'float',
        'currency_id' => 'int',
        'business_unit_id' => 'int',
        'approval_date' => '\DateTime',
        'discriminator' => 'string',
        'lender_id' => 'int',
        'exclude_from_emails' => 'bool',
        'business_unit' => '\SplititSdkClient\Model\BusinessUnits',
        'currency' => '\SplititSdkClient\Model\Currencies',
        'lender' => '\SplititSdkClient\Model\ScpProviders',
        'funding_collect_document_details' => '\SplititSdkClient\Model\FundingCollectDocumentDetails[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'amount' => 'decimal',
        'currency_id' => 'int64',
        'business_unit_id' => 'int64',
        'approval_date' => 'date-time',
        'discriminator' => null,
        'lender_id' => 'int64',
        'exclude_from_emails' => null,
        'business_unit' => null,
        'currency' => null,
        'lender' => null,
        'funding_collect_document_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'amount' => 'Amount',
        'currency_id' => 'CurrencyId',
        'business_unit_id' => 'BusinessUnitId',
        'approval_date' => 'ApprovalDate',
        'discriminator' => 'Discriminator',
        'lender_id' => 'LenderId',
        'exclude_from_emails' => 'ExcludeFromEmails',
        'business_unit' => 'BusinessUnit',
        'currency' => 'Currency',
        'lender' => 'Lender',
        'funding_collect_document_details' => 'FundingCollectDocumentDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'amount' => 'setAmount',
        'currency_id' => 'setCurrencyId',
        'business_unit_id' => 'setBusinessUnitId',
        'approval_date' => 'setApprovalDate',
        'discriminator' => 'setDiscriminator',
        'lender_id' => 'setLenderId',
        'exclude_from_emails' => 'setExcludeFromEmails',
        'business_unit' => 'setBusinessUnit',
        'currency' => 'setCurrency',
        'lender' => 'setLender',
        'funding_collect_document_details' => 'setFundingCollectDocumentDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'amount' => 'getAmount',
        'currency_id' => 'getCurrencyId',
        'business_unit_id' => 'getBusinessUnitId',
        'approval_date' => 'getApprovalDate',
        'discriminator' => 'getDiscriminator',
        'lender_id' => 'getLenderId',
        'exclude_from_emails' => 'getExcludeFromEmails',
        'business_unit' => 'getBusinessUnit',
        'currency' => 'getCurrency',
        'lender' => 'getLender',
        'funding_collect_document_details' => 'getFundingCollectDocumentDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['business_unit_id'] = isset($data['business_unit_id']) ? $data['business_unit_id'] : null;
        $this->container['approval_date'] = isset($data['approval_date']) ? $data['approval_date'] : null;
        $this->container['discriminator'] = isset($data['discriminator']) ? $data['discriminator'] : null;
        $this->container['lender_id'] = isset($data['lender_id']) ? $data['lender_id'] : null;
        $this->container['exclude_from_emails'] = isset($data['exclude_from_emails']) ? $data['exclude_from_emails'] : null;
        $this->container['business_unit'] = isset($data['business_unit']) ? $data['business_unit'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['lender'] = isset($data['lender']) ? $data['lender'] : null;
        $this->container['funding_collect_document_details'] = isset($data['funding_collect_document_details']) ? $data['funding_collect_document_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['currency_id'] === null) {
            $invalidProperties[] = "'currency_id' can't be null";
        }
        if ($this->container['business_unit_id'] === null) {
            $invalidProperties[] = "'business_unit_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return int
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param int $currency_id currency_id
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets business_unit_id
     *
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     *
     * @param int $business_unit_id business_unit_id
     *
     * @return $this
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets approval_date
     *
     * @return \DateTime
     */
    public function getApprovalDate()
    {
        return $this->container['approval_date'];
    }

    /**
     * Sets approval_date
     *
     * @param \DateTime $approval_date approval_date
     *
     * @return $this
     */
    public function setApprovalDate($approval_date)
    {
        $this->container['approval_date'] = $approval_date;

        return $this;
    }

    /**
     * Gets discriminator
     *
     * @return string
     */
    public function getDiscriminator()
    {
        return $this->container['discriminator'];
    }

    /**
     * Sets discriminator
     *
     * @param string $discriminator discriminator
     *
     * @return $this
     */
    public function setDiscriminator($discriminator)
    {
        $this->container['discriminator'] = $discriminator;

        return $this;
    }

    /**
     * Gets lender_id
     *
     * @return int
     */
    public function getLenderId()
    {
        return $this->container['lender_id'];
    }

    /**
     * Sets lender_id
     *
     * @param int $lender_id lender_id
     *
     * @return $this
     */
    public function setLenderId($lender_id)
    {
        $this->container['lender_id'] = $lender_id;

        return $this;
    }

    /**
     * Gets exclude_from_emails
     *
     * @return bool
     */
    public function getExcludeFromEmails()
    {
        return $this->container['exclude_from_emails'];
    }

    /**
     * Sets exclude_from_emails
     *
     * @param bool $exclude_from_emails exclude_from_emails
     *
     * @return $this
     */
    public function setExcludeFromEmails($exclude_from_emails)
    {
        $this->container['exclude_from_emails'] = $exclude_from_emails;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \SplititSdkClient\Model\BusinessUnits
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \SplititSdkClient\Model\BusinessUnits $business_unit business_unit
     *
     * @return $this
     */
    public function setBusinessUnit($business_unit)
    {
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \SplititSdkClient\Model\Currencies
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \SplititSdkClient\Model\Currencies $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets lender
     *
     * @return \SplititSdkClient\Model\ScpProviders
     */
    public function getLender()
    {
        return $this->container['lender'];
    }

    /**
     * Sets lender
     *
     * @param \SplititSdkClient\Model\ScpProviders $lender lender
     *
     * @return $this
     */
    public function setLender($lender)
    {
        $this->container['lender'] = $lender;

        return $this;
    }

    /**
     * Gets funding_collect_document_details
     *
     * @return \SplititSdkClient\Model\FundingCollectDocumentDetails[]
     */
    public function getFundingCollectDocumentDetails()
    {
        return $this->container['funding_collect_document_details'];
    }

    /**
     * Sets funding_collect_document_details
     *
     * @param \SplititSdkClient\Model\FundingCollectDocumentDetails[] $funding_collect_document_details funding_collect_document_details
     *
     * @return $this
     */
    public function setFundingCollectDocumentDetails($funding_collect_document_details)
    {
        $this->container['funding_collect_document_details'] = $funding_collect_document_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


