<?php
/**
 * TerminalGatewayDatas
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * TerminalGatewayDatas Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TerminalGatewayDatas implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TerminalGatewayDatas';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'token' => 'string',
        'is_active' => 'bool',
        'number_of_allowed_days_for_refund' => 'int',
        'processor_id' => 'int',
        'terminal_id' => 'int',
        'is_address_requires' => 'bool',
        'processor' => '\SplititSdkClient\Model\Processors',
        'terminal' => '\SplititSdkClient\Model\Terminals',
        'payment_gateway_transaction_logs' => '\SplititSdkClient\Model\PaymentGatewayTransactionLogs[]',
        'authentication_values' => 'map[string,string]',
        'authentication_values_as_xml' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'token' => null,
        'is_active' => null,
        'number_of_allowed_days_for_refund' => 'int32',
        'processor_id' => 'int64',
        'terminal_id' => 'int64',
        'is_address_requires' => null,
        'processor' => null,
        'terminal' => null,
        'payment_gateway_transaction_logs' => null,
        'authentication_values' => null,
        'authentication_values_as_xml' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'token' => 'Token',
        'is_active' => 'IsActive',
        'number_of_allowed_days_for_refund' => 'NumberOfAllowedDaysForRefund',
        'processor_id' => 'ProcessorId',
        'terminal_id' => 'TerminalId',
        'is_address_requires' => 'IsAddressRequires',
        'processor' => 'Processor',
        'terminal' => 'Terminal',
        'payment_gateway_transaction_logs' => 'PaymentGatewayTransactionLogs',
        'authentication_values' => 'AuthenticationValues',
        'authentication_values_as_xml' => 'AuthenticationValuesAsXml'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'token' => 'setToken',
        'is_active' => 'setIsActive',
        'number_of_allowed_days_for_refund' => 'setNumberOfAllowedDaysForRefund',
        'processor_id' => 'setProcessorId',
        'terminal_id' => 'setTerminalId',
        'is_address_requires' => 'setIsAddressRequires',
        'processor' => 'setProcessor',
        'terminal' => 'setTerminal',
        'payment_gateway_transaction_logs' => 'setPaymentGatewayTransactionLogs',
        'authentication_values' => 'setAuthenticationValues',
        'authentication_values_as_xml' => 'setAuthenticationValuesAsXml'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'token' => 'getToken',
        'is_active' => 'getIsActive',
        'number_of_allowed_days_for_refund' => 'getNumberOfAllowedDaysForRefund',
        'processor_id' => 'getProcessorId',
        'terminal_id' => 'getTerminalId',
        'is_address_requires' => 'getIsAddressRequires',
        'processor' => 'getProcessor',
        'terminal' => 'getTerminal',
        'payment_gateway_transaction_logs' => 'getPaymentGatewayTransactionLogs',
        'authentication_values' => 'getAuthenticationValues',
        'authentication_values_as_xml' => 'getAuthenticationValuesAsXml'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['number_of_allowed_days_for_refund'] = isset($data['number_of_allowed_days_for_refund']) ? $data['number_of_allowed_days_for_refund'] : null;
        $this->container['processor_id'] = isset($data['processor_id']) ? $data['processor_id'] : null;
        $this->container['terminal_id'] = isset($data['terminal_id']) ? $data['terminal_id'] : null;
        $this->container['is_address_requires'] = isset($data['is_address_requires']) ? $data['is_address_requires'] : null;
        $this->container['processor'] = isset($data['processor']) ? $data['processor'] : null;
        $this->container['terminal'] = isset($data['terminal']) ? $data['terminal'] : null;
        $this->container['payment_gateway_transaction_logs'] = isset($data['payment_gateway_transaction_logs']) ? $data['payment_gateway_transaction_logs'] : null;
        $this->container['authentication_values'] = isset($data['authentication_values']) ? $data['authentication_values'] : null;
        $this->container['authentication_values_as_xml'] = isset($data['authentication_values_as_xml']) ? $data['authentication_values_as_xml'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        if ($this->container['number_of_allowed_days_for_refund'] === null) {
            $invalidProperties[] = "'number_of_allowed_days_for_refund' can't be null";
        }
        if ($this->container['is_address_requires'] === null) {
            $invalidProperties[] = "'is_address_requires' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token token
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets number_of_allowed_days_for_refund
     *
     * @return int
     */
    public function getNumberOfAllowedDaysForRefund()
    {
        return $this->container['number_of_allowed_days_for_refund'];
    }

    /**
     * Sets number_of_allowed_days_for_refund
     *
     * @param int $number_of_allowed_days_for_refund number_of_allowed_days_for_refund
     *
     * @return $this
     */
    public function setNumberOfAllowedDaysForRefund($number_of_allowed_days_for_refund)
    {
        $this->container['number_of_allowed_days_for_refund'] = $number_of_allowed_days_for_refund;

        return $this;
    }

    /**
     * Gets processor_id
     *
     * @return int
     */
    public function getProcessorId()
    {
        return $this->container['processor_id'];
    }

    /**
     * Sets processor_id
     *
     * @param int $processor_id processor_id
     *
     * @return $this
     */
    public function setProcessorId($processor_id)
    {
        $this->container['processor_id'] = $processor_id;

        return $this;
    }

    /**
     * Gets terminal_id
     *
     * @return int
     */
    public function getTerminalId()
    {
        return $this->container['terminal_id'];
    }

    /**
     * Sets terminal_id
     *
     * @param int $terminal_id terminal_id
     *
     * @return $this
     */
    public function setTerminalId($terminal_id)
    {
        $this->container['terminal_id'] = $terminal_id;

        return $this;
    }

    /**
     * Gets is_address_requires
     *
     * @return bool
     */
    public function getIsAddressRequires()
    {
        return $this->container['is_address_requires'];
    }

    /**
     * Sets is_address_requires
     *
     * @param bool $is_address_requires is_address_requires
     *
     * @return $this
     */
    public function setIsAddressRequires($is_address_requires)
    {
        $this->container['is_address_requires'] = $is_address_requires;

        return $this;
    }

    /**
     * Gets processor
     *
     * @return \SplititSdkClient\Model\Processors
     */
    public function getProcessor()
    {
        return $this->container['processor'];
    }

    /**
     * Sets processor
     *
     * @param \SplititSdkClient\Model\Processors $processor processor
     *
     * @return $this
     */
    public function setProcessor($processor)
    {
        $this->container['processor'] = $processor;

        return $this;
    }

    /**
     * Gets terminal
     *
     * @return \SplititSdkClient\Model\Terminals
     */
    public function getTerminal()
    {
        return $this->container['terminal'];
    }

    /**
     * Sets terminal
     *
     * @param \SplititSdkClient\Model\Terminals $terminal terminal
     *
     * @return $this
     */
    public function setTerminal($terminal)
    {
        $this->container['terminal'] = $terminal;

        return $this;
    }

    /**
     * Gets payment_gateway_transaction_logs
     *
     * @return \SplititSdkClient\Model\PaymentGatewayTransactionLogs[]
     */
    public function getPaymentGatewayTransactionLogs()
    {
        return $this->container['payment_gateway_transaction_logs'];
    }

    /**
     * Sets payment_gateway_transaction_logs
     *
     * @param \SplititSdkClient\Model\PaymentGatewayTransactionLogs[] $payment_gateway_transaction_logs payment_gateway_transaction_logs
     *
     * @return $this
     */
    public function setPaymentGatewayTransactionLogs($payment_gateway_transaction_logs)
    {
        $this->container['payment_gateway_transaction_logs'] = $payment_gateway_transaction_logs;

        return $this;
    }

    /**
     * Gets authentication_values
     *
     * @return map[string,string]
     */
    public function getAuthenticationValues()
    {
        return $this->container['authentication_values'];
    }

    /**
     * Sets authentication_values
     *
     * @param map[string,string] $authentication_values authentication_values
     *
     * @return $this
     */
    public function setAuthenticationValues($authentication_values)
    {
        $this->container['authentication_values'] = $authentication_values;

        return $this;
    }

    /**
     * Gets authentication_values_as_xml
     *
     * @return string
     */
    public function getAuthenticationValuesAsXml()
    {
        return $this->container['authentication_values_as_xml'];
    }

    /**
     * Sets authentication_values_as_xml
     *
     * @param string $authentication_values_as_xml authentication_values_as_xml
     *
     * @return $this
     */
    public function setAuthenticationValuesAsXml($authentication_values_as_xml)
    {
        $this->container['authentication_values_as_xml'] = $authentication_values_as_xml;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


