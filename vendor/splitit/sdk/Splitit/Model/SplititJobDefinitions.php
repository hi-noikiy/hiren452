<?php
/**
 * SplititJobDefinitions
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * SplititJobDefinitions Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SplititJobDefinitions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SplititJobDefinitions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'code' => 'string',
        'name' => 'string',
        'scope_code' => 'string',
        'cron_expression' => 'string',
        'parameter_group_id' => 'int',
        'parameter_group' => '\SplititSdkClient\Model\ParameterGroups',
        'user_job_subscriptions' => '\SplititSdkClient\Model\UserJobSubscriptions[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'code' => null,
        'name' => null,
        'scope_code' => null,
        'cron_expression' => null,
        'parameter_group_id' => 'int64',
        'parameter_group' => null,
        'user_job_subscriptions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'code' => 'Code',
        'name' => 'Name',
        'scope_code' => 'ScopeCode',
        'cron_expression' => 'CronExpression',
        'parameter_group_id' => 'ParameterGroupId',
        'parameter_group' => 'ParameterGroup',
        'user_job_subscriptions' => 'UserJobSubscriptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'name' => 'setName',
        'scope_code' => 'setScopeCode',
        'cron_expression' => 'setCronExpression',
        'parameter_group_id' => 'setParameterGroupId',
        'parameter_group' => 'setParameterGroup',
        'user_job_subscriptions' => 'setUserJobSubscriptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'name' => 'getName',
        'scope_code' => 'getScopeCode',
        'cron_expression' => 'getCronExpression',
        'parameter_group_id' => 'getParameterGroupId',
        'parameter_group' => 'getParameterGroup',
        'user_job_subscriptions' => 'getUserJobSubscriptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['scope_code'] = isset($data['scope_code']) ? $data['scope_code'] : null;
        $this->container['cron_expression'] = isset($data['cron_expression']) ? $data['cron_expression'] : null;
        $this->container['parameter_group_id'] = isset($data['parameter_group_id']) ? $data['parameter_group_id'] : null;
        $this->container['parameter_group'] = isset($data['parameter_group']) ? $data['parameter_group'] : null;
        $this->container['user_job_subscriptions'] = isset($data['user_job_subscriptions']) ? $data['user_job_subscriptions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets scope_code
     *
     * @return string
     */
    public function getScopeCode()
    {
        return $this->container['scope_code'];
    }

    /**
     * Sets scope_code
     *
     * @param string $scope_code scope_code
     *
     * @return $this
     */
    public function setScopeCode($scope_code)
    {
        $this->container['scope_code'] = $scope_code;

        return $this;
    }

    /**
     * Gets cron_expression
     *
     * @return string
     */
    public function getCronExpression()
    {
        return $this->container['cron_expression'];
    }

    /**
     * Sets cron_expression
     *
     * @param string $cron_expression cron_expression
     *
     * @return $this
     */
    public function setCronExpression($cron_expression)
    {
        $this->container['cron_expression'] = $cron_expression;

        return $this;
    }

    /**
     * Gets parameter_group_id
     *
     * @return int
     */
    public function getParameterGroupId()
    {
        return $this->container['parameter_group_id'];
    }

    /**
     * Sets parameter_group_id
     *
     * @param int $parameter_group_id parameter_group_id
     *
     * @return $this
     */
    public function setParameterGroupId($parameter_group_id)
    {
        $this->container['parameter_group_id'] = $parameter_group_id;

        return $this;
    }

    /**
     * Gets parameter_group
     *
     * @return \SplititSdkClient\Model\ParameterGroups
     */
    public function getParameterGroup()
    {
        return $this->container['parameter_group'];
    }

    /**
     * Sets parameter_group
     *
     * @param \SplititSdkClient\Model\ParameterGroups $parameter_group parameter_group
     *
     * @return $this
     */
    public function setParameterGroup($parameter_group)
    {
        $this->container['parameter_group'] = $parameter_group;

        return $this;
    }

    /**
     * Gets user_job_subscriptions
     *
     * @return \SplititSdkClient\Model\UserJobSubscriptions[]
     */
    public function getUserJobSubscriptions()
    {
        return $this->container['user_job_subscriptions'];
    }

    /**
     * Sets user_job_subscriptions
     *
     * @param \SplititSdkClient\Model\UserJobSubscriptions[] $user_job_subscriptions user_job_subscriptions
     *
     * @return $this
     */
    public function setUserJobSubscriptions($user_job_subscriptions)
    {
        $this->container['user_job_subscriptions'] = $user_job_subscriptions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


