<?php
/**
 * InstallmentPlanEventSubscriberRecords
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * InstallmentPlanEventSubscriberRecords Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InstallmentPlanEventSubscriberRecords implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstallmentPlanEventSubscriberRecords';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'installment_plan_event_id' => 'int',
        'serialized_installment_plan_event_message' => 'string',
        'is_acknowledged' => 'bool',
        'subscriber_type' => 'string',
        'installment_plan_event' => '\SplititSdkClient\Model\InstallmentPlanEvents',
        'installment_plan_event_subscriber_record_send_logs' => '\SplititSdkClient\Model\InstallmentPlanEventSubscriberRecordSendLogs[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'installment_plan_event_id' => 'int64',
        'serialized_installment_plan_event_message' => null,
        'is_acknowledged' => null,
        'subscriber_type' => null,
        'installment_plan_event' => null,
        'installment_plan_event_subscriber_record_send_logs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'installment_plan_event_id' => 'InstallmentPlanEventId',
        'serialized_installment_plan_event_message' => 'SerializedInstallmentPlanEventMessage',
        'is_acknowledged' => 'IsAcknowledged',
        'subscriber_type' => 'SubscriberType',
        'installment_plan_event' => 'InstallmentPlanEvent',
        'installment_plan_event_subscriber_record_send_logs' => 'InstallmentPlanEventSubscriberRecordSendLogs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'installment_plan_event_id' => 'setInstallmentPlanEventId',
        'serialized_installment_plan_event_message' => 'setSerializedInstallmentPlanEventMessage',
        'is_acknowledged' => 'setIsAcknowledged',
        'subscriber_type' => 'setSubscriberType',
        'installment_plan_event' => 'setInstallmentPlanEvent',
        'installment_plan_event_subscriber_record_send_logs' => 'setInstallmentPlanEventSubscriberRecordSendLogs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'installment_plan_event_id' => 'getInstallmentPlanEventId',
        'serialized_installment_plan_event_message' => 'getSerializedInstallmentPlanEventMessage',
        'is_acknowledged' => 'getIsAcknowledged',
        'subscriber_type' => 'getSubscriberType',
        'installment_plan_event' => 'getInstallmentPlanEvent',
        'installment_plan_event_subscriber_record_send_logs' => 'getInstallmentPlanEventSubscriberRecordSendLogs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['installment_plan_event_id'] = isset($data['installment_plan_event_id']) ? $data['installment_plan_event_id'] : null;
        $this->container['serialized_installment_plan_event_message'] = isset($data['serialized_installment_plan_event_message']) ? $data['serialized_installment_plan_event_message'] : null;
        $this->container['is_acknowledged'] = isset($data['is_acknowledged']) ? $data['is_acknowledged'] : null;
        $this->container['subscriber_type'] = isset($data['subscriber_type']) ? $data['subscriber_type'] : null;
        $this->container['installment_plan_event'] = isset($data['installment_plan_event']) ? $data['installment_plan_event'] : null;
        $this->container['installment_plan_event_subscriber_record_send_logs'] = isset($data['installment_plan_event_subscriber_record_send_logs']) ? $data['installment_plan_event_subscriber_record_send_logs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['installment_plan_event_id'] === null) {
            $invalidProperties[] = "'installment_plan_event_id' can't be null";
        }
        if ($this->container['is_acknowledged'] === null) {
            $invalidProperties[] = "'is_acknowledged' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets installment_plan_event_id
     *
     * @return int
     */
    public function getInstallmentPlanEventId()
    {
        return $this->container['installment_plan_event_id'];
    }

    /**
     * Sets installment_plan_event_id
     *
     * @param int $installment_plan_event_id installment_plan_event_id
     *
     * @return $this
     */
    public function setInstallmentPlanEventId($installment_plan_event_id)
    {
        $this->container['installment_plan_event_id'] = $installment_plan_event_id;

        return $this;
    }

    /**
     * Gets serialized_installment_plan_event_message
     *
     * @return string
     */
    public function getSerializedInstallmentPlanEventMessage()
    {
        return $this->container['serialized_installment_plan_event_message'];
    }

    /**
     * Sets serialized_installment_plan_event_message
     *
     * @param string $serialized_installment_plan_event_message serialized_installment_plan_event_message
     *
     * @return $this
     */
    public function setSerializedInstallmentPlanEventMessage($serialized_installment_plan_event_message)
    {
        $this->container['serialized_installment_plan_event_message'] = $serialized_installment_plan_event_message;

        return $this;
    }

    /**
     * Gets is_acknowledged
     *
     * @return bool
     */
    public function getIsAcknowledged()
    {
        return $this->container['is_acknowledged'];
    }

    /**
     * Sets is_acknowledged
     *
     * @param bool $is_acknowledged is_acknowledged
     *
     * @return $this
     */
    public function setIsAcknowledged($is_acknowledged)
    {
        $this->container['is_acknowledged'] = $is_acknowledged;

        return $this;
    }

    /**
     * Gets subscriber_type
     *
     * @return string
     */
    public function getSubscriberType()
    {
        return $this->container['subscriber_type'];
    }

    /**
     * Sets subscriber_type
     *
     * @param string $subscriber_type subscriber_type
     *
     * @return $this
     */
    public function setSubscriberType($subscriber_type)
    {
        $this->container['subscriber_type'] = $subscriber_type;

        return $this;
    }

    /**
     * Gets installment_plan_event
     *
     * @return \SplititSdkClient\Model\InstallmentPlanEvents
     */
    public function getInstallmentPlanEvent()
    {
        return $this->container['installment_plan_event'];
    }

    /**
     * Sets installment_plan_event
     *
     * @param \SplititSdkClient\Model\InstallmentPlanEvents $installment_plan_event installment_plan_event
     *
     * @return $this
     */
    public function setInstallmentPlanEvent($installment_plan_event)
    {
        $this->container['installment_plan_event'] = $installment_plan_event;

        return $this;
    }

    /**
     * Gets installment_plan_event_subscriber_record_send_logs
     *
     * @return \SplititSdkClient\Model\InstallmentPlanEventSubscriberRecordSendLogs[]
     */
    public function getInstallmentPlanEventSubscriberRecordSendLogs()
    {
        return $this->container['installment_plan_event_subscriber_record_send_logs'];
    }

    /**
     * Sets installment_plan_event_subscriber_record_send_logs
     *
     * @param \SplititSdkClient\Model\InstallmentPlanEventSubscriberRecordSendLogs[] $installment_plan_event_subscriber_record_send_logs installment_plan_event_subscriber_record_send_logs
     *
     * @return $this
     */
    public function setInstallmentPlanEventSubscriberRecordSendLogs($installment_plan_event_subscriber_record_send_logs)
    {
        $this->container['installment_plan_event_subscriber_record_send_logs'] = $installment_plan_event_subscriber_record_send_logs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


