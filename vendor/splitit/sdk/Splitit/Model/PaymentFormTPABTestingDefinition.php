<?php
/**
 * PaymentFormTPABTestingDefinition
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * PaymentFormTPABTestingDefinition Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentFormTPABTestingDefinition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentFormTPABTestingDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'is_active' => 'bool',
        'ab_test_name' => 'string',
        'pf_version_a_id' => 'int',
        'pf_version_b_id' => 'int',
        'ab_test_description' => 'string',
        'pf_version_a_percentage' => 'int',
        'pf_version_b_percentage' => 'int',
        'pf_version_a' => '\SplititSdkClient\Model\VersionedTouchPoints',
        'pf_version_b' => '\SplititSdkClient\Model\VersionedTouchPoints'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'is_active' => null,
        'ab_test_name' => null,
        'pf_version_a_id' => 'int64',
        'pf_version_b_id' => 'int64',
        'ab_test_description' => null,
        'pf_version_a_percentage' => 'int32',
        'pf_version_b_percentage' => 'int32',
        'pf_version_a' => null,
        'pf_version_b' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'is_active' => 'IsActive',
        'ab_test_name' => 'AbTestName',
        'pf_version_a_id' => 'PFVersionAId',
        'pf_version_b_id' => 'PFVersionBId',
        'ab_test_description' => 'AbTestDescription',
        'pf_version_a_percentage' => 'PFVersionAPercentage',
        'pf_version_b_percentage' => 'PFVersionBPercentage',
        'pf_version_a' => 'PFVersionA',
        'pf_version_b' => 'PFVersionB'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'is_active' => 'setIsActive',
        'ab_test_name' => 'setAbTestName',
        'pf_version_a_id' => 'setPfVersionAId',
        'pf_version_b_id' => 'setPfVersionBId',
        'ab_test_description' => 'setAbTestDescription',
        'pf_version_a_percentage' => 'setPfVersionAPercentage',
        'pf_version_b_percentage' => 'setPfVersionBPercentage',
        'pf_version_a' => 'setPfVersionA',
        'pf_version_b' => 'setPfVersionB'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'is_active' => 'getIsActive',
        'ab_test_name' => 'getAbTestName',
        'pf_version_a_id' => 'getPfVersionAId',
        'pf_version_b_id' => 'getPfVersionBId',
        'ab_test_description' => 'getAbTestDescription',
        'pf_version_a_percentage' => 'getPfVersionAPercentage',
        'pf_version_b_percentage' => 'getPfVersionBPercentage',
        'pf_version_a' => 'getPfVersionA',
        'pf_version_b' => 'getPfVersionB'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['ab_test_name'] = isset($data['ab_test_name']) ? $data['ab_test_name'] : null;
        $this->container['pf_version_a_id'] = isset($data['pf_version_a_id']) ? $data['pf_version_a_id'] : null;
        $this->container['pf_version_b_id'] = isset($data['pf_version_b_id']) ? $data['pf_version_b_id'] : null;
        $this->container['ab_test_description'] = isset($data['ab_test_description']) ? $data['ab_test_description'] : null;
        $this->container['pf_version_a_percentage'] = isset($data['pf_version_a_percentage']) ? $data['pf_version_a_percentage'] : null;
        $this->container['pf_version_b_percentage'] = isset($data['pf_version_b_percentage']) ? $data['pf_version_b_percentage'] : null;
        $this->container['pf_version_a'] = isset($data['pf_version_a']) ? $data['pf_version_a'] : null;
        $this->container['pf_version_b'] = isset($data['pf_version_b']) ? $data['pf_version_b'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        if ($this->container['pf_version_a_percentage'] === null) {
            $invalidProperties[] = "'pf_version_a_percentage' can't be null";
        }
        if ($this->container['pf_version_b_percentage'] === null) {
            $invalidProperties[] = "'pf_version_b_percentage' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets ab_test_name
     *
     * @return string
     */
    public function getAbTestName()
    {
        return $this->container['ab_test_name'];
    }

    /**
     * Sets ab_test_name
     *
     * @param string $ab_test_name ab_test_name
     *
     * @return $this
     */
    public function setAbTestName($ab_test_name)
    {
        $this->container['ab_test_name'] = $ab_test_name;

        return $this;
    }

    /**
     * Gets pf_version_a_id
     *
     * @return int
     */
    public function getPfVersionAId()
    {
        return $this->container['pf_version_a_id'];
    }

    /**
     * Sets pf_version_a_id
     *
     * @param int $pf_version_a_id pf_version_a_id
     *
     * @return $this
     */
    public function setPfVersionAId($pf_version_a_id)
    {
        $this->container['pf_version_a_id'] = $pf_version_a_id;

        return $this;
    }

    /**
     * Gets pf_version_b_id
     *
     * @return int
     */
    public function getPfVersionBId()
    {
        return $this->container['pf_version_b_id'];
    }

    /**
     * Sets pf_version_b_id
     *
     * @param int $pf_version_b_id pf_version_b_id
     *
     * @return $this
     */
    public function setPfVersionBId($pf_version_b_id)
    {
        $this->container['pf_version_b_id'] = $pf_version_b_id;

        return $this;
    }

    /**
     * Gets ab_test_description
     *
     * @return string
     */
    public function getAbTestDescription()
    {
        return $this->container['ab_test_description'];
    }

    /**
     * Sets ab_test_description
     *
     * @param string $ab_test_description ab_test_description
     *
     * @return $this
     */
    public function setAbTestDescription($ab_test_description)
    {
        $this->container['ab_test_description'] = $ab_test_description;

        return $this;
    }

    /**
     * Gets pf_version_a_percentage
     *
     * @return int
     */
    public function getPfVersionAPercentage()
    {
        return $this->container['pf_version_a_percentage'];
    }

    /**
     * Sets pf_version_a_percentage
     *
     * @param int $pf_version_a_percentage pf_version_a_percentage
     *
     * @return $this
     */
    public function setPfVersionAPercentage($pf_version_a_percentage)
    {
        $this->container['pf_version_a_percentage'] = $pf_version_a_percentage;

        return $this;
    }

    /**
     * Gets pf_version_b_percentage
     *
     * @return int
     */
    public function getPfVersionBPercentage()
    {
        return $this->container['pf_version_b_percentage'];
    }

    /**
     * Sets pf_version_b_percentage
     *
     * @param int $pf_version_b_percentage pf_version_b_percentage
     *
     * @return $this
     */
    public function setPfVersionBPercentage($pf_version_b_percentage)
    {
        $this->container['pf_version_b_percentage'] = $pf_version_b_percentage;

        return $this;
    }

    /**
     * Gets pf_version_a
     *
     * @return \SplititSdkClient\Model\VersionedTouchPoints
     */
    public function getPfVersionA()
    {
        return $this->container['pf_version_a'];
    }

    /**
     * Sets pf_version_a
     *
     * @param \SplititSdkClient\Model\VersionedTouchPoints $pf_version_a pf_version_a
     *
     * @return $this
     */
    public function setPfVersionA($pf_version_a)
    {
        $this->container['pf_version_a'] = $pf_version_a;

        return $this;
    }

    /**
     * Gets pf_version_b
     *
     * @return \SplititSdkClient\Model\VersionedTouchPoints
     */
    public function getPfVersionB()
    {
        return $this->container['pf_version_b'];
    }

    /**
     * Sets pf_version_b
     *
     * @param \SplititSdkClient\Model\VersionedTouchPoints $pf_version_b pf_version_b
     *
     * @return $this
     */
    public function setPfVersionB($pf_version_b)
    {
        $this->container['pf_version_b'] = $pf_version_b;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


