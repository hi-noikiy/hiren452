<?php
/**
 * Processors
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * Processors Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Processors implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Processors';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'api_url' => 'string',
        'max_number_of_retries' => 'int',
        'timeout_seconds' => 'int',
        'max_auth' => 'int',
        'grace_period' => 'int',
        'async_refund_grace_period_days' => 'int',
        'is_checked_mastercard' => 'bool',
        'is_checked_upi' => 'bool',
        'is_checked_visa' => 'bool',
        'is_checked_amex' => 'bool',
        'is_checked_maestro' => 'bool',
        'is_checked_jcb' => 'bool',
        'is_checked_discover' => 'bool',
        'is3ds2_supported' => 'bool',
        'gateway_apiassembly' => 'string',
        'display_name' => 'string',
        'gateway_apiimplementor_ns' => 'string',
        'is_token_supported' => 'bool',
        'consumer_update_cc_grace_period' => 'string',
        'is_void_supported' => 'bool',
        'is_void_after_fail_refund' => 'bool',
        'min_amount_allowed_for_auth' => 'float',
        'capture_delay_in_sec' => 'int',
        'void_delay_in_sec' => 'int',
        'allow_partial_void' => 'bool',
        'installments' => '\SplititSdkClient\Model\Installments[]',
        'processor_authentication_parameters' => '\SplititSdkClient\Model\ProcessorAuthenticationParameters[]',
        're_authorizations' => '\SplititSdkClient\Model\ReAuthorizations[]',
        'terminal_gateway_datas' => '\SplititSdkClient\Model\TerminalGatewayDatas[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'name' => null,
        'api_url' => null,
        'max_number_of_retries' => 'int32',
        'timeout_seconds' => 'int32',
        'max_auth' => 'int32',
        'grace_period' => 'int32',
        'async_refund_grace_period_days' => 'int32',
        'is_checked_mastercard' => null,
        'is_checked_upi' => null,
        'is_checked_visa' => null,
        'is_checked_amex' => null,
        'is_checked_maestro' => null,
        'is_checked_jcb' => null,
        'is_checked_discover' => null,
        'is3ds2_supported' => null,
        'gateway_apiassembly' => null,
        'display_name' => null,
        'gateway_apiimplementor_ns' => null,
        'is_token_supported' => null,
        'consumer_update_cc_grace_period' => null,
        'is_void_supported' => null,
        'is_void_after_fail_refund' => null,
        'min_amount_allowed_for_auth' => 'decimal',
        'capture_delay_in_sec' => 'int32',
        'void_delay_in_sec' => 'int32',
        'allow_partial_void' => null,
        'installments' => null,
        'processor_authentication_parameters' => null,
        're_authorizations' => null,
        'terminal_gateway_datas' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'name' => 'Name',
        'api_url' => 'ApiUrl',
        'max_number_of_retries' => 'MaxNumberOfRetries',
        'timeout_seconds' => 'TimeoutSeconds',
        'max_auth' => 'MaxAuth',
        'grace_period' => 'GracePeriod',
        'async_refund_grace_period_days' => 'AsyncRefundGracePeriodDays',
        'is_checked_mastercard' => 'IsCheckedMastercard',
        'is_checked_upi' => 'IsCheckedUpi',
        'is_checked_visa' => 'IsCheckedVisa',
        'is_checked_amex' => 'IsCheckedAmex',
        'is_checked_maestro' => 'IsCheckedMaestro',
        'is_checked_jcb' => 'IsCheckedJcb',
        'is_checked_discover' => 'IsCheckedDiscover',
        'is3ds2_supported' => 'Is3ds2Supported',
        'gateway_apiassembly' => 'GatewayApiassembly',
        'display_name' => 'DisplayName',
        'gateway_apiimplementor_ns' => 'GatewayApiimplementorNs',
        'is_token_supported' => 'IsTokenSupported',
        'consumer_update_cc_grace_period' => 'ConsumerUpdateCcGracePeriod',
        'is_void_supported' => 'IsVoidSupported',
        'is_void_after_fail_refund' => 'IsVoidAfterFailRefund',
        'min_amount_allowed_for_auth' => 'MinAmountAllowedForAuth',
        'capture_delay_in_sec' => 'CaptureDelayInSec',
        'void_delay_in_sec' => 'VoidDelayInSec',
        'allow_partial_void' => 'AllowPartialVoid',
        'installments' => 'Installments',
        'processor_authentication_parameters' => 'ProcessorAuthenticationParameters',
        're_authorizations' => 'ReAuthorizations',
        'terminal_gateway_datas' => 'TerminalGatewayDatas'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'api_url' => 'setApiUrl',
        'max_number_of_retries' => 'setMaxNumberOfRetries',
        'timeout_seconds' => 'setTimeoutSeconds',
        'max_auth' => 'setMaxAuth',
        'grace_period' => 'setGracePeriod',
        'async_refund_grace_period_days' => 'setAsyncRefundGracePeriodDays',
        'is_checked_mastercard' => 'setIsCheckedMastercard',
        'is_checked_upi' => 'setIsCheckedUpi',
        'is_checked_visa' => 'setIsCheckedVisa',
        'is_checked_amex' => 'setIsCheckedAmex',
        'is_checked_maestro' => 'setIsCheckedMaestro',
        'is_checked_jcb' => 'setIsCheckedJcb',
        'is_checked_discover' => 'setIsCheckedDiscover',
        'is3ds2_supported' => 'setIs3ds2Supported',
        'gateway_apiassembly' => 'setGatewayApiassembly',
        'display_name' => 'setDisplayName',
        'gateway_apiimplementor_ns' => 'setGatewayApiimplementorNs',
        'is_token_supported' => 'setIsTokenSupported',
        'consumer_update_cc_grace_period' => 'setConsumerUpdateCcGracePeriod',
        'is_void_supported' => 'setIsVoidSupported',
        'is_void_after_fail_refund' => 'setIsVoidAfterFailRefund',
        'min_amount_allowed_for_auth' => 'setMinAmountAllowedForAuth',
        'capture_delay_in_sec' => 'setCaptureDelayInSec',
        'void_delay_in_sec' => 'setVoidDelayInSec',
        'allow_partial_void' => 'setAllowPartialVoid',
        'installments' => 'setInstallments',
        'processor_authentication_parameters' => 'setProcessorAuthenticationParameters',
        're_authorizations' => 'setReAuthorizations',
        'terminal_gateway_datas' => 'setTerminalGatewayDatas'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'api_url' => 'getApiUrl',
        'max_number_of_retries' => 'getMaxNumberOfRetries',
        'timeout_seconds' => 'getTimeoutSeconds',
        'max_auth' => 'getMaxAuth',
        'grace_period' => 'getGracePeriod',
        'async_refund_grace_period_days' => 'getAsyncRefundGracePeriodDays',
        'is_checked_mastercard' => 'getIsCheckedMastercard',
        'is_checked_upi' => 'getIsCheckedUpi',
        'is_checked_visa' => 'getIsCheckedVisa',
        'is_checked_amex' => 'getIsCheckedAmex',
        'is_checked_maestro' => 'getIsCheckedMaestro',
        'is_checked_jcb' => 'getIsCheckedJcb',
        'is_checked_discover' => 'getIsCheckedDiscover',
        'is3ds2_supported' => 'getIs3ds2Supported',
        'gateway_apiassembly' => 'getGatewayApiassembly',
        'display_name' => 'getDisplayName',
        'gateway_apiimplementor_ns' => 'getGatewayApiimplementorNs',
        'is_token_supported' => 'getIsTokenSupported',
        'consumer_update_cc_grace_period' => 'getConsumerUpdateCcGracePeriod',
        'is_void_supported' => 'getIsVoidSupported',
        'is_void_after_fail_refund' => 'getIsVoidAfterFailRefund',
        'min_amount_allowed_for_auth' => 'getMinAmountAllowedForAuth',
        'capture_delay_in_sec' => 'getCaptureDelayInSec',
        'void_delay_in_sec' => 'getVoidDelayInSec',
        'allow_partial_void' => 'getAllowPartialVoid',
        'installments' => 'getInstallments',
        'processor_authentication_parameters' => 'getProcessorAuthenticationParameters',
        're_authorizations' => 'getReAuthorizations',
        'terminal_gateway_datas' => 'getTerminalGatewayDatas'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['api_url'] = isset($data['api_url']) ? $data['api_url'] : null;
        $this->container['max_number_of_retries'] = isset($data['max_number_of_retries']) ? $data['max_number_of_retries'] : null;
        $this->container['timeout_seconds'] = isset($data['timeout_seconds']) ? $data['timeout_seconds'] : null;
        $this->container['max_auth'] = isset($data['max_auth']) ? $data['max_auth'] : null;
        $this->container['grace_period'] = isset($data['grace_period']) ? $data['grace_period'] : null;
        $this->container['async_refund_grace_period_days'] = isset($data['async_refund_grace_period_days']) ? $data['async_refund_grace_period_days'] : null;
        $this->container['is_checked_mastercard'] = isset($data['is_checked_mastercard']) ? $data['is_checked_mastercard'] : null;
        $this->container['is_checked_upi'] = isset($data['is_checked_upi']) ? $data['is_checked_upi'] : null;
        $this->container['is_checked_visa'] = isset($data['is_checked_visa']) ? $data['is_checked_visa'] : null;
        $this->container['is_checked_amex'] = isset($data['is_checked_amex']) ? $data['is_checked_amex'] : null;
        $this->container['is_checked_maestro'] = isset($data['is_checked_maestro']) ? $data['is_checked_maestro'] : null;
        $this->container['is_checked_jcb'] = isset($data['is_checked_jcb']) ? $data['is_checked_jcb'] : null;
        $this->container['is_checked_discover'] = isset($data['is_checked_discover']) ? $data['is_checked_discover'] : null;
        $this->container['is3ds2_supported'] = isset($data['is3ds2_supported']) ? $data['is3ds2_supported'] : null;
        $this->container['gateway_apiassembly'] = isset($data['gateway_apiassembly']) ? $data['gateway_apiassembly'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['gateway_apiimplementor_ns'] = isset($data['gateway_apiimplementor_ns']) ? $data['gateway_apiimplementor_ns'] : null;
        $this->container['is_token_supported'] = isset($data['is_token_supported']) ? $data['is_token_supported'] : null;
        $this->container['consumer_update_cc_grace_period'] = isset($data['consumer_update_cc_grace_period']) ? $data['consumer_update_cc_grace_period'] : null;
        $this->container['is_void_supported'] = isset($data['is_void_supported']) ? $data['is_void_supported'] : null;
        $this->container['is_void_after_fail_refund'] = isset($data['is_void_after_fail_refund']) ? $data['is_void_after_fail_refund'] : null;
        $this->container['min_amount_allowed_for_auth'] = isset($data['min_amount_allowed_for_auth']) ? $data['min_amount_allowed_for_auth'] : null;
        $this->container['capture_delay_in_sec'] = isset($data['capture_delay_in_sec']) ? $data['capture_delay_in_sec'] : null;
        $this->container['void_delay_in_sec'] = isset($data['void_delay_in_sec']) ? $data['void_delay_in_sec'] : null;
        $this->container['allow_partial_void'] = isset($data['allow_partial_void']) ? $data['allow_partial_void'] : null;
        $this->container['installments'] = isset($data['installments']) ? $data['installments'] : null;
        $this->container['processor_authentication_parameters'] = isset($data['processor_authentication_parameters']) ? $data['processor_authentication_parameters'] : null;
        $this->container['re_authorizations'] = isset($data['re_authorizations']) ? $data['re_authorizations'] : null;
        $this->container['terminal_gateway_datas'] = isset($data['terminal_gateway_datas']) ? $data['terminal_gateway_datas'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['max_number_of_retries'] === null) {
            $invalidProperties[] = "'max_number_of_retries' can't be null";
        }
        if ($this->container['timeout_seconds'] === null) {
            $invalidProperties[] = "'timeout_seconds' can't be null";
        }
        if ($this->container['max_auth'] === null) {
            $invalidProperties[] = "'max_auth' can't be null";
        }
        if ($this->container['grace_period'] === null) {
            $invalidProperties[] = "'grace_period' can't be null";
        }
        if ($this->container['is_checked_mastercard'] === null) {
            $invalidProperties[] = "'is_checked_mastercard' can't be null";
        }
        if ($this->container['is_checked_upi'] === null) {
            $invalidProperties[] = "'is_checked_upi' can't be null";
        }
        if ($this->container['is_checked_visa'] === null) {
            $invalidProperties[] = "'is_checked_visa' can't be null";
        }
        if ($this->container['is_checked_amex'] === null) {
            $invalidProperties[] = "'is_checked_amex' can't be null";
        }
        if ($this->container['is_checked_maestro'] === null) {
            $invalidProperties[] = "'is_checked_maestro' can't be null";
        }
        if ($this->container['is_checked_jcb'] === null) {
            $invalidProperties[] = "'is_checked_jcb' can't be null";
        }
        if ($this->container['is_checked_discover'] === null) {
            $invalidProperties[] = "'is_checked_discover' can't be null";
        }
        if ($this->container['is3ds2_supported'] === null) {
            $invalidProperties[] = "'is3ds2_supported' can't be null";
        }
        if ($this->container['is_token_supported'] === null) {
            $invalidProperties[] = "'is_token_supported' can't be null";
        }
        if ($this->container['is_void_supported'] === null) {
            $invalidProperties[] = "'is_void_supported' can't be null";
        }
        if ($this->container['is_void_after_fail_refund'] === null) {
            $invalidProperties[] = "'is_void_after_fail_refund' can't be null";
        }
        if ($this->container['min_amount_allowed_for_auth'] === null) {
            $invalidProperties[] = "'min_amount_allowed_for_auth' can't be null";
        }
        if ($this->container['capture_delay_in_sec'] === null) {
            $invalidProperties[] = "'capture_delay_in_sec' can't be null";
        }
        if ($this->container['void_delay_in_sec'] === null) {
            $invalidProperties[] = "'void_delay_in_sec' can't be null";
        }
        if ($this->container['allow_partial_void'] === null) {
            $invalidProperties[] = "'allow_partial_void' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets api_url
     *
     * @return string
     */
    public function getApiUrl()
    {
        return $this->container['api_url'];
    }

    /**
     * Sets api_url
     *
     * @param string $api_url api_url
     *
     * @return $this
     */
    public function setApiUrl($api_url)
    {
        $this->container['api_url'] = $api_url;

        return $this;
    }

    /**
     * Gets max_number_of_retries
     *
     * @return int
     */
    public function getMaxNumberOfRetries()
    {
        return $this->container['max_number_of_retries'];
    }

    /**
     * Sets max_number_of_retries
     *
     * @param int $max_number_of_retries max_number_of_retries
     *
     * @return $this
     */
    public function setMaxNumberOfRetries($max_number_of_retries)
    {
        $this->container['max_number_of_retries'] = $max_number_of_retries;

        return $this;
    }

    /**
     * Gets timeout_seconds
     *
     * @return int
     */
    public function getTimeoutSeconds()
    {
        return $this->container['timeout_seconds'];
    }

    /**
     * Sets timeout_seconds
     *
     * @param int $timeout_seconds timeout_seconds
     *
     * @return $this
     */
    public function setTimeoutSeconds($timeout_seconds)
    {
        $this->container['timeout_seconds'] = $timeout_seconds;

        return $this;
    }

    /**
     * Gets max_auth
     *
     * @return int
     */
    public function getMaxAuth()
    {
        return $this->container['max_auth'];
    }

    /**
     * Sets max_auth
     *
     * @param int $max_auth max_auth
     *
     * @return $this
     */
    public function setMaxAuth($max_auth)
    {
        $this->container['max_auth'] = $max_auth;

        return $this;
    }

    /**
     * Gets grace_period
     *
     * @return int
     */
    public function getGracePeriod()
    {
        return $this->container['grace_period'];
    }

    /**
     * Sets grace_period
     *
     * @param int $grace_period grace_period
     *
     * @return $this
     */
    public function setGracePeriod($grace_period)
    {
        $this->container['grace_period'] = $grace_period;

        return $this;
    }

    /**
     * Gets async_refund_grace_period_days
     *
     * @return int
     */
    public function getAsyncRefundGracePeriodDays()
    {
        return $this->container['async_refund_grace_period_days'];
    }

    /**
     * Sets async_refund_grace_period_days
     *
     * @param int $async_refund_grace_period_days async_refund_grace_period_days
     *
     * @return $this
     */
    public function setAsyncRefundGracePeriodDays($async_refund_grace_period_days)
    {
        $this->container['async_refund_grace_period_days'] = $async_refund_grace_period_days;

        return $this;
    }

    /**
     * Gets is_checked_mastercard
     *
     * @return bool
     */
    public function getIsCheckedMastercard()
    {
        return $this->container['is_checked_mastercard'];
    }

    /**
     * Sets is_checked_mastercard
     *
     * @param bool $is_checked_mastercard is_checked_mastercard
     *
     * @return $this
     */
    public function setIsCheckedMastercard($is_checked_mastercard)
    {
        $this->container['is_checked_mastercard'] = $is_checked_mastercard;

        return $this;
    }

    /**
     * Gets is_checked_upi
     *
     * @return bool
     */
    public function getIsCheckedUpi()
    {
        return $this->container['is_checked_upi'];
    }

    /**
     * Sets is_checked_upi
     *
     * @param bool $is_checked_upi is_checked_upi
     *
     * @return $this
     */
    public function setIsCheckedUpi($is_checked_upi)
    {
        $this->container['is_checked_upi'] = $is_checked_upi;

        return $this;
    }

    /**
     * Gets is_checked_visa
     *
     * @return bool
     */
    public function getIsCheckedVisa()
    {
        return $this->container['is_checked_visa'];
    }

    /**
     * Sets is_checked_visa
     *
     * @param bool $is_checked_visa is_checked_visa
     *
     * @return $this
     */
    public function setIsCheckedVisa($is_checked_visa)
    {
        $this->container['is_checked_visa'] = $is_checked_visa;

        return $this;
    }

    /**
     * Gets is_checked_amex
     *
     * @return bool
     */
    public function getIsCheckedAmex()
    {
        return $this->container['is_checked_amex'];
    }

    /**
     * Sets is_checked_amex
     *
     * @param bool $is_checked_amex is_checked_amex
     *
     * @return $this
     */
    public function setIsCheckedAmex($is_checked_amex)
    {
        $this->container['is_checked_amex'] = $is_checked_amex;

        return $this;
    }

    /**
     * Gets is_checked_maestro
     *
     * @return bool
     */
    public function getIsCheckedMaestro()
    {
        return $this->container['is_checked_maestro'];
    }

    /**
     * Sets is_checked_maestro
     *
     * @param bool $is_checked_maestro is_checked_maestro
     *
     * @return $this
     */
    public function setIsCheckedMaestro($is_checked_maestro)
    {
        $this->container['is_checked_maestro'] = $is_checked_maestro;

        return $this;
    }

    /**
     * Gets is_checked_jcb
     *
     * @return bool
     */
    public function getIsCheckedJcb()
    {
        return $this->container['is_checked_jcb'];
    }

    /**
     * Sets is_checked_jcb
     *
     * @param bool $is_checked_jcb is_checked_jcb
     *
     * @return $this
     */
    public function setIsCheckedJcb($is_checked_jcb)
    {
        $this->container['is_checked_jcb'] = $is_checked_jcb;

        return $this;
    }

    /**
     * Gets is_checked_discover
     *
     * @return bool
     */
    public function getIsCheckedDiscover()
    {
        return $this->container['is_checked_discover'];
    }

    /**
     * Sets is_checked_discover
     *
     * @param bool $is_checked_discover is_checked_discover
     *
     * @return $this
     */
    public function setIsCheckedDiscover($is_checked_discover)
    {
        $this->container['is_checked_discover'] = $is_checked_discover;

        return $this;
    }

    /**
     * Gets is3ds2_supported
     *
     * @return bool
     */
    public function getIs3ds2Supported()
    {
        return $this->container['is3ds2_supported'];
    }

    /**
     * Sets is3ds2_supported
     *
     * @param bool $is3ds2_supported is3ds2_supported
     *
     * @return $this
     */
    public function setIs3ds2Supported($is3ds2_supported)
    {
        $this->container['is3ds2_supported'] = $is3ds2_supported;

        return $this;
    }

    /**
     * Gets gateway_apiassembly
     *
     * @return string
     */
    public function getGatewayApiassembly()
    {
        return $this->container['gateway_apiassembly'];
    }

    /**
     * Sets gateway_apiassembly
     *
     * @param string $gateway_apiassembly gateway_apiassembly
     *
     * @return $this
     */
    public function setGatewayApiassembly($gateway_apiassembly)
    {
        $this->container['gateway_apiassembly'] = $gateway_apiassembly;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets gateway_apiimplementor_ns
     *
     * @return string
     */
    public function getGatewayApiimplementorNs()
    {
        return $this->container['gateway_apiimplementor_ns'];
    }

    /**
     * Sets gateway_apiimplementor_ns
     *
     * @param string $gateway_apiimplementor_ns gateway_apiimplementor_ns
     *
     * @return $this
     */
    public function setGatewayApiimplementorNs($gateway_apiimplementor_ns)
    {
        $this->container['gateway_apiimplementor_ns'] = $gateway_apiimplementor_ns;

        return $this;
    }

    /**
     * Gets is_token_supported
     *
     * @return bool
     */
    public function getIsTokenSupported()
    {
        return $this->container['is_token_supported'];
    }

    /**
     * Sets is_token_supported
     *
     * @param bool $is_token_supported is_token_supported
     *
     * @return $this
     */
    public function setIsTokenSupported($is_token_supported)
    {
        $this->container['is_token_supported'] = $is_token_supported;

        return $this;
    }

    /**
     * Gets consumer_update_cc_grace_period
     *
     * @return string
     */
    public function getConsumerUpdateCcGracePeriod()
    {
        return $this->container['consumer_update_cc_grace_period'];
    }

    /**
     * Sets consumer_update_cc_grace_period
     *
     * @param string $consumer_update_cc_grace_period consumer_update_cc_grace_period
     *
     * @return $this
     */
    public function setConsumerUpdateCcGracePeriod($consumer_update_cc_grace_period)
    {
        $this->container['consumer_update_cc_grace_period'] = $consumer_update_cc_grace_period;

        return $this;
    }

    /**
     * Gets is_void_supported
     *
     * @return bool
     */
    public function getIsVoidSupported()
    {
        return $this->container['is_void_supported'];
    }

    /**
     * Sets is_void_supported
     *
     * @param bool $is_void_supported is_void_supported
     *
     * @return $this
     */
    public function setIsVoidSupported($is_void_supported)
    {
        $this->container['is_void_supported'] = $is_void_supported;

        return $this;
    }

    /**
     * Gets is_void_after_fail_refund
     *
     * @return bool
     */
    public function getIsVoidAfterFailRefund()
    {
        return $this->container['is_void_after_fail_refund'];
    }

    /**
     * Sets is_void_after_fail_refund
     *
     * @param bool $is_void_after_fail_refund is_void_after_fail_refund
     *
     * @return $this
     */
    public function setIsVoidAfterFailRefund($is_void_after_fail_refund)
    {
        $this->container['is_void_after_fail_refund'] = $is_void_after_fail_refund;

        return $this;
    }

    /**
     * Gets min_amount_allowed_for_auth
     *
     * @return float
     */
    public function getMinAmountAllowedForAuth()
    {
        return $this->container['min_amount_allowed_for_auth'];
    }

    /**
     * Sets min_amount_allowed_for_auth
     *
     * @param float $min_amount_allowed_for_auth min_amount_allowed_for_auth
     *
     * @return $this
     */
    public function setMinAmountAllowedForAuth($min_amount_allowed_for_auth)
    {
        $this->container['min_amount_allowed_for_auth'] = $min_amount_allowed_for_auth;

        return $this;
    }

    /**
     * Gets capture_delay_in_sec
     *
     * @return int
     */
    public function getCaptureDelayInSec()
    {
        return $this->container['capture_delay_in_sec'];
    }

    /**
     * Sets capture_delay_in_sec
     *
     * @param int $capture_delay_in_sec capture_delay_in_sec
     *
     * @return $this
     */
    public function setCaptureDelayInSec($capture_delay_in_sec)
    {
        $this->container['capture_delay_in_sec'] = $capture_delay_in_sec;

        return $this;
    }

    /**
     * Gets void_delay_in_sec
     *
     * @return int
     */
    public function getVoidDelayInSec()
    {
        return $this->container['void_delay_in_sec'];
    }

    /**
     * Sets void_delay_in_sec
     *
     * @param int $void_delay_in_sec void_delay_in_sec
     *
     * @return $this
     */
    public function setVoidDelayInSec($void_delay_in_sec)
    {
        $this->container['void_delay_in_sec'] = $void_delay_in_sec;

        return $this;
    }

    /**
     * Gets allow_partial_void
     *
     * @return bool
     */
    public function getAllowPartialVoid()
    {
        return $this->container['allow_partial_void'];
    }

    /**
     * Sets allow_partial_void
     *
     * @param bool $allow_partial_void allow_partial_void
     *
     * @return $this
     */
    public function setAllowPartialVoid($allow_partial_void)
    {
        $this->container['allow_partial_void'] = $allow_partial_void;

        return $this;
    }

    /**
     * Gets installments
     *
     * @return \SplititSdkClient\Model\Installments[]
     */
    public function getInstallments()
    {
        return $this->container['installments'];
    }

    /**
     * Sets installments
     *
     * @param \SplititSdkClient\Model\Installments[] $installments installments
     *
     * @return $this
     */
    public function setInstallments($installments)
    {
        $this->container['installments'] = $installments;

        return $this;
    }

    /**
     * Gets processor_authentication_parameters
     *
     * @return \SplititSdkClient\Model\ProcessorAuthenticationParameters[]
     */
    public function getProcessorAuthenticationParameters()
    {
        return $this->container['processor_authentication_parameters'];
    }

    /**
     * Sets processor_authentication_parameters
     *
     * @param \SplititSdkClient\Model\ProcessorAuthenticationParameters[] $processor_authentication_parameters processor_authentication_parameters
     *
     * @return $this
     */
    public function setProcessorAuthenticationParameters($processor_authentication_parameters)
    {
        $this->container['processor_authentication_parameters'] = $processor_authentication_parameters;

        return $this;
    }

    /**
     * Gets re_authorizations
     *
     * @return \SplititSdkClient\Model\ReAuthorizations[]
     */
    public function getReAuthorizations()
    {
        return $this->container['re_authorizations'];
    }

    /**
     * Sets re_authorizations
     *
     * @param \SplititSdkClient\Model\ReAuthorizations[] $re_authorizations re_authorizations
     *
     * @return $this
     */
    public function setReAuthorizations($re_authorizations)
    {
        $this->container['re_authorizations'] = $re_authorizations;

        return $this;
    }

    /**
     * Gets terminal_gateway_datas
     *
     * @return \SplititSdkClient\Model\TerminalGatewayDatas[]
     */
    public function getTerminalGatewayDatas()
    {
        return $this->container['terminal_gateway_datas'];
    }

    /**
     * Sets terminal_gateway_datas
     *
     * @param \SplititSdkClient\Model\TerminalGatewayDatas[] $terminal_gateway_datas terminal_gateway_datas
     *
     * @return $this
     */
    public function setTerminalGatewayDatas($terminal_gateway_datas)
    {
        $this->container['terminal_gateway_datas'] = $terminal_gateway_datas;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


