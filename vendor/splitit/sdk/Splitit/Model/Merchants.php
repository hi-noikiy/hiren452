<?php
/**
 * Merchants
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * Merchants Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Merchants implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Merchants';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'address' => 'string',
        'email' => 'string',
        'merchant_admin_website' => 'bool',
        'web_api' => 'bool',
        'embedded_clients' => 'bool',
        'crm_id' => 'string',
        'sf_parent_account_external_id' => 'string',
        'sf_lead_id' => 'string',
        'sf_parent_account_name' => 'string',
        'merchant_vertical' => 'string',
        'sf_account_id' => 'string',
        'declared_annual_volume_usd' => 'float',
        'declared_aovusd' => 'float',
        'logo_image' => 'string',
        'logo_file_extension' => 'string',
        'code' => 'string',
        'support_email' => 'string',
        'support_phone' => 'string',
        'parameter_group_id' => 'int',
        'business_unit_id' => 'int',
        'logo_url' => 'string',
        'merchant_legal_name' => 'string',
        'splitit_merchant_id' => 'string',
        'website_url' => 'string',
        'billing_address_address_line' => 'string',
        'billing_address_address_line2' => 'string',
        'billing_address_city' => 'string',
        'org_group' => 'string',
        'billing_address_country_id' => 'int',
        'billing_address_state_id' => 'int',
        'billing_address_zip' => 'string',
        'billing_address_legacy_full_address_line' => 'string',
        'vat_tax_id' => 'string',
        'sales_accossiate_id' => 'int',
        'registered_country_of_business_country_id' => 'int',
        'registered_country_of_business_state_id' => 'int',
        'merchant_country_country_id' => 'int',
        'merchant_country_state_id' => 'int',
        'bank_details_bank_account_name' => 'string',
        'bank_details_bank_routing_number' => 'string',
        'bank_details_bank_account_number' => 'string',
        'reports_folder_name' => 'string',
        'on_boarding_method' => '\SplititSdkClient\Model\OnBoardingMethod',
        'business_unit' => '\SplititSdkClient\Model\BusinessUnits',
        'parameter_group' => '\SplititSdkClient\Model\ParameterGroups',
        'sales_accossiate' => '\SplititSdkClient\Model\SalesAssociates',
        'api_users' => '\SplititSdkClient\Model\ApiUsers',
        'agents' => '\SplititSdkClient\Model\Agents[]',
        'installment_plan_events_subscription_datas' => '\SplititSdkClient\Model\InstallmentPlanEventsSubscriptionDatas[]',
        'terminals' => '\SplititSdkClient\Model\Terminals[]',
        'touch_point_color_values' => '\SplititSdkClient\Model\TouchPointColorValues[]',
        'is_test' => 'bool',
        'marked_for_deletion' => 'bool',
        'registered_country_of_business' => '\SplititSdkClient\Model\CountryState',
        'merchant_country' => '\SplititSdkClient\Model\CountryState',
        'status' => '\SplititSdkClient\Model\MerchantStatus',
        'vertical' => 'object',
        'bank_details' => '\SplititSdkClient\Model\BankDetails',
        'billing_address' => '\SplititSdkClient\Model\AddressData2',
        'country' => '\SplititSdkClient\Model\Countries',
        'state' => '\SplititSdkClient\Model\CountrySubdivisions',
        'splitit_signing_entity' => '\SplititSdkClient\Model\SplititEntity',
        'splitit_current_entity' => '\SplititSdkClient\Model\SplititEntity'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'name' => null,
        'address' => null,
        'email' => null,
        'merchant_admin_website' => null,
        'web_api' => null,
        'embedded_clients' => null,
        'crm_id' => null,
        'sf_parent_account_external_id' => null,
        'sf_lead_id' => null,
        'sf_parent_account_name' => null,
        'merchant_vertical' => null,
        'sf_account_id' => null,
        'declared_annual_volume_usd' => 'decimal',
        'declared_aovusd' => 'decimal',
        'logo_image' => 'byte',
        'logo_file_extension' => null,
        'code' => null,
        'support_email' => null,
        'support_phone' => null,
        'parameter_group_id' => 'int64',
        'business_unit_id' => 'int64',
        'logo_url' => null,
        'merchant_legal_name' => null,
        'splitit_merchant_id' => null,
        'website_url' => null,
        'billing_address_address_line' => null,
        'billing_address_address_line2' => null,
        'billing_address_city' => null,
        'org_group' => null,
        'billing_address_country_id' => 'int64',
        'billing_address_state_id' => 'int64',
        'billing_address_zip' => null,
        'billing_address_legacy_full_address_line' => null,
        'vat_tax_id' => null,
        'sales_accossiate_id' => 'int64',
        'registered_country_of_business_country_id' => 'int64',
        'registered_country_of_business_state_id' => 'int64',
        'merchant_country_country_id' => 'int64',
        'merchant_country_state_id' => 'int64',
        'bank_details_bank_account_name' => null,
        'bank_details_bank_routing_number' => null,
        'bank_details_bank_account_number' => null,
        'reports_folder_name' => null,
        'on_boarding_method' => null,
        'business_unit' => null,
        'parameter_group' => null,
        'sales_accossiate' => null,
        'api_users' => null,
        'agents' => null,
        'installment_plan_events_subscription_datas' => null,
        'terminals' => null,
        'touch_point_color_values' => null,
        'is_test' => null,
        'marked_for_deletion' => null,
        'registered_country_of_business' => null,
        'merchant_country' => null,
        'status' => null,
        'vertical' => null,
        'bank_details' => null,
        'billing_address' => null,
        'country' => null,
        'state' => null,
        'splitit_signing_entity' => null,
        'splitit_current_entity' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'name' => 'Name',
        'address' => 'Address',
        'email' => 'Email',
        'merchant_admin_website' => 'MerchantAdminWebsite',
        'web_api' => 'WebApi',
        'embedded_clients' => 'EmbeddedClients',
        'crm_id' => 'CrmId',
        'sf_parent_account_external_id' => 'SFParentAccountExternalId',
        'sf_lead_id' => 'SFLeadId',
        'sf_parent_account_name' => 'SFParentAccountName',
        'merchant_vertical' => 'MerchantVertical',
        'sf_account_id' => 'SFAccountId',
        'declared_annual_volume_usd' => 'DeclaredAnnualVolumeUSD',
        'declared_aovusd' => 'DeclaredAOVUSD',
        'logo_image' => 'LogoImage',
        'logo_file_extension' => 'LogoFileExtension',
        'code' => 'Code',
        'support_email' => 'SupportEmail',
        'support_phone' => 'SupportPhone',
        'parameter_group_id' => 'ParameterGroupId',
        'business_unit_id' => 'BusinessUnitId',
        'logo_url' => 'LogoUrl',
        'merchant_legal_name' => 'MerchantLegalName',
        'splitit_merchant_id' => 'SplititMerchantId',
        'website_url' => 'WebsiteUrl',
        'billing_address_address_line' => 'BillingAddressAddressLine',
        'billing_address_address_line2' => 'BillingAddressAddressLine2',
        'billing_address_city' => 'BillingAddressCity',
        'org_group' => 'OrgGroup',
        'billing_address_country_id' => 'BillingAddressCountryId',
        'billing_address_state_id' => 'BillingAddressStateId',
        'billing_address_zip' => 'BillingAddressZip',
        'billing_address_legacy_full_address_line' => 'BillingAddressLegacyFullAddressLine',
        'vat_tax_id' => 'VatTaxId',
        'sales_accossiate_id' => 'SalesAccossiateId',
        'registered_country_of_business_country_id' => 'RegisteredCountryOfBusinessCountryId',
        'registered_country_of_business_state_id' => 'RegisteredCountryOfBusinessStateId',
        'merchant_country_country_id' => 'MerchantCountryCountryId',
        'merchant_country_state_id' => 'MerchantCountryStateId',
        'bank_details_bank_account_name' => 'BankDetailsBankAccountName',
        'bank_details_bank_routing_number' => 'BankDetailsBankRoutingNumber',
        'bank_details_bank_account_number' => 'BankDetailsBankAccountNumber',
        'reports_folder_name' => 'ReportsFolderName',
        'on_boarding_method' => 'OnBoardingMethod',
        'business_unit' => 'BusinessUnit',
        'parameter_group' => 'ParameterGroup',
        'sales_accossiate' => 'SalesAccossiate',
        'api_users' => 'ApiUsers',
        'agents' => 'Agents',
        'installment_plan_events_subscription_datas' => 'InstallmentPlanEventsSubscriptionDatas',
        'terminals' => 'Terminals',
        'touch_point_color_values' => 'TouchPointColorValues',
        'is_test' => 'IsTest',
        'marked_for_deletion' => 'MarkedForDeletion',
        'registered_country_of_business' => 'RegisteredCountryOfBusiness',
        'merchant_country' => 'MerchantCountry',
        'status' => 'Status',
        'vertical' => 'Vertical',
        'bank_details' => 'BankDetails',
        'billing_address' => 'BillingAddress',
        'country' => 'Country',
        'state' => 'State',
        'splitit_signing_entity' => 'SplititSigningEntity',
        'splitit_current_entity' => 'SplititCurrentEntity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'address' => 'setAddress',
        'email' => 'setEmail',
        'merchant_admin_website' => 'setMerchantAdminWebsite',
        'web_api' => 'setWebApi',
        'embedded_clients' => 'setEmbeddedClients',
        'crm_id' => 'setCrmId',
        'sf_parent_account_external_id' => 'setSfParentAccountExternalId',
        'sf_lead_id' => 'setSfLeadId',
        'sf_parent_account_name' => 'setSfParentAccountName',
        'merchant_vertical' => 'setMerchantVertical',
        'sf_account_id' => 'setSfAccountId',
        'declared_annual_volume_usd' => 'setDeclaredAnnualVolumeUsd',
        'declared_aovusd' => 'setDeclaredAovusd',
        'logo_image' => 'setLogoImage',
        'logo_file_extension' => 'setLogoFileExtension',
        'code' => 'setCode',
        'support_email' => 'setSupportEmail',
        'support_phone' => 'setSupportPhone',
        'parameter_group_id' => 'setParameterGroupId',
        'business_unit_id' => 'setBusinessUnitId',
        'logo_url' => 'setLogoUrl',
        'merchant_legal_name' => 'setMerchantLegalName',
        'splitit_merchant_id' => 'setSplititMerchantId',
        'website_url' => 'setWebsiteUrl',
        'billing_address_address_line' => 'setBillingAddressAddressLine',
        'billing_address_address_line2' => 'setBillingAddressAddressLine2',
        'billing_address_city' => 'setBillingAddressCity',
        'org_group' => 'setOrgGroup',
        'billing_address_country_id' => 'setBillingAddressCountryId',
        'billing_address_state_id' => 'setBillingAddressStateId',
        'billing_address_zip' => 'setBillingAddressZip',
        'billing_address_legacy_full_address_line' => 'setBillingAddressLegacyFullAddressLine',
        'vat_tax_id' => 'setVatTaxId',
        'sales_accossiate_id' => 'setSalesAccossiateId',
        'registered_country_of_business_country_id' => 'setRegisteredCountryOfBusinessCountryId',
        'registered_country_of_business_state_id' => 'setRegisteredCountryOfBusinessStateId',
        'merchant_country_country_id' => 'setMerchantCountryCountryId',
        'merchant_country_state_id' => 'setMerchantCountryStateId',
        'bank_details_bank_account_name' => 'setBankDetailsBankAccountName',
        'bank_details_bank_routing_number' => 'setBankDetailsBankRoutingNumber',
        'bank_details_bank_account_number' => 'setBankDetailsBankAccountNumber',
        'reports_folder_name' => 'setReportsFolderName',
        'on_boarding_method' => 'setOnBoardingMethod',
        'business_unit' => 'setBusinessUnit',
        'parameter_group' => 'setParameterGroup',
        'sales_accossiate' => 'setSalesAccossiate',
        'api_users' => 'setApiUsers',
        'agents' => 'setAgents',
        'installment_plan_events_subscription_datas' => 'setInstallmentPlanEventsSubscriptionDatas',
        'terminals' => 'setTerminals',
        'touch_point_color_values' => 'setTouchPointColorValues',
        'is_test' => 'setIsTest',
        'marked_for_deletion' => 'setMarkedForDeletion',
        'registered_country_of_business' => 'setRegisteredCountryOfBusiness',
        'merchant_country' => 'setMerchantCountry',
        'status' => 'setStatus',
        'vertical' => 'setVertical',
        'bank_details' => 'setBankDetails',
        'billing_address' => 'setBillingAddress',
        'country' => 'setCountry',
        'state' => 'setState',
        'splitit_signing_entity' => 'setSplititSigningEntity',
        'splitit_current_entity' => 'setSplititCurrentEntity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'address' => 'getAddress',
        'email' => 'getEmail',
        'merchant_admin_website' => 'getMerchantAdminWebsite',
        'web_api' => 'getWebApi',
        'embedded_clients' => 'getEmbeddedClients',
        'crm_id' => 'getCrmId',
        'sf_parent_account_external_id' => 'getSfParentAccountExternalId',
        'sf_lead_id' => 'getSfLeadId',
        'sf_parent_account_name' => 'getSfParentAccountName',
        'merchant_vertical' => 'getMerchantVertical',
        'sf_account_id' => 'getSfAccountId',
        'declared_annual_volume_usd' => 'getDeclaredAnnualVolumeUsd',
        'declared_aovusd' => 'getDeclaredAovusd',
        'logo_image' => 'getLogoImage',
        'logo_file_extension' => 'getLogoFileExtension',
        'code' => 'getCode',
        'support_email' => 'getSupportEmail',
        'support_phone' => 'getSupportPhone',
        'parameter_group_id' => 'getParameterGroupId',
        'business_unit_id' => 'getBusinessUnitId',
        'logo_url' => 'getLogoUrl',
        'merchant_legal_name' => 'getMerchantLegalName',
        'splitit_merchant_id' => 'getSplititMerchantId',
        'website_url' => 'getWebsiteUrl',
        'billing_address_address_line' => 'getBillingAddressAddressLine',
        'billing_address_address_line2' => 'getBillingAddressAddressLine2',
        'billing_address_city' => 'getBillingAddressCity',
        'org_group' => 'getOrgGroup',
        'billing_address_country_id' => 'getBillingAddressCountryId',
        'billing_address_state_id' => 'getBillingAddressStateId',
        'billing_address_zip' => 'getBillingAddressZip',
        'billing_address_legacy_full_address_line' => 'getBillingAddressLegacyFullAddressLine',
        'vat_tax_id' => 'getVatTaxId',
        'sales_accossiate_id' => 'getSalesAccossiateId',
        'registered_country_of_business_country_id' => 'getRegisteredCountryOfBusinessCountryId',
        'registered_country_of_business_state_id' => 'getRegisteredCountryOfBusinessStateId',
        'merchant_country_country_id' => 'getMerchantCountryCountryId',
        'merchant_country_state_id' => 'getMerchantCountryStateId',
        'bank_details_bank_account_name' => 'getBankDetailsBankAccountName',
        'bank_details_bank_routing_number' => 'getBankDetailsBankRoutingNumber',
        'bank_details_bank_account_number' => 'getBankDetailsBankAccountNumber',
        'reports_folder_name' => 'getReportsFolderName',
        'on_boarding_method' => 'getOnBoardingMethod',
        'business_unit' => 'getBusinessUnit',
        'parameter_group' => 'getParameterGroup',
        'sales_accossiate' => 'getSalesAccossiate',
        'api_users' => 'getApiUsers',
        'agents' => 'getAgents',
        'installment_plan_events_subscription_datas' => 'getInstallmentPlanEventsSubscriptionDatas',
        'terminals' => 'getTerminals',
        'touch_point_color_values' => 'getTouchPointColorValues',
        'is_test' => 'getIsTest',
        'marked_for_deletion' => 'getMarkedForDeletion',
        'registered_country_of_business' => 'getRegisteredCountryOfBusiness',
        'merchant_country' => 'getMerchantCountry',
        'status' => 'getStatus',
        'vertical' => 'getVertical',
        'bank_details' => 'getBankDetails',
        'billing_address' => 'getBillingAddress',
        'country' => 'getCountry',
        'state' => 'getState',
        'splitit_signing_entity' => 'getSplititSigningEntity',
        'splitit_current_entity' => 'getSplititCurrentEntity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['merchant_admin_website'] = isset($data['merchant_admin_website']) ? $data['merchant_admin_website'] : null;
        $this->container['web_api'] = isset($data['web_api']) ? $data['web_api'] : null;
        $this->container['embedded_clients'] = isset($data['embedded_clients']) ? $data['embedded_clients'] : null;
        $this->container['crm_id'] = isset($data['crm_id']) ? $data['crm_id'] : null;
        $this->container['sf_parent_account_external_id'] = isset($data['sf_parent_account_external_id']) ? $data['sf_parent_account_external_id'] : null;
        $this->container['sf_lead_id'] = isset($data['sf_lead_id']) ? $data['sf_lead_id'] : null;
        $this->container['sf_parent_account_name'] = isset($data['sf_parent_account_name']) ? $data['sf_parent_account_name'] : null;
        $this->container['merchant_vertical'] = isset($data['merchant_vertical']) ? $data['merchant_vertical'] : null;
        $this->container['sf_account_id'] = isset($data['sf_account_id']) ? $data['sf_account_id'] : null;
        $this->container['declared_annual_volume_usd'] = isset($data['declared_annual_volume_usd']) ? $data['declared_annual_volume_usd'] : null;
        $this->container['declared_aovusd'] = isset($data['declared_aovusd']) ? $data['declared_aovusd'] : null;
        $this->container['logo_image'] = isset($data['logo_image']) ? $data['logo_image'] : null;
        $this->container['logo_file_extension'] = isset($data['logo_file_extension']) ? $data['logo_file_extension'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['support_email'] = isset($data['support_email']) ? $data['support_email'] : null;
        $this->container['support_phone'] = isset($data['support_phone']) ? $data['support_phone'] : null;
        $this->container['parameter_group_id'] = isset($data['parameter_group_id']) ? $data['parameter_group_id'] : null;
        $this->container['business_unit_id'] = isset($data['business_unit_id']) ? $data['business_unit_id'] : null;
        $this->container['logo_url'] = isset($data['logo_url']) ? $data['logo_url'] : null;
        $this->container['merchant_legal_name'] = isset($data['merchant_legal_name']) ? $data['merchant_legal_name'] : null;
        $this->container['splitit_merchant_id'] = isset($data['splitit_merchant_id']) ? $data['splitit_merchant_id'] : null;
        $this->container['website_url'] = isset($data['website_url']) ? $data['website_url'] : null;
        $this->container['billing_address_address_line'] = isset($data['billing_address_address_line']) ? $data['billing_address_address_line'] : null;
        $this->container['billing_address_address_line2'] = isset($data['billing_address_address_line2']) ? $data['billing_address_address_line2'] : null;
        $this->container['billing_address_city'] = isset($data['billing_address_city']) ? $data['billing_address_city'] : null;
        $this->container['org_group'] = isset($data['org_group']) ? $data['org_group'] : null;
        $this->container['billing_address_country_id'] = isset($data['billing_address_country_id']) ? $data['billing_address_country_id'] : null;
        $this->container['billing_address_state_id'] = isset($data['billing_address_state_id']) ? $data['billing_address_state_id'] : null;
        $this->container['billing_address_zip'] = isset($data['billing_address_zip']) ? $data['billing_address_zip'] : null;
        $this->container['billing_address_legacy_full_address_line'] = isset($data['billing_address_legacy_full_address_line']) ? $data['billing_address_legacy_full_address_line'] : null;
        $this->container['vat_tax_id'] = isset($data['vat_tax_id']) ? $data['vat_tax_id'] : null;
        $this->container['sales_accossiate_id'] = isset($data['sales_accossiate_id']) ? $data['sales_accossiate_id'] : null;
        $this->container['registered_country_of_business_country_id'] = isset($data['registered_country_of_business_country_id']) ? $data['registered_country_of_business_country_id'] : null;
        $this->container['registered_country_of_business_state_id'] = isset($data['registered_country_of_business_state_id']) ? $data['registered_country_of_business_state_id'] : null;
        $this->container['merchant_country_country_id'] = isset($data['merchant_country_country_id']) ? $data['merchant_country_country_id'] : null;
        $this->container['merchant_country_state_id'] = isset($data['merchant_country_state_id']) ? $data['merchant_country_state_id'] : null;
        $this->container['bank_details_bank_account_name'] = isset($data['bank_details_bank_account_name']) ? $data['bank_details_bank_account_name'] : null;
        $this->container['bank_details_bank_routing_number'] = isset($data['bank_details_bank_routing_number']) ? $data['bank_details_bank_routing_number'] : null;
        $this->container['bank_details_bank_account_number'] = isset($data['bank_details_bank_account_number']) ? $data['bank_details_bank_account_number'] : null;
        $this->container['reports_folder_name'] = isset($data['reports_folder_name']) ? $data['reports_folder_name'] : null;
        $this->container['on_boarding_method'] = isset($data['on_boarding_method']) ? $data['on_boarding_method'] : null;
        $this->container['business_unit'] = isset($data['business_unit']) ? $data['business_unit'] : null;
        $this->container['parameter_group'] = isset($data['parameter_group']) ? $data['parameter_group'] : null;
        $this->container['sales_accossiate'] = isset($data['sales_accossiate']) ? $data['sales_accossiate'] : null;
        $this->container['api_users'] = isset($data['api_users']) ? $data['api_users'] : null;
        $this->container['agents'] = isset($data['agents']) ? $data['agents'] : null;
        $this->container['installment_plan_events_subscription_datas'] = isset($data['installment_plan_events_subscription_datas']) ? $data['installment_plan_events_subscription_datas'] : null;
        $this->container['terminals'] = isset($data['terminals']) ? $data['terminals'] : null;
        $this->container['touch_point_color_values'] = isset($data['touch_point_color_values']) ? $data['touch_point_color_values'] : null;
        $this->container['is_test'] = isset($data['is_test']) ? $data['is_test'] : null;
        $this->container['marked_for_deletion'] = isset($data['marked_for_deletion']) ? $data['marked_for_deletion'] : null;
        $this->container['registered_country_of_business'] = isset($data['registered_country_of_business']) ? $data['registered_country_of_business'] : null;
        $this->container['merchant_country'] = isset($data['merchant_country']) ? $data['merchant_country'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['vertical'] = isset($data['vertical']) ? $data['vertical'] : null;
        $this->container['bank_details'] = isset($data['bank_details']) ? $data['bank_details'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['splitit_signing_entity'] = isset($data['splitit_signing_entity']) ? $data['splitit_signing_entity'] : null;
        $this->container['splitit_current_entity'] = isset($data['splitit_current_entity']) ? $data['splitit_current_entity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['merchant_admin_website'] === null) {
            $invalidProperties[] = "'merchant_admin_website' can't be null";
        }
        if ($this->container['web_api'] === null) {
            $invalidProperties[] = "'web_api' can't be null";
        }
        if ($this->container['embedded_clients'] === null) {
            $invalidProperties[] = "'embedded_clients' can't be null";
        }
        if (!is_null($this->container['logo_image']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['logo_image'])) {
            $invalidProperties[] = "invalid value for 'logo_image', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        if ($this->container['business_unit_id'] === null) {
            $invalidProperties[] = "'business_unit_id' can't be null";
        }
        if ($this->container['on_boarding_method'] === null) {
            $invalidProperties[] = "'on_boarding_method' can't be null";
        }
        if ($this->container['is_test'] === null) {
            $invalidProperties[] = "'is_test' can't be null";
        }
        if ($this->container['marked_for_deletion'] === null) {
            $invalidProperties[] = "'marked_for_deletion' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['vertical'] === null) {
            $invalidProperties[] = "'vertical' can't be null";
        }
        if ($this->container['splitit_signing_entity'] === null) {
            $invalidProperties[] = "'splitit_signing_entity' can't be null";
        }
        if ($this->container['splitit_current_entity'] === null) {
            $invalidProperties[] = "'splitit_current_entity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets merchant_admin_website
     *
     * @return bool
     */
    public function getMerchantAdminWebsite()
    {
        return $this->container['merchant_admin_website'];
    }

    /**
     * Sets merchant_admin_website
     *
     * @param bool $merchant_admin_website merchant_admin_website
     *
     * @return $this
     */
    public function setMerchantAdminWebsite($merchant_admin_website)
    {
        $this->container['merchant_admin_website'] = $merchant_admin_website;

        return $this;
    }

    /**
     * Gets web_api
     *
     * @return bool
     */
    public function getWebApi()
    {
        return $this->container['web_api'];
    }

    /**
     * Sets web_api
     *
     * @param bool $web_api web_api
     *
     * @return $this
     */
    public function setWebApi($web_api)
    {
        $this->container['web_api'] = $web_api;

        return $this;
    }

    /**
     * Gets embedded_clients
     *
     * @return bool
     */
    public function getEmbeddedClients()
    {
        return $this->container['embedded_clients'];
    }

    /**
     * Sets embedded_clients
     *
     * @param bool $embedded_clients embedded_clients
     *
     * @return $this
     */
    public function setEmbeddedClients($embedded_clients)
    {
        $this->container['embedded_clients'] = $embedded_clients;

        return $this;
    }

    /**
     * Gets crm_id
     *
     * @return string
     */
    public function getCrmId()
    {
        return $this->container['crm_id'];
    }

    /**
     * Sets crm_id
     *
     * @param string $crm_id crm_id
     *
     * @return $this
     */
    public function setCrmId($crm_id)
    {
        $this->container['crm_id'] = $crm_id;

        return $this;
    }

    /**
     * Gets sf_parent_account_external_id
     *
     * @return string
     */
    public function getSfParentAccountExternalId()
    {
        return $this->container['sf_parent_account_external_id'];
    }

    /**
     * Sets sf_parent_account_external_id
     *
     * @param string $sf_parent_account_external_id sf_parent_account_external_id
     *
     * @return $this
     */
    public function setSfParentAccountExternalId($sf_parent_account_external_id)
    {
        $this->container['sf_parent_account_external_id'] = $sf_parent_account_external_id;

        return $this;
    }

    /**
     * Gets sf_lead_id
     *
     * @return string
     */
    public function getSfLeadId()
    {
        return $this->container['sf_lead_id'];
    }

    /**
     * Sets sf_lead_id
     *
     * @param string $sf_lead_id sf_lead_id
     *
     * @return $this
     */
    public function setSfLeadId($sf_lead_id)
    {
        $this->container['sf_lead_id'] = $sf_lead_id;

        return $this;
    }

    /**
     * Gets sf_parent_account_name
     *
     * @return string
     */
    public function getSfParentAccountName()
    {
        return $this->container['sf_parent_account_name'];
    }

    /**
     * Sets sf_parent_account_name
     *
     * @param string $sf_parent_account_name sf_parent_account_name
     *
     * @return $this
     */
    public function setSfParentAccountName($sf_parent_account_name)
    {
        $this->container['sf_parent_account_name'] = $sf_parent_account_name;

        return $this;
    }

    /**
     * Gets merchant_vertical
     *
     * @return string
     */
    public function getMerchantVertical()
    {
        return $this->container['merchant_vertical'];
    }

    /**
     * Sets merchant_vertical
     *
     * @param string $merchant_vertical merchant_vertical
     *
     * @return $this
     */
    public function setMerchantVertical($merchant_vertical)
    {
        $this->container['merchant_vertical'] = $merchant_vertical;

        return $this;
    }

    /**
     * Gets sf_account_id
     *
     * @return string
     */
    public function getSfAccountId()
    {
        return $this->container['sf_account_id'];
    }

    /**
     * Sets sf_account_id
     *
     * @param string $sf_account_id sf_account_id
     *
     * @return $this
     */
    public function setSfAccountId($sf_account_id)
    {
        $this->container['sf_account_id'] = $sf_account_id;

        return $this;
    }

    /**
     * Gets declared_annual_volume_usd
     *
     * @return float
     */
    public function getDeclaredAnnualVolumeUsd()
    {
        return $this->container['declared_annual_volume_usd'];
    }

    /**
     * Sets declared_annual_volume_usd
     *
     * @param float $declared_annual_volume_usd declared_annual_volume_usd
     *
     * @return $this
     */
    public function setDeclaredAnnualVolumeUsd($declared_annual_volume_usd)
    {
        $this->container['declared_annual_volume_usd'] = $declared_annual_volume_usd;

        return $this;
    }

    /**
     * Gets declared_aovusd
     *
     * @return float
     */
    public function getDeclaredAovusd()
    {
        return $this->container['declared_aovusd'];
    }

    /**
     * Sets declared_aovusd
     *
     * @param float $declared_aovusd declared_aovusd
     *
     * @return $this
     */
    public function setDeclaredAovusd($declared_aovusd)
    {
        $this->container['declared_aovusd'] = $declared_aovusd;

        return $this;
    }

    /**
     * Gets logo_image
     *
     * @return string
     */
    public function getLogoImage()
    {
        return $this->container['logo_image'];
    }

    /**
     * Sets logo_image
     *
     * @param string $logo_image logo_image
     *
     * @return $this
     */
    public function setLogoImage($logo_image)
    {

        if (!is_null($logo_image) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $logo_image))) {
            throw new \InvalidArgumentException("invalid value for $logo_image when calling Merchants., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['logo_image'] = $logo_image;

        return $this;
    }

    /**
     * Gets logo_file_extension
     *
     * @return string
     */
    public function getLogoFileExtension()
    {
        return $this->container['logo_file_extension'];
    }

    /**
     * Sets logo_file_extension
     *
     * @param string $logo_file_extension logo_file_extension
     *
     * @return $this
     */
    public function setLogoFileExtension($logo_file_extension)
    {
        $this->container['logo_file_extension'] = $logo_file_extension;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets support_email
     *
     * @return string
     */
    public function getSupportEmail()
    {
        return $this->container['support_email'];
    }

    /**
     * Sets support_email
     *
     * @param string $support_email support_email
     *
     * @return $this
     */
    public function setSupportEmail($support_email)
    {
        $this->container['support_email'] = $support_email;

        return $this;
    }

    /**
     * Gets support_phone
     *
     * @return string
     */
    public function getSupportPhone()
    {
        return $this->container['support_phone'];
    }

    /**
     * Sets support_phone
     *
     * @param string $support_phone support_phone
     *
     * @return $this
     */
    public function setSupportPhone($support_phone)
    {
        $this->container['support_phone'] = $support_phone;

        return $this;
    }

    /**
     * Gets parameter_group_id
     *
     * @return int
     */
    public function getParameterGroupId()
    {
        return $this->container['parameter_group_id'];
    }

    /**
     * Sets parameter_group_id
     *
     * @param int $parameter_group_id parameter_group_id
     *
     * @return $this
     */
    public function setParameterGroupId($parameter_group_id)
    {
        $this->container['parameter_group_id'] = $parameter_group_id;

        return $this;
    }

    /**
     * Gets business_unit_id
     *
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     *
     * @param int $business_unit_id business_unit_id
     *
     * @return $this
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string $logo_url logo_url
     *
     * @return $this
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets merchant_legal_name
     *
     * @return string
     */
    public function getMerchantLegalName()
    {
        return $this->container['merchant_legal_name'];
    }

    /**
     * Sets merchant_legal_name
     *
     * @param string $merchant_legal_name merchant_legal_name
     *
     * @return $this
     */
    public function setMerchantLegalName($merchant_legal_name)
    {
        $this->container['merchant_legal_name'] = $merchant_legal_name;

        return $this;
    }

    /**
     * Gets splitit_merchant_id
     *
     * @return string
     */
    public function getSplititMerchantId()
    {
        return $this->container['splitit_merchant_id'];
    }

    /**
     * Sets splitit_merchant_id
     *
     * @param string $splitit_merchant_id splitit_merchant_id
     *
     * @return $this
     */
    public function setSplititMerchantId($splitit_merchant_id)
    {
        $this->container['splitit_merchant_id'] = $splitit_merchant_id;

        return $this;
    }

    /**
     * Gets website_url
     *
     * @return string
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     *
     * @param string $website_url website_url
     *
     * @return $this
     */
    public function setWebsiteUrl($website_url)
    {
        $this->container['website_url'] = $website_url;

        return $this;
    }

    /**
     * Gets billing_address_address_line
     *
     * @return string
     */
    public function getBillingAddressAddressLine()
    {
        return $this->container['billing_address_address_line'];
    }

    /**
     * Sets billing_address_address_line
     *
     * @param string $billing_address_address_line billing_address_address_line
     *
     * @return $this
     */
    public function setBillingAddressAddressLine($billing_address_address_line)
    {
        $this->container['billing_address_address_line'] = $billing_address_address_line;

        return $this;
    }

    /**
     * Gets billing_address_address_line2
     *
     * @return string
     */
    public function getBillingAddressAddressLine2()
    {
        return $this->container['billing_address_address_line2'];
    }

    /**
     * Sets billing_address_address_line2
     *
     * @param string $billing_address_address_line2 billing_address_address_line2
     *
     * @return $this
     */
    public function setBillingAddressAddressLine2($billing_address_address_line2)
    {
        $this->container['billing_address_address_line2'] = $billing_address_address_line2;

        return $this;
    }

    /**
     * Gets billing_address_city
     *
     * @return string
     */
    public function getBillingAddressCity()
    {
        return $this->container['billing_address_city'];
    }

    /**
     * Sets billing_address_city
     *
     * @param string $billing_address_city billing_address_city
     *
     * @return $this
     */
    public function setBillingAddressCity($billing_address_city)
    {
        $this->container['billing_address_city'] = $billing_address_city;

        return $this;
    }

    /**
     * Gets org_group
     *
     * @return string
     */
    public function getOrgGroup()
    {
        return $this->container['org_group'];
    }

    /**
     * Sets org_group
     *
     * @param string $org_group org_group
     *
     * @return $this
     */
    public function setOrgGroup($org_group)
    {
        $this->container['org_group'] = $org_group;

        return $this;
    }

    /**
     * Gets billing_address_country_id
     *
     * @return int
     */
    public function getBillingAddressCountryId()
    {
        return $this->container['billing_address_country_id'];
    }

    /**
     * Sets billing_address_country_id
     *
     * @param int $billing_address_country_id billing_address_country_id
     *
     * @return $this
     */
    public function setBillingAddressCountryId($billing_address_country_id)
    {
        $this->container['billing_address_country_id'] = $billing_address_country_id;

        return $this;
    }

    /**
     * Gets billing_address_state_id
     *
     * @return int
     */
    public function getBillingAddressStateId()
    {
        return $this->container['billing_address_state_id'];
    }

    /**
     * Sets billing_address_state_id
     *
     * @param int $billing_address_state_id billing_address_state_id
     *
     * @return $this
     */
    public function setBillingAddressStateId($billing_address_state_id)
    {
        $this->container['billing_address_state_id'] = $billing_address_state_id;

        return $this;
    }

    /**
     * Gets billing_address_zip
     *
     * @return string
     */
    public function getBillingAddressZip()
    {
        return $this->container['billing_address_zip'];
    }

    /**
     * Sets billing_address_zip
     *
     * @param string $billing_address_zip billing_address_zip
     *
     * @return $this
     */
    public function setBillingAddressZip($billing_address_zip)
    {
        $this->container['billing_address_zip'] = $billing_address_zip;

        return $this;
    }

    /**
     * Gets billing_address_legacy_full_address_line
     *
     * @return string
     */
    public function getBillingAddressLegacyFullAddressLine()
    {
        return $this->container['billing_address_legacy_full_address_line'];
    }

    /**
     * Sets billing_address_legacy_full_address_line
     *
     * @param string $billing_address_legacy_full_address_line billing_address_legacy_full_address_line
     *
     * @return $this
     */
    public function setBillingAddressLegacyFullAddressLine($billing_address_legacy_full_address_line)
    {
        $this->container['billing_address_legacy_full_address_line'] = $billing_address_legacy_full_address_line;

        return $this;
    }

    /**
     * Gets vat_tax_id
     *
     * @return string
     */
    public function getVatTaxId()
    {
        return $this->container['vat_tax_id'];
    }

    /**
     * Sets vat_tax_id
     *
     * @param string $vat_tax_id vat_tax_id
     *
     * @return $this
     */
    public function setVatTaxId($vat_tax_id)
    {
        $this->container['vat_tax_id'] = $vat_tax_id;

        return $this;
    }

    /**
     * Gets sales_accossiate_id
     *
     * @return int
     */
    public function getSalesAccossiateId()
    {
        return $this->container['sales_accossiate_id'];
    }

    /**
     * Sets sales_accossiate_id
     *
     * @param int $sales_accossiate_id sales_accossiate_id
     *
     * @return $this
     */
    public function setSalesAccossiateId($sales_accossiate_id)
    {
        $this->container['sales_accossiate_id'] = $sales_accossiate_id;

        return $this;
    }

    /**
     * Gets registered_country_of_business_country_id
     *
     * @return int
     */
    public function getRegisteredCountryOfBusinessCountryId()
    {
        return $this->container['registered_country_of_business_country_id'];
    }

    /**
     * Sets registered_country_of_business_country_id
     *
     * @param int $registered_country_of_business_country_id registered_country_of_business_country_id
     *
     * @return $this
     */
    public function setRegisteredCountryOfBusinessCountryId($registered_country_of_business_country_id)
    {
        $this->container['registered_country_of_business_country_id'] = $registered_country_of_business_country_id;

        return $this;
    }

    /**
     * Gets registered_country_of_business_state_id
     *
     * @return int
     */
    public function getRegisteredCountryOfBusinessStateId()
    {
        return $this->container['registered_country_of_business_state_id'];
    }

    /**
     * Sets registered_country_of_business_state_id
     *
     * @param int $registered_country_of_business_state_id registered_country_of_business_state_id
     *
     * @return $this
     */
    public function setRegisteredCountryOfBusinessStateId($registered_country_of_business_state_id)
    {
        $this->container['registered_country_of_business_state_id'] = $registered_country_of_business_state_id;

        return $this;
    }

    /**
     * Gets merchant_country_country_id
     *
     * @return int
     */
    public function getMerchantCountryCountryId()
    {
        return $this->container['merchant_country_country_id'];
    }

    /**
     * Sets merchant_country_country_id
     *
     * @param int $merchant_country_country_id merchant_country_country_id
     *
     * @return $this
     */
    public function setMerchantCountryCountryId($merchant_country_country_id)
    {
        $this->container['merchant_country_country_id'] = $merchant_country_country_id;

        return $this;
    }

    /**
     * Gets merchant_country_state_id
     *
     * @return int
     */
    public function getMerchantCountryStateId()
    {
        return $this->container['merchant_country_state_id'];
    }

    /**
     * Sets merchant_country_state_id
     *
     * @param int $merchant_country_state_id merchant_country_state_id
     *
     * @return $this
     */
    public function setMerchantCountryStateId($merchant_country_state_id)
    {
        $this->container['merchant_country_state_id'] = $merchant_country_state_id;

        return $this;
    }

    /**
     * Gets bank_details_bank_account_name
     *
     * @return string
     */
    public function getBankDetailsBankAccountName()
    {
        return $this->container['bank_details_bank_account_name'];
    }

    /**
     * Sets bank_details_bank_account_name
     *
     * @param string $bank_details_bank_account_name bank_details_bank_account_name
     *
     * @return $this
     */
    public function setBankDetailsBankAccountName($bank_details_bank_account_name)
    {
        $this->container['bank_details_bank_account_name'] = $bank_details_bank_account_name;

        return $this;
    }

    /**
     * Gets bank_details_bank_routing_number
     *
     * @return string
     */
    public function getBankDetailsBankRoutingNumber()
    {
        return $this->container['bank_details_bank_routing_number'];
    }

    /**
     * Sets bank_details_bank_routing_number
     *
     * @param string $bank_details_bank_routing_number bank_details_bank_routing_number
     *
     * @return $this
     */
    public function setBankDetailsBankRoutingNumber($bank_details_bank_routing_number)
    {
        $this->container['bank_details_bank_routing_number'] = $bank_details_bank_routing_number;

        return $this;
    }

    /**
     * Gets bank_details_bank_account_number
     *
     * @return string
     */
    public function getBankDetailsBankAccountNumber()
    {
        return $this->container['bank_details_bank_account_number'];
    }

    /**
     * Sets bank_details_bank_account_number
     *
     * @param string $bank_details_bank_account_number bank_details_bank_account_number
     *
     * @return $this
     */
    public function setBankDetailsBankAccountNumber($bank_details_bank_account_number)
    {
        $this->container['bank_details_bank_account_number'] = $bank_details_bank_account_number;

        return $this;
    }

    /**
     * Gets reports_folder_name
     *
     * @return string
     */
    public function getReportsFolderName()
    {
        return $this->container['reports_folder_name'];
    }

    /**
     * Sets reports_folder_name
     *
     * @param string $reports_folder_name reports_folder_name
     *
     * @return $this
     */
    public function setReportsFolderName($reports_folder_name)
    {
        $this->container['reports_folder_name'] = $reports_folder_name;

        return $this;
    }

    /**
     * Gets on_boarding_method
     *
     * @return \SplititSdkClient\Model\OnBoardingMethod
     */
    public function getOnBoardingMethod()
    {
        return $this->container['on_boarding_method'];
    }

    /**
     * Sets on_boarding_method
     *
     * @param \SplititSdkClient\Model\OnBoardingMethod $on_boarding_method on_boarding_method
     *
     * @return $this
     */
    public function setOnBoardingMethod($on_boarding_method)
    {
        $this->container['on_boarding_method'] = $on_boarding_method;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \SplititSdkClient\Model\BusinessUnits
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \SplititSdkClient\Model\BusinessUnits $business_unit business_unit
     *
     * @return $this
     */
    public function setBusinessUnit($business_unit)
    {
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets parameter_group
     *
     * @return \SplititSdkClient\Model\ParameterGroups
     */
    public function getParameterGroup()
    {
        return $this->container['parameter_group'];
    }

    /**
     * Sets parameter_group
     *
     * @param \SplititSdkClient\Model\ParameterGroups $parameter_group parameter_group
     *
     * @return $this
     */
    public function setParameterGroup($parameter_group)
    {
        $this->container['parameter_group'] = $parameter_group;

        return $this;
    }

    /**
     * Gets sales_accossiate
     *
     * @return \SplititSdkClient\Model\SalesAssociates
     */
    public function getSalesAccossiate()
    {
        return $this->container['sales_accossiate'];
    }

    /**
     * Sets sales_accossiate
     *
     * @param \SplititSdkClient\Model\SalesAssociates $sales_accossiate sales_accossiate
     *
     * @return $this
     */
    public function setSalesAccossiate($sales_accossiate)
    {
        $this->container['sales_accossiate'] = $sales_accossiate;

        return $this;
    }

    /**
     * Gets api_users
     *
     * @return \SplititSdkClient\Model\ApiUsers
     */
    public function getApiUsers()
    {
        return $this->container['api_users'];
    }

    /**
     * Sets api_users
     *
     * @param \SplititSdkClient\Model\ApiUsers $api_users api_users
     *
     * @return $this
     */
    public function setApiUsers($api_users)
    {
        $this->container['api_users'] = $api_users;

        return $this;
    }

    /**
     * Gets agents
     *
     * @return \SplititSdkClient\Model\Agents[]
     */
    public function getAgents()
    {
        return $this->container['agents'];
    }

    /**
     * Sets agents
     *
     * @param \SplititSdkClient\Model\Agents[] $agents agents
     *
     * @return $this
     */
    public function setAgents($agents)
    {
        $this->container['agents'] = $agents;

        return $this;
    }

    /**
     * Gets installment_plan_events_subscription_datas
     *
     * @return \SplititSdkClient\Model\InstallmentPlanEventsSubscriptionDatas[]
     */
    public function getInstallmentPlanEventsSubscriptionDatas()
    {
        return $this->container['installment_plan_events_subscription_datas'];
    }

    /**
     * Sets installment_plan_events_subscription_datas
     *
     * @param \SplititSdkClient\Model\InstallmentPlanEventsSubscriptionDatas[] $installment_plan_events_subscription_datas installment_plan_events_subscription_datas
     *
     * @return $this
     */
    public function setInstallmentPlanEventsSubscriptionDatas($installment_plan_events_subscription_datas)
    {
        $this->container['installment_plan_events_subscription_datas'] = $installment_plan_events_subscription_datas;

        return $this;
    }

    /**
     * Gets terminals
     *
     * @return \SplititSdkClient\Model\Terminals[]
     */
    public function getTerminals()
    {
        return $this->container['terminals'];
    }

    /**
     * Sets terminals
     *
     * @param \SplititSdkClient\Model\Terminals[] $terminals terminals
     *
     * @return $this
     */
    public function setTerminals($terminals)
    {
        $this->container['terminals'] = $terminals;

        return $this;
    }

    /**
     * Gets touch_point_color_values
     *
     * @return \SplititSdkClient\Model\TouchPointColorValues[]
     */
    public function getTouchPointColorValues()
    {
        return $this->container['touch_point_color_values'];
    }

    /**
     * Sets touch_point_color_values
     *
     * @param \SplititSdkClient\Model\TouchPointColorValues[] $touch_point_color_values touch_point_color_values
     *
     * @return $this
     */
    public function setTouchPointColorValues($touch_point_color_values)
    {
        $this->container['touch_point_color_values'] = $touch_point_color_values;

        return $this;
    }

    /**
     * Gets is_test
     *
     * @return bool
     */
    public function getIsTest()
    {
        return $this->container['is_test'];
    }

    /**
     * Sets is_test
     *
     * @param bool $is_test is_test
     *
     * @return $this
     */
    public function setIsTest($is_test)
    {
        $this->container['is_test'] = $is_test;

        return $this;
    }

    /**
     * Gets marked_for_deletion
     *
     * @return bool
     */
    public function getMarkedForDeletion()
    {
        return $this->container['marked_for_deletion'];
    }

    /**
     * Sets marked_for_deletion
     *
     * @param bool $marked_for_deletion marked_for_deletion
     *
     * @return $this
     */
    public function setMarkedForDeletion($marked_for_deletion)
    {
        $this->container['marked_for_deletion'] = $marked_for_deletion;

        return $this;
    }

    /**
     * Gets registered_country_of_business
     *
     * @return \SplititSdkClient\Model\CountryState
     */
    public function getRegisteredCountryOfBusiness()
    {
        return $this->container['registered_country_of_business'];
    }

    /**
     * Sets registered_country_of_business
     *
     * @param \SplititSdkClient\Model\CountryState $registered_country_of_business registered_country_of_business
     *
     * @return $this
     */
    public function setRegisteredCountryOfBusiness($registered_country_of_business)
    {
        $this->container['registered_country_of_business'] = $registered_country_of_business;

        return $this;
    }

    /**
     * Gets merchant_country
     *
     * @return \SplititSdkClient\Model\CountryState
     */
    public function getMerchantCountry()
    {
        return $this->container['merchant_country'];
    }

    /**
     * Sets merchant_country
     *
     * @param \SplititSdkClient\Model\CountryState $merchant_country merchant_country
     *
     * @return $this
     */
    public function setMerchantCountry($merchant_country)
    {
        $this->container['merchant_country'] = $merchant_country;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \SplititSdkClient\Model\MerchantStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \SplititSdkClient\Model\MerchantStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets vertical
     *
     * @return object
     */
    public function getVertical()
    {
        return $this->container['vertical'];
    }

    /**
     * Sets vertical
     *
     * @param object $vertical vertical
     *
     * @return $this
     */
    public function setVertical($vertical)
    {
        $this->container['vertical'] = $vertical;

        return $this;
    }

    /**
     * Gets bank_details
     *
     * @return \SplititSdkClient\Model\BankDetails
     */
    public function getBankDetails()
    {
        return $this->container['bank_details'];
    }

    /**
     * Sets bank_details
     *
     * @param \SplititSdkClient\Model\BankDetails $bank_details bank_details
     *
     * @return $this
     */
    public function setBankDetails($bank_details)
    {
        $this->container['bank_details'] = $bank_details;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \SplititSdkClient\Model\AddressData2
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \SplititSdkClient\Model\AddressData2 $billing_address billing_address
     *
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \SplititSdkClient\Model\Countries
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \SplititSdkClient\Model\Countries $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \SplititSdkClient\Model\CountrySubdivisions
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \SplititSdkClient\Model\CountrySubdivisions $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets splitit_signing_entity
     *
     * @return \SplititSdkClient\Model\SplititEntity
     */
    public function getSplititSigningEntity()
    {
        return $this->container['splitit_signing_entity'];
    }

    /**
     * Sets splitit_signing_entity
     *
     * @param \SplititSdkClient\Model\SplititEntity $splitit_signing_entity splitit_signing_entity
     *
     * @return $this
     */
    public function setSplititSigningEntity($splitit_signing_entity)
    {
        $this->container['splitit_signing_entity'] = $splitit_signing_entity;

        return $this;
    }

    /**
     * Gets splitit_current_entity
     *
     * @return \SplititSdkClient\Model\SplititEntity
     */
    public function getSplititCurrentEntity()
    {
        return $this->container['splitit_current_entity'];
    }

    /**
     * Sets splitit_current_entity
     *
     * @param \SplititSdkClient\Model\SplititEntity $splitit_current_entity splitit_current_entity
     *
     * @return $this
     */
    public function setSplititCurrentEntity($splitit_current_entity)
    {
        $this->container['splitit_current_entity'] = $splitit_current_entity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


