<?php
/**
 * InstallmentPlanSetupContexts
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * InstallmentPlanSetupContexts Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InstallmentPlanSetupContexts implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstallmentPlanSetupContexts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'public_installment_plan_session' => 'string',
        'billing_address_address_line' => 'string',
        'billing_address_zip' => 'string',
        'billing_address_address_line2' => 'string',
        'billing_address_city' => 'string',
        'requested_number_of_installments' => 'string',
        'success_exit_url' => 'string',
        'error_exit_url' => 'string',
        'cancel_exit_url' => 'string',
        'ab_test_query_string' => 'string',
        'requested_first_installment_amount' => 'float',
        'requested_first_scheduled_installment_date' => '\DateTime',
        'send_shopper_approval_request' => '\DateTime',
        'send_shopper_payment_request' => '\DateTime',
        'requested_capture_on_creation' => 'bool',
        'billing_address_country_id' => 'int',
        'suggested_payment_tp_id' => 'int',
        'ab_testing_session_id' => 'int',
        'default_num_of_installments' => 'int',
        'billing_address_state_id' => 'int',
        'billing_address_legacy_full_address_line' => 'string',
        'requested_funding' => 'bool',
        'success_async_url' => 'string',
        'attempt3_dsecure' => 'bool',
        'view_name' => 'string',
        'is_opened_in_iframe' => 'bool',
        'is3d_secure_in_popup' => 'bool',
        'external_auth_unique_gateway_id' => 'string',
        'external_amount_details' => 'float',
        'external_auth_date' => '\DateTime',
        'external_auth_transaction_log' => 'string',
        'payment_approval_phone' => 'string',
        'payment_approval_email' => 'string',
        'payment_message' => 'string',
        'terms_and_conditions_key' => 'string',
        'finger_print_id' => 'string',
        'request_update_card_phone' => 'string',
        'request_update_card_email' => 'string',
        'request_update_card_time' => '\DateTime',
        'billing_address_first_time_populated_by' => 'string',
        'country' => '\SplititSdkClient\Model\Countries',
        'state' => '\SplititSdkClient\Model\CountrySubdivisions',
        'ab_testing_session' => '\SplititSdkClient\Model\PaymentFormTPABTestingDefinition',
        'suggested_payment_tp' => '\SplititSdkClient\Model\VersionedTouchPoints',
        'installment_plans' => '\SplititSdkClient\Model\InstallmentPlans[]',
        'requested_strategy' => '\SplititSdkClient\Model\PlanStrategy',
        'billing_address' => '\SplititSdkClient\Model\AddressData2'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'public_installment_plan_session' => null,
        'billing_address_address_line' => null,
        'billing_address_zip' => null,
        'billing_address_address_line2' => null,
        'billing_address_city' => null,
        'requested_number_of_installments' => null,
        'success_exit_url' => null,
        'error_exit_url' => null,
        'cancel_exit_url' => null,
        'ab_test_query_string' => null,
        'requested_first_installment_amount' => 'decimal',
        'requested_first_scheduled_installment_date' => 'date-time',
        'send_shopper_approval_request' => 'date-time',
        'send_shopper_payment_request' => 'date-time',
        'requested_capture_on_creation' => null,
        'billing_address_country_id' => 'int64',
        'suggested_payment_tp_id' => 'int64',
        'ab_testing_session_id' => 'int64',
        'default_num_of_installments' => 'int32',
        'billing_address_state_id' => 'int64',
        'billing_address_legacy_full_address_line' => null,
        'requested_funding' => null,
        'success_async_url' => null,
        'attempt3_dsecure' => null,
        'view_name' => null,
        'is_opened_in_iframe' => null,
        'is3d_secure_in_popup' => null,
        'external_auth_unique_gateway_id' => null,
        'external_amount_details' => 'decimal',
        'external_auth_date' => 'date-time',
        'external_auth_transaction_log' => null,
        'payment_approval_phone' => null,
        'payment_approval_email' => null,
        'payment_message' => null,
        'terms_and_conditions_key' => null,
        'finger_print_id' => null,
        'request_update_card_phone' => null,
        'request_update_card_email' => null,
        'request_update_card_time' => 'date-time',
        'billing_address_first_time_populated_by' => null,
        'country' => null,
        'state' => null,
        'ab_testing_session' => null,
        'suggested_payment_tp' => null,
        'installment_plans' => null,
        'requested_strategy' => null,
        'billing_address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'public_installment_plan_session' => 'PublicInstallmentPlanSession',
        'billing_address_address_line' => 'BillingAddressAddressLine',
        'billing_address_zip' => 'BillingAddressZip',
        'billing_address_address_line2' => 'BillingAddressAddressLine2',
        'billing_address_city' => 'BillingAddressCity',
        'requested_number_of_installments' => 'RequestedNumberOfInstallments',
        'success_exit_url' => 'SuccessExitUrl',
        'error_exit_url' => 'ErrorExitUrl',
        'cancel_exit_url' => 'CancelExitUrl',
        'ab_test_query_string' => 'AbTestQueryString',
        'requested_first_installment_amount' => 'RequestedFirstInstallmentAmount',
        'requested_first_scheduled_installment_date' => 'RequestedFirstScheduledInstallmentDate',
        'send_shopper_approval_request' => 'SendShopperApprovalRequest',
        'send_shopper_payment_request' => 'SendShopperPaymentRequest',
        'requested_capture_on_creation' => 'RequestedCaptureOnCreation',
        'billing_address_country_id' => 'BillingAddressCountryId',
        'suggested_payment_tp_id' => 'SuggestedPaymentTPId',
        'ab_testing_session_id' => 'ABTestingSessionId',
        'default_num_of_installments' => 'DefaultNumOfInstallments',
        'billing_address_state_id' => 'BillingAddressStateId',
        'billing_address_legacy_full_address_line' => 'BillingAddressLegacyFullAddressLine',
        'requested_funding' => 'RequestedFunding',
        'success_async_url' => 'SuccessAsyncUrl',
        'attempt3_dsecure' => 'Attempt3Dsecure',
        'view_name' => 'ViewName',
        'is_opened_in_iframe' => 'IsOpenedInIframe',
        'is3d_secure_in_popup' => 'Is3dSecureInPopup',
        'external_auth_unique_gateway_id' => 'ExternalAuthUniqueGatewayId',
        'external_amount_details' => 'ExternalAmountDetails',
        'external_auth_date' => 'ExternalAuthDate',
        'external_auth_transaction_log' => 'ExternalAuthTransactionLog',
        'payment_approval_phone' => 'PaymentApprovalPhone',
        'payment_approval_email' => 'PaymentApprovalEmail',
        'payment_message' => 'PaymentMessage',
        'terms_and_conditions_key' => 'TermsAndConditionsKey',
        'finger_print_id' => 'FingerPrintId',
        'request_update_card_phone' => 'RequestUpdateCardPhone',
        'request_update_card_email' => 'RequestUpdateCardEmail',
        'request_update_card_time' => 'RequestUpdateCardTime',
        'billing_address_first_time_populated_by' => 'BillingAddressFirstTimePopulatedBy',
        'country' => 'Country',
        'state' => 'State',
        'ab_testing_session' => 'ABTestingSession',
        'suggested_payment_tp' => 'SuggestedPaymentTP',
        'installment_plans' => 'InstallmentPlans',
        'requested_strategy' => 'RequestedStrategy',
        'billing_address' => 'BillingAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'public_installment_plan_session' => 'setPublicInstallmentPlanSession',
        'billing_address_address_line' => 'setBillingAddressAddressLine',
        'billing_address_zip' => 'setBillingAddressZip',
        'billing_address_address_line2' => 'setBillingAddressAddressLine2',
        'billing_address_city' => 'setBillingAddressCity',
        'requested_number_of_installments' => 'setRequestedNumberOfInstallments',
        'success_exit_url' => 'setSuccessExitUrl',
        'error_exit_url' => 'setErrorExitUrl',
        'cancel_exit_url' => 'setCancelExitUrl',
        'ab_test_query_string' => 'setAbTestQueryString',
        'requested_first_installment_amount' => 'setRequestedFirstInstallmentAmount',
        'requested_first_scheduled_installment_date' => 'setRequestedFirstScheduledInstallmentDate',
        'send_shopper_approval_request' => 'setSendShopperApprovalRequest',
        'send_shopper_payment_request' => 'setSendShopperPaymentRequest',
        'requested_capture_on_creation' => 'setRequestedCaptureOnCreation',
        'billing_address_country_id' => 'setBillingAddressCountryId',
        'suggested_payment_tp_id' => 'setSuggestedPaymentTpId',
        'ab_testing_session_id' => 'setAbTestingSessionId',
        'default_num_of_installments' => 'setDefaultNumOfInstallments',
        'billing_address_state_id' => 'setBillingAddressStateId',
        'billing_address_legacy_full_address_line' => 'setBillingAddressLegacyFullAddressLine',
        'requested_funding' => 'setRequestedFunding',
        'success_async_url' => 'setSuccessAsyncUrl',
        'attempt3_dsecure' => 'setAttempt3Dsecure',
        'view_name' => 'setViewName',
        'is_opened_in_iframe' => 'setIsOpenedInIframe',
        'is3d_secure_in_popup' => 'setIs3dSecureInPopup',
        'external_auth_unique_gateway_id' => 'setExternalAuthUniqueGatewayId',
        'external_amount_details' => 'setExternalAmountDetails',
        'external_auth_date' => 'setExternalAuthDate',
        'external_auth_transaction_log' => 'setExternalAuthTransactionLog',
        'payment_approval_phone' => 'setPaymentApprovalPhone',
        'payment_approval_email' => 'setPaymentApprovalEmail',
        'payment_message' => 'setPaymentMessage',
        'terms_and_conditions_key' => 'setTermsAndConditionsKey',
        'finger_print_id' => 'setFingerPrintId',
        'request_update_card_phone' => 'setRequestUpdateCardPhone',
        'request_update_card_email' => 'setRequestUpdateCardEmail',
        'request_update_card_time' => 'setRequestUpdateCardTime',
        'billing_address_first_time_populated_by' => 'setBillingAddressFirstTimePopulatedBy',
        'country' => 'setCountry',
        'state' => 'setState',
        'ab_testing_session' => 'setAbTestingSession',
        'suggested_payment_tp' => 'setSuggestedPaymentTp',
        'installment_plans' => 'setInstallmentPlans',
        'requested_strategy' => 'setRequestedStrategy',
        'billing_address' => 'setBillingAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'public_installment_plan_session' => 'getPublicInstallmentPlanSession',
        'billing_address_address_line' => 'getBillingAddressAddressLine',
        'billing_address_zip' => 'getBillingAddressZip',
        'billing_address_address_line2' => 'getBillingAddressAddressLine2',
        'billing_address_city' => 'getBillingAddressCity',
        'requested_number_of_installments' => 'getRequestedNumberOfInstallments',
        'success_exit_url' => 'getSuccessExitUrl',
        'error_exit_url' => 'getErrorExitUrl',
        'cancel_exit_url' => 'getCancelExitUrl',
        'ab_test_query_string' => 'getAbTestQueryString',
        'requested_first_installment_amount' => 'getRequestedFirstInstallmentAmount',
        'requested_first_scheduled_installment_date' => 'getRequestedFirstScheduledInstallmentDate',
        'send_shopper_approval_request' => 'getSendShopperApprovalRequest',
        'send_shopper_payment_request' => 'getSendShopperPaymentRequest',
        'requested_capture_on_creation' => 'getRequestedCaptureOnCreation',
        'billing_address_country_id' => 'getBillingAddressCountryId',
        'suggested_payment_tp_id' => 'getSuggestedPaymentTpId',
        'ab_testing_session_id' => 'getAbTestingSessionId',
        'default_num_of_installments' => 'getDefaultNumOfInstallments',
        'billing_address_state_id' => 'getBillingAddressStateId',
        'billing_address_legacy_full_address_line' => 'getBillingAddressLegacyFullAddressLine',
        'requested_funding' => 'getRequestedFunding',
        'success_async_url' => 'getSuccessAsyncUrl',
        'attempt3_dsecure' => 'getAttempt3Dsecure',
        'view_name' => 'getViewName',
        'is_opened_in_iframe' => 'getIsOpenedInIframe',
        'is3d_secure_in_popup' => 'getIs3dSecureInPopup',
        'external_auth_unique_gateway_id' => 'getExternalAuthUniqueGatewayId',
        'external_amount_details' => 'getExternalAmountDetails',
        'external_auth_date' => 'getExternalAuthDate',
        'external_auth_transaction_log' => 'getExternalAuthTransactionLog',
        'payment_approval_phone' => 'getPaymentApprovalPhone',
        'payment_approval_email' => 'getPaymentApprovalEmail',
        'payment_message' => 'getPaymentMessage',
        'terms_and_conditions_key' => 'getTermsAndConditionsKey',
        'finger_print_id' => 'getFingerPrintId',
        'request_update_card_phone' => 'getRequestUpdateCardPhone',
        'request_update_card_email' => 'getRequestUpdateCardEmail',
        'request_update_card_time' => 'getRequestUpdateCardTime',
        'billing_address_first_time_populated_by' => 'getBillingAddressFirstTimePopulatedBy',
        'country' => 'getCountry',
        'state' => 'getState',
        'ab_testing_session' => 'getAbTestingSession',
        'suggested_payment_tp' => 'getSuggestedPaymentTp',
        'installment_plans' => 'getInstallmentPlans',
        'requested_strategy' => 'getRequestedStrategy',
        'billing_address' => 'getBillingAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['public_installment_plan_session'] = isset($data['public_installment_plan_session']) ? $data['public_installment_plan_session'] : null;
        $this->container['billing_address_address_line'] = isset($data['billing_address_address_line']) ? $data['billing_address_address_line'] : null;
        $this->container['billing_address_zip'] = isset($data['billing_address_zip']) ? $data['billing_address_zip'] : null;
        $this->container['billing_address_address_line2'] = isset($data['billing_address_address_line2']) ? $data['billing_address_address_line2'] : null;
        $this->container['billing_address_city'] = isset($data['billing_address_city']) ? $data['billing_address_city'] : null;
        $this->container['requested_number_of_installments'] = isset($data['requested_number_of_installments']) ? $data['requested_number_of_installments'] : null;
        $this->container['success_exit_url'] = isset($data['success_exit_url']) ? $data['success_exit_url'] : null;
        $this->container['error_exit_url'] = isset($data['error_exit_url']) ? $data['error_exit_url'] : null;
        $this->container['cancel_exit_url'] = isset($data['cancel_exit_url']) ? $data['cancel_exit_url'] : null;
        $this->container['ab_test_query_string'] = isset($data['ab_test_query_string']) ? $data['ab_test_query_string'] : null;
        $this->container['requested_first_installment_amount'] = isset($data['requested_first_installment_amount']) ? $data['requested_first_installment_amount'] : null;
        $this->container['requested_first_scheduled_installment_date'] = isset($data['requested_first_scheduled_installment_date']) ? $data['requested_first_scheduled_installment_date'] : null;
        $this->container['send_shopper_approval_request'] = isset($data['send_shopper_approval_request']) ? $data['send_shopper_approval_request'] : null;
        $this->container['send_shopper_payment_request'] = isset($data['send_shopper_payment_request']) ? $data['send_shopper_payment_request'] : null;
        $this->container['requested_capture_on_creation'] = isset($data['requested_capture_on_creation']) ? $data['requested_capture_on_creation'] : null;
        $this->container['billing_address_country_id'] = isset($data['billing_address_country_id']) ? $data['billing_address_country_id'] : null;
        $this->container['suggested_payment_tp_id'] = isset($data['suggested_payment_tp_id']) ? $data['suggested_payment_tp_id'] : null;
        $this->container['ab_testing_session_id'] = isset($data['ab_testing_session_id']) ? $data['ab_testing_session_id'] : null;
        $this->container['default_num_of_installments'] = isset($data['default_num_of_installments']) ? $data['default_num_of_installments'] : null;
        $this->container['billing_address_state_id'] = isset($data['billing_address_state_id']) ? $data['billing_address_state_id'] : null;
        $this->container['billing_address_legacy_full_address_line'] = isset($data['billing_address_legacy_full_address_line']) ? $data['billing_address_legacy_full_address_line'] : null;
        $this->container['requested_funding'] = isset($data['requested_funding']) ? $data['requested_funding'] : null;
        $this->container['success_async_url'] = isset($data['success_async_url']) ? $data['success_async_url'] : null;
        $this->container['attempt3_dsecure'] = isset($data['attempt3_dsecure']) ? $data['attempt3_dsecure'] : null;
        $this->container['view_name'] = isset($data['view_name']) ? $data['view_name'] : null;
        $this->container['is_opened_in_iframe'] = isset($data['is_opened_in_iframe']) ? $data['is_opened_in_iframe'] : null;
        $this->container['is3d_secure_in_popup'] = isset($data['is3d_secure_in_popup']) ? $data['is3d_secure_in_popup'] : null;
        $this->container['external_auth_unique_gateway_id'] = isset($data['external_auth_unique_gateway_id']) ? $data['external_auth_unique_gateway_id'] : null;
        $this->container['external_amount_details'] = isset($data['external_amount_details']) ? $data['external_amount_details'] : null;
        $this->container['external_auth_date'] = isset($data['external_auth_date']) ? $data['external_auth_date'] : null;
        $this->container['external_auth_transaction_log'] = isset($data['external_auth_transaction_log']) ? $data['external_auth_transaction_log'] : null;
        $this->container['payment_approval_phone'] = isset($data['payment_approval_phone']) ? $data['payment_approval_phone'] : null;
        $this->container['payment_approval_email'] = isset($data['payment_approval_email']) ? $data['payment_approval_email'] : null;
        $this->container['payment_message'] = isset($data['payment_message']) ? $data['payment_message'] : null;
        $this->container['terms_and_conditions_key'] = isset($data['terms_and_conditions_key']) ? $data['terms_and_conditions_key'] : null;
        $this->container['finger_print_id'] = isset($data['finger_print_id']) ? $data['finger_print_id'] : null;
        $this->container['request_update_card_phone'] = isset($data['request_update_card_phone']) ? $data['request_update_card_phone'] : null;
        $this->container['request_update_card_email'] = isset($data['request_update_card_email']) ? $data['request_update_card_email'] : null;
        $this->container['request_update_card_time'] = isset($data['request_update_card_time']) ? $data['request_update_card_time'] : null;
        $this->container['billing_address_first_time_populated_by'] = isset($data['billing_address_first_time_populated_by']) ? $data['billing_address_first_time_populated_by'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['ab_testing_session'] = isset($data['ab_testing_session']) ? $data['ab_testing_session'] : null;
        $this->container['suggested_payment_tp'] = isset($data['suggested_payment_tp']) ? $data['suggested_payment_tp'] : null;
        $this->container['installment_plans'] = isset($data['installment_plans']) ? $data['installment_plans'] : null;
        $this->container['requested_strategy'] = isset($data['requested_strategy']) ? $data['requested_strategy'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['requested_first_installment_amount'] === null) {
            $invalidProperties[] = "'requested_first_installment_amount' can't be null";
        }
        if ($this->container['default_num_of_installments'] === null) {
            $invalidProperties[] = "'default_num_of_installments' can't be null";
        }
        if ($this->container['is_opened_in_iframe'] === null) {
            $invalidProperties[] = "'is_opened_in_iframe' can't be null";
        }
        if ($this->container['external_amount_details'] === null) {
            $invalidProperties[] = "'external_amount_details' can't be null";
        }
        if ($this->container['external_auth_date'] === null) {
            $invalidProperties[] = "'external_auth_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets public_installment_plan_session
     *
     * @return string
     */
    public function getPublicInstallmentPlanSession()
    {
        return $this->container['public_installment_plan_session'];
    }

    /**
     * Sets public_installment_plan_session
     *
     * @param string $public_installment_plan_session public_installment_plan_session
     *
     * @return $this
     */
    public function setPublicInstallmentPlanSession($public_installment_plan_session)
    {
        $this->container['public_installment_plan_session'] = $public_installment_plan_session;

        return $this;
    }

    /**
     * Gets billing_address_address_line
     *
     * @return string
     */
    public function getBillingAddressAddressLine()
    {
        return $this->container['billing_address_address_line'];
    }

    /**
     * Sets billing_address_address_line
     *
     * @param string $billing_address_address_line billing_address_address_line
     *
     * @return $this
     */
    public function setBillingAddressAddressLine($billing_address_address_line)
    {
        $this->container['billing_address_address_line'] = $billing_address_address_line;

        return $this;
    }

    /**
     * Gets billing_address_zip
     *
     * @return string
     */
    public function getBillingAddressZip()
    {
        return $this->container['billing_address_zip'];
    }

    /**
     * Sets billing_address_zip
     *
     * @param string $billing_address_zip billing_address_zip
     *
     * @return $this
     */
    public function setBillingAddressZip($billing_address_zip)
    {
        $this->container['billing_address_zip'] = $billing_address_zip;

        return $this;
    }

    /**
     * Gets billing_address_address_line2
     *
     * @return string
     */
    public function getBillingAddressAddressLine2()
    {
        return $this->container['billing_address_address_line2'];
    }

    /**
     * Sets billing_address_address_line2
     *
     * @param string $billing_address_address_line2 billing_address_address_line2
     *
     * @return $this
     */
    public function setBillingAddressAddressLine2($billing_address_address_line2)
    {
        $this->container['billing_address_address_line2'] = $billing_address_address_line2;

        return $this;
    }

    /**
     * Gets billing_address_city
     *
     * @return string
     */
    public function getBillingAddressCity()
    {
        return $this->container['billing_address_city'];
    }

    /**
     * Sets billing_address_city
     *
     * @param string $billing_address_city billing_address_city
     *
     * @return $this
     */
    public function setBillingAddressCity($billing_address_city)
    {
        $this->container['billing_address_city'] = $billing_address_city;

        return $this;
    }

    /**
     * Gets requested_number_of_installments
     *
     * @return string
     */
    public function getRequestedNumberOfInstallments()
    {
        return $this->container['requested_number_of_installments'];
    }

    /**
     * Sets requested_number_of_installments
     *
     * @param string $requested_number_of_installments requested_number_of_installments
     *
     * @return $this
     */
    public function setRequestedNumberOfInstallments($requested_number_of_installments)
    {
        $this->container['requested_number_of_installments'] = $requested_number_of_installments;

        return $this;
    }

    /**
     * Gets success_exit_url
     *
     * @return string
     */
    public function getSuccessExitUrl()
    {
        return $this->container['success_exit_url'];
    }

    /**
     * Sets success_exit_url
     *
     * @param string $success_exit_url success_exit_url
     *
     * @return $this
     */
    public function setSuccessExitUrl($success_exit_url)
    {
        $this->container['success_exit_url'] = $success_exit_url;

        return $this;
    }

    /**
     * Gets error_exit_url
     *
     * @return string
     */
    public function getErrorExitUrl()
    {
        return $this->container['error_exit_url'];
    }

    /**
     * Sets error_exit_url
     *
     * @param string $error_exit_url error_exit_url
     *
     * @return $this
     */
    public function setErrorExitUrl($error_exit_url)
    {
        $this->container['error_exit_url'] = $error_exit_url;

        return $this;
    }

    /**
     * Gets cancel_exit_url
     *
     * @return string
     */
    public function getCancelExitUrl()
    {
        return $this->container['cancel_exit_url'];
    }

    /**
     * Sets cancel_exit_url
     *
     * @param string $cancel_exit_url cancel_exit_url
     *
     * @return $this
     */
    public function setCancelExitUrl($cancel_exit_url)
    {
        $this->container['cancel_exit_url'] = $cancel_exit_url;

        return $this;
    }

    /**
     * Gets ab_test_query_string
     *
     * @return string
     */
    public function getAbTestQueryString()
    {
        return $this->container['ab_test_query_string'];
    }

    /**
     * Sets ab_test_query_string
     *
     * @param string $ab_test_query_string ab_test_query_string
     *
     * @return $this
     */
    public function setAbTestQueryString($ab_test_query_string)
    {
        $this->container['ab_test_query_string'] = $ab_test_query_string;

        return $this;
    }

    /**
     * Gets requested_first_installment_amount
     *
     * @return float
     */
    public function getRequestedFirstInstallmentAmount()
    {
        return $this->container['requested_first_installment_amount'];
    }

    /**
     * Sets requested_first_installment_amount
     *
     * @param float $requested_first_installment_amount requested_first_installment_amount
     *
     * @return $this
     */
    public function setRequestedFirstInstallmentAmount($requested_first_installment_amount)
    {
        $this->container['requested_first_installment_amount'] = $requested_first_installment_amount;

        return $this;
    }

    /**
     * Gets requested_first_scheduled_installment_date
     *
     * @return \DateTime
     */
    public function getRequestedFirstScheduledInstallmentDate()
    {
        return $this->container['requested_first_scheduled_installment_date'];
    }

    /**
     * Sets requested_first_scheduled_installment_date
     *
     * @param \DateTime $requested_first_scheduled_installment_date requested_first_scheduled_installment_date
     *
     * @return $this
     */
    public function setRequestedFirstScheduledInstallmentDate($requested_first_scheduled_installment_date)
    {
        $this->container['requested_first_scheduled_installment_date'] = $requested_first_scheduled_installment_date;

        return $this;
    }

    /**
     * Gets send_shopper_approval_request
     *
     * @return \DateTime
     */
    public function getSendShopperApprovalRequest()
    {
        return $this->container['send_shopper_approval_request'];
    }

    /**
     * Sets send_shopper_approval_request
     *
     * @param \DateTime $send_shopper_approval_request send_shopper_approval_request
     *
     * @return $this
     */
    public function setSendShopperApprovalRequest($send_shopper_approval_request)
    {
        $this->container['send_shopper_approval_request'] = $send_shopper_approval_request;

        return $this;
    }

    /**
     * Gets send_shopper_payment_request
     *
     * @return \DateTime
     */
    public function getSendShopperPaymentRequest()
    {
        return $this->container['send_shopper_payment_request'];
    }

    /**
     * Sets send_shopper_payment_request
     *
     * @param \DateTime $send_shopper_payment_request send_shopper_payment_request
     *
     * @return $this
     */
    public function setSendShopperPaymentRequest($send_shopper_payment_request)
    {
        $this->container['send_shopper_payment_request'] = $send_shopper_payment_request;

        return $this;
    }

    /**
     * Gets requested_capture_on_creation
     *
     * @return bool
     */
    public function getRequestedCaptureOnCreation()
    {
        return $this->container['requested_capture_on_creation'];
    }

    /**
     * Sets requested_capture_on_creation
     *
     * @param bool $requested_capture_on_creation requested_capture_on_creation
     *
     * @return $this
     */
    public function setRequestedCaptureOnCreation($requested_capture_on_creation)
    {
        $this->container['requested_capture_on_creation'] = $requested_capture_on_creation;

        return $this;
    }

    /**
     * Gets billing_address_country_id
     *
     * @return int
     */
    public function getBillingAddressCountryId()
    {
        return $this->container['billing_address_country_id'];
    }

    /**
     * Sets billing_address_country_id
     *
     * @param int $billing_address_country_id billing_address_country_id
     *
     * @return $this
     */
    public function setBillingAddressCountryId($billing_address_country_id)
    {
        $this->container['billing_address_country_id'] = $billing_address_country_id;

        return $this;
    }

    /**
     * Gets suggested_payment_tp_id
     *
     * @return int
     */
    public function getSuggestedPaymentTpId()
    {
        return $this->container['suggested_payment_tp_id'];
    }

    /**
     * Sets suggested_payment_tp_id
     *
     * @param int $suggested_payment_tp_id suggested_payment_tp_id
     *
     * @return $this
     */
    public function setSuggestedPaymentTpId($suggested_payment_tp_id)
    {
        $this->container['suggested_payment_tp_id'] = $suggested_payment_tp_id;

        return $this;
    }

    /**
     * Gets ab_testing_session_id
     *
     * @return int
     */
    public function getAbTestingSessionId()
    {
        return $this->container['ab_testing_session_id'];
    }

    /**
     * Sets ab_testing_session_id
     *
     * @param int $ab_testing_session_id ab_testing_session_id
     *
     * @return $this
     */
    public function setAbTestingSessionId($ab_testing_session_id)
    {
        $this->container['ab_testing_session_id'] = $ab_testing_session_id;

        return $this;
    }

    /**
     * Gets default_num_of_installments
     *
     * @return int
     */
    public function getDefaultNumOfInstallments()
    {
        return $this->container['default_num_of_installments'];
    }

    /**
     * Sets default_num_of_installments
     *
     * @param int $default_num_of_installments default_num_of_installments
     *
     * @return $this
     */
    public function setDefaultNumOfInstallments($default_num_of_installments)
    {
        $this->container['default_num_of_installments'] = $default_num_of_installments;

        return $this;
    }

    /**
     * Gets billing_address_state_id
     *
     * @return int
     */
    public function getBillingAddressStateId()
    {
        return $this->container['billing_address_state_id'];
    }

    /**
     * Sets billing_address_state_id
     *
     * @param int $billing_address_state_id billing_address_state_id
     *
     * @return $this
     */
    public function setBillingAddressStateId($billing_address_state_id)
    {
        $this->container['billing_address_state_id'] = $billing_address_state_id;

        return $this;
    }

    /**
     * Gets billing_address_legacy_full_address_line
     *
     * @return string
     */
    public function getBillingAddressLegacyFullAddressLine()
    {
        return $this->container['billing_address_legacy_full_address_line'];
    }

    /**
     * Sets billing_address_legacy_full_address_line
     *
     * @param string $billing_address_legacy_full_address_line billing_address_legacy_full_address_line
     *
     * @return $this
     */
    public function setBillingAddressLegacyFullAddressLine($billing_address_legacy_full_address_line)
    {
        $this->container['billing_address_legacy_full_address_line'] = $billing_address_legacy_full_address_line;

        return $this;
    }

    /**
     * Gets requested_funding
     *
     * @return bool
     */
    public function getRequestedFunding()
    {
        return $this->container['requested_funding'];
    }

    /**
     * Sets requested_funding
     *
     * @param bool $requested_funding requested_funding
     *
     * @return $this
     */
    public function setRequestedFunding($requested_funding)
    {
        $this->container['requested_funding'] = $requested_funding;

        return $this;
    }

    /**
     * Gets success_async_url
     *
     * @return string
     */
    public function getSuccessAsyncUrl()
    {
        return $this->container['success_async_url'];
    }

    /**
     * Sets success_async_url
     *
     * @param string $success_async_url success_async_url
     *
     * @return $this
     */
    public function setSuccessAsyncUrl($success_async_url)
    {
        $this->container['success_async_url'] = $success_async_url;

        return $this;
    }

    /**
     * Gets attempt3_dsecure
     *
     * @return bool
     */
    public function getAttempt3Dsecure()
    {
        return $this->container['attempt3_dsecure'];
    }

    /**
     * Sets attempt3_dsecure
     *
     * @param bool $attempt3_dsecure attempt3_dsecure
     *
     * @return $this
     */
    public function setAttempt3Dsecure($attempt3_dsecure)
    {
        $this->container['attempt3_dsecure'] = $attempt3_dsecure;

        return $this;
    }

    /**
     * Gets view_name
     *
     * @return string
     */
    public function getViewName()
    {
        return $this->container['view_name'];
    }

    /**
     * Sets view_name
     *
     * @param string $view_name view_name
     *
     * @return $this
     */
    public function setViewName($view_name)
    {
        $this->container['view_name'] = $view_name;

        return $this;
    }

    /**
     * Gets is_opened_in_iframe
     *
     * @return bool
     */
    public function getIsOpenedInIframe()
    {
        return $this->container['is_opened_in_iframe'];
    }

    /**
     * Sets is_opened_in_iframe
     *
     * @param bool $is_opened_in_iframe is_opened_in_iframe
     *
     * @return $this
     */
    public function setIsOpenedInIframe($is_opened_in_iframe)
    {
        $this->container['is_opened_in_iframe'] = $is_opened_in_iframe;

        return $this;
    }

    /**
     * Gets is3d_secure_in_popup
     *
     * @return bool
     */
    public function getIs3dSecureInPopup()
    {
        return $this->container['is3d_secure_in_popup'];
    }

    /**
     * Sets is3d_secure_in_popup
     *
     * @param bool $is3d_secure_in_popup is3d_secure_in_popup
     *
     * @return $this
     */
    public function setIs3dSecureInPopup($is3d_secure_in_popup)
    {
        $this->container['is3d_secure_in_popup'] = $is3d_secure_in_popup;

        return $this;
    }

    /**
     * Gets external_auth_unique_gateway_id
     *
     * @return string
     */
    public function getExternalAuthUniqueGatewayId()
    {
        return $this->container['external_auth_unique_gateway_id'];
    }

    /**
     * Sets external_auth_unique_gateway_id
     *
     * @param string $external_auth_unique_gateway_id external_auth_unique_gateway_id
     *
     * @return $this
     */
    public function setExternalAuthUniqueGatewayId($external_auth_unique_gateway_id)
    {
        $this->container['external_auth_unique_gateway_id'] = $external_auth_unique_gateway_id;

        return $this;
    }

    /**
     * Gets external_amount_details
     *
     * @return float
     */
    public function getExternalAmountDetails()
    {
        return $this->container['external_amount_details'];
    }

    /**
     * Sets external_amount_details
     *
     * @param float $external_amount_details external_amount_details
     *
     * @return $this
     */
    public function setExternalAmountDetails($external_amount_details)
    {
        $this->container['external_amount_details'] = $external_amount_details;

        return $this;
    }

    /**
     * Gets external_auth_date
     *
     * @return \DateTime
     */
    public function getExternalAuthDate()
    {
        return $this->container['external_auth_date'];
    }

    /**
     * Sets external_auth_date
     *
     * @param \DateTime $external_auth_date external_auth_date
     *
     * @return $this
     */
    public function setExternalAuthDate($external_auth_date)
    {
        $this->container['external_auth_date'] = $external_auth_date;

        return $this;
    }

    /**
     * Gets external_auth_transaction_log
     *
     * @return string
     */
    public function getExternalAuthTransactionLog()
    {
        return $this->container['external_auth_transaction_log'];
    }

    /**
     * Sets external_auth_transaction_log
     *
     * @param string $external_auth_transaction_log external_auth_transaction_log
     *
     * @return $this
     */
    public function setExternalAuthTransactionLog($external_auth_transaction_log)
    {
        $this->container['external_auth_transaction_log'] = $external_auth_transaction_log;

        return $this;
    }

    /**
     * Gets payment_approval_phone
     *
     * @return string
     */
    public function getPaymentApprovalPhone()
    {
        return $this->container['payment_approval_phone'];
    }

    /**
     * Sets payment_approval_phone
     *
     * @param string $payment_approval_phone payment_approval_phone
     *
     * @return $this
     */
    public function setPaymentApprovalPhone($payment_approval_phone)
    {
        $this->container['payment_approval_phone'] = $payment_approval_phone;

        return $this;
    }

    /**
     * Gets payment_approval_email
     *
     * @return string
     */
    public function getPaymentApprovalEmail()
    {
        return $this->container['payment_approval_email'];
    }

    /**
     * Sets payment_approval_email
     *
     * @param string $payment_approval_email payment_approval_email
     *
     * @return $this
     */
    public function setPaymentApprovalEmail($payment_approval_email)
    {
        $this->container['payment_approval_email'] = $payment_approval_email;

        return $this;
    }

    /**
     * Gets payment_message
     *
     * @return string
     */
    public function getPaymentMessage()
    {
        return $this->container['payment_message'];
    }

    /**
     * Sets payment_message
     *
     * @param string $payment_message payment_message
     *
     * @return $this
     */
    public function setPaymentMessage($payment_message)
    {
        $this->container['payment_message'] = $payment_message;

        return $this;
    }

    /**
     * Gets terms_and_conditions_key
     *
     * @return string
     */
    public function getTermsAndConditionsKey()
    {
        return $this->container['terms_and_conditions_key'];
    }

    /**
     * Sets terms_and_conditions_key
     *
     * @param string $terms_and_conditions_key terms_and_conditions_key
     *
     * @return $this
     */
    public function setTermsAndConditionsKey($terms_and_conditions_key)
    {
        $this->container['terms_and_conditions_key'] = $terms_and_conditions_key;

        return $this;
    }

    /**
     * Gets finger_print_id
     *
     * @return string
     */
    public function getFingerPrintId()
    {
        return $this->container['finger_print_id'];
    }

    /**
     * Sets finger_print_id
     *
     * @param string $finger_print_id finger_print_id
     *
     * @return $this
     */
    public function setFingerPrintId($finger_print_id)
    {
        $this->container['finger_print_id'] = $finger_print_id;

        return $this;
    }

    /**
     * Gets request_update_card_phone
     *
     * @return string
     */
    public function getRequestUpdateCardPhone()
    {
        return $this->container['request_update_card_phone'];
    }

    /**
     * Sets request_update_card_phone
     *
     * @param string $request_update_card_phone request_update_card_phone
     *
     * @return $this
     */
    public function setRequestUpdateCardPhone($request_update_card_phone)
    {
        $this->container['request_update_card_phone'] = $request_update_card_phone;

        return $this;
    }

    /**
     * Gets request_update_card_email
     *
     * @return string
     */
    public function getRequestUpdateCardEmail()
    {
        return $this->container['request_update_card_email'];
    }

    /**
     * Sets request_update_card_email
     *
     * @param string $request_update_card_email request_update_card_email
     *
     * @return $this
     */
    public function setRequestUpdateCardEmail($request_update_card_email)
    {
        $this->container['request_update_card_email'] = $request_update_card_email;

        return $this;
    }

    /**
     * Gets request_update_card_time
     *
     * @return \DateTime
     */
    public function getRequestUpdateCardTime()
    {
        return $this->container['request_update_card_time'];
    }

    /**
     * Sets request_update_card_time
     *
     * @param \DateTime $request_update_card_time request_update_card_time
     *
     * @return $this
     */
    public function setRequestUpdateCardTime($request_update_card_time)
    {
        $this->container['request_update_card_time'] = $request_update_card_time;

        return $this;
    }

    /**
     * Gets billing_address_first_time_populated_by
     *
     * @return string
     */
    public function getBillingAddressFirstTimePopulatedBy()
    {
        return $this->container['billing_address_first_time_populated_by'];
    }

    /**
     * Sets billing_address_first_time_populated_by
     *
     * @param string $billing_address_first_time_populated_by billing_address_first_time_populated_by
     *
     * @return $this
     */
    public function setBillingAddressFirstTimePopulatedBy($billing_address_first_time_populated_by)
    {
        $this->container['billing_address_first_time_populated_by'] = $billing_address_first_time_populated_by;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \SplititSdkClient\Model\Countries
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \SplititSdkClient\Model\Countries $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \SplititSdkClient\Model\CountrySubdivisions
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \SplititSdkClient\Model\CountrySubdivisions $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets ab_testing_session
     *
     * @return \SplititSdkClient\Model\PaymentFormTPABTestingDefinition
     */
    public function getAbTestingSession()
    {
        return $this->container['ab_testing_session'];
    }

    /**
     * Sets ab_testing_session
     *
     * @param \SplititSdkClient\Model\PaymentFormTPABTestingDefinition $ab_testing_session ab_testing_session
     *
     * @return $this
     */
    public function setAbTestingSession($ab_testing_session)
    {
        $this->container['ab_testing_session'] = $ab_testing_session;

        return $this;
    }

    /**
     * Gets suggested_payment_tp
     *
     * @return \SplititSdkClient\Model\VersionedTouchPoints
     */
    public function getSuggestedPaymentTp()
    {
        return $this->container['suggested_payment_tp'];
    }

    /**
     * Sets suggested_payment_tp
     *
     * @param \SplititSdkClient\Model\VersionedTouchPoints $suggested_payment_tp suggested_payment_tp
     *
     * @return $this
     */
    public function setSuggestedPaymentTp($suggested_payment_tp)
    {
        $this->container['suggested_payment_tp'] = $suggested_payment_tp;

        return $this;
    }

    /**
     * Gets installment_plans
     *
     * @return \SplititSdkClient\Model\InstallmentPlans[]
     */
    public function getInstallmentPlans()
    {
        return $this->container['installment_plans'];
    }

    /**
     * Sets installment_plans
     *
     * @param \SplititSdkClient\Model\InstallmentPlans[] $installment_plans installment_plans
     *
     * @return $this
     */
    public function setInstallmentPlans($installment_plans)
    {
        $this->container['installment_plans'] = $installment_plans;

        return $this;
    }

    /**
     * Gets requested_strategy
     *
     * @return \SplititSdkClient\Model\PlanStrategy
     */
    public function getRequestedStrategy()
    {
        return $this->container['requested_strategy'];
    }

    /**
     * Sets requested_strategy
     *
     * @param \SplititSdkClient\Model\PlanStrategy $requested_strategy requested_strategy
     *
     * @return $this
     */
    public function setRequestedStrategy($requested_strategy)
    {
        $this->container['requested_strategy'] = $requested_strategy;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \SplititSdkClient\Model\AddressData2
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \SplititSdkClient\Model\AddressData2 $billing_address billing_address
     *
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


