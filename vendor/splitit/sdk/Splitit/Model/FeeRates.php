<?php
/**
 * FeeRates
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * FeeRates Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FeeRates implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FeeRates';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'from' => 'int',
        'to' => 'int',
        'merchant_value' => 'float',
        'agent_value' => 'float',
        'fee_rate_collection_id' => 'int',
        'agent_fee_type' => '\SplititSdkClient\Model\AgentFeeType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'from' => 'int32',
        'to' => 'int32',
        'merchant_value' => 'decimal',
        'agent_value' => 'decimal',
        'fee_rate_collection_id' => 'int64',
        'agent_fee_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'from' => 'From',
        'to' => 'To',
        'merchant_value' => 'MerchantValue',
        'agent_value' => 'AgentValue',
        'fee_rate_collection_id' => 'FeeRateCollectionId',
        'agent_fee_type' => 'AgentFeeType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'from' => 'setFrom',
        'to' => 'setTo',
        'merchant_value' => 'setMerchantValue',
        'agent_value' => 'setAgentValue',
        'fee_rate_collection_id' => 'setFeeRateCollectionId',
        'agent_fee_type' => 'setAgentFeeType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'from' => 'getFrom',
        'to' => 'getTo',
        'merchant_value' => 'getMerchantValue',
        'agent_value' => 'getAgentValue',
        'fee_rate_collection_id' => 'getFeeRateCollectionId',
        'agent_fee_type' => 'getAgentFeeType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['merchant_value'] = isset($data['merchant_value']) ? $data['merchant_value'] : null;
        $this->container['agent_value'] = isset($data['agent_value']) ? $data['agent_value'] : null;
        $this->container['fee_rate_collection_id'] = isset($data['fee_rate_collection_id']) ? $data['fee_rate_collection_id'] : null;
        $this->container['agent_fee_type'] = isset($data['agent_fee_type']) ? $data['agent_fee_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['from'] === null) {
            $invalidProperties[] = "'from' can't be null";
        }
        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        if ($this->container['merchant_value'] === null) {
            $invalidProperties[] = "'merchant_value' can't be null";
        }
        if ($this->container['agent_value'] === null) {
            $invalidProperties[] = "'agent_value' can't be null";
        }
        if ($this->container['fee_rate_collection_id'] === null) {
            $invalidProperties[] = "'fee_rate_collection_id' can't be null";
        }
        if ($this->container['agent_fee_type'] === null) {
            $invalidProperties[] = "'agent_fee_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets from
     *
     * @return int
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param int $from from
     *
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return int
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param int $to to
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets merchant_value
     *
     * @return float
     */
    public function getMerchantValue()
    {
        return $this->container['merchant_value'];
    }

    /**
     * Sets merchant_value
     *
     * @param float $merchant_value merchant_value
     *
     * @return $this
     */
    public function setMerchantValue($merchant_value)
    {
        $this->container['merchant_value'] = $merchant_value;

        return $this;
    }

    /**
     * Gets agent_value
     *
     * @return float
     */
    public function getAgentValue()
    {
        return $this->container['agent_value'];
    }

    /**
     * Sets agent_value
     *
     * @param float $agent_value agent_value
     *
     * @return $this
     */
    public function setAgentValue($agent_value)
    {
        $this->container['agent_value'] = $agent_value;

        return $this;
    }

    /**
     * Gets fee_rate_collection_id
     *
     * @return int
     */
    public function getFeeRateCollectionId()
    {
        return $this->container['fee_rate_collection_id'];
    }

    /**
     * Sets fee_rate_collection_id
     *
     * @param int $fee_rate_collection_id fee_rate_collection_id
     *
     * @return $this
     */
    public function setFeeRateCollectionId($fee_rate_collection_id)
    {
        $this->container['fee_rate_collection_id'] = $fee_rate_collection_id;

        return $this;
    }

    /**
     * Gets agent_fee_type
     *
     * @return \SplititSdkClient\Model\AgentFeeType
     */
    public function getAgentFeeType()
    {
        return $this->container['agent_fee_type'];
    }

    /**
     * Sets agent_fee_type
     *
     * @param \SplititSdkClient\Model\AgentFeeType $agent_fee_type agent_fee_type
     *
     * @return $this
     */
    public function setAgentFeeType($agent_fee_type)
    {
        $this->container['agent_fee_type'] = $agent_fee_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


