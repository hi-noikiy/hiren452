<?php
/**
 * PisSessions
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * PisSessions Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PisSessions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PisSessions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'session_id' => 'string',
        'last_access_time' => '\DateTime',
        'user_id' => 'int',
        'user_unique_id' => 'string',
        'installment_plan_number' => 'string',
        'versioned_touch_point_id' => 'int',
        'session_valid_period_in_minutes' => 'int',
        'versioned_touch_point' => '\SplititSdkClient\Model\VersionedTouchPoints',
        'user_type' => '\SplititSdkClient\Model\UserType',
        'session_availibility' => '\SplititSdkClient\Model\SessionAvailibility'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'session_id' => null,
        'last_access_time' => 'date-time',
        'user_id' => 'int64',
        'user_unique_id' => null,
        'installment_plan_number' => null,
        'versioned_touch_point_id' => 'int64',
        'session_valid_period_in_minutes' => 'int32',
        'versioned_touch_point' => null,
        'user_type' => null,
        'session_availibility' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'session_id' => 'SessionId',
        'last_access_time' => 'LastAccessTime',
        'user_id' => 'UserId',
        'user_unique_id' => 'UserUniqueId',
        'installment_plan_number' => 'InstallmentPlanNumber',
        'versioned_touch_point_id' => 'VersionedTouchPointId',
        'session_valid_period_in_minutes' => 'SessionValidPeriodInMinutes',
        'versioned_touch_point' => 'VersionedTouchPoint',
        'user_type' => 'UserType',
        'session_availibility' => 'SessionAvailibility'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'session_id' => 'setSessionId',
        'last_access_time' => 'setLastAccessTime',
        'user_id' => 'setUserId',
        'user_unique_id' => 'setUserUniqueId',
        'installment_plan_number' => 'setInstallmentPlanNumber',
        'versioned_touch_point_id' => 'setVersionedTouchPointId',
        'session_valid_period_in_minutes' => 'setSessionValidPeriodInMinutes',
        'versioned_touch_point' => 'setVersionedTouchPoint',
        'user_type' => 'setUserType',
        'session_availibility' => 'setSessionAvailibility'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'session_id' => 'getSessionId',
        'last_access_time' => 'getLastAccessTime',
        'user_id' => 'getUserId',
        'user_unique_id' => 'getUserUniqueId',
        'installment_plan_number' => 'getInstallmentPlanNumber',
        'versioned_touch_point_id' => 'getVersionedTouchPointId',
        'session_valid_period_in_minutes' => 'getSessionValidPeriodInMinutes',
        'versioned_touch_point' => 'getVersionedTouchPoint',
        'user_type' => 'getUserType',
        'session_availibility' => 'getSessionAvailibility'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['session_id'] = isset($data['session_id']) ? $data['session_id'] : null;
        $this->container['last_access_time'] = isset($data['last_access_time']) ? $data['last_access_time'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['user_unique_id'] = isset($data['user_unique_id']) ? $data['user_unique_id'] : null;
        $this->container['installment_plan_number'] = isset($data['installment_plan_number']) ? $data['installment_plan_number'] : null;
        $this->container['versioned_touch_point_id'] = isset($data['versioned_touch_point_id']) ? $data['versioned_touch_point_id'] : null;
        $this->container['session_valid_period_in_minutes'] = isset($data['session_valid_period_in_minutes']) ? $data['session_valid_period_in_minutes'] : null;
        $this->container['versioned_touch_point'] = isset($data['versioned_touch_point']) ? $data['versioned_touch_point'] : null;
        $this->container['user_type'] = isset($data['user_type']) ? $data['user_type'] : null;
        $this->container['session_availibility'] = isset($data['session_availibility']) ? $data['session_availibility'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['last_access_time'] === null) {
            $invalidProperties[] = "'last_access_time' can't be null";
        }
        if ($this->container['session_valid_period_in_minutes'] === null) {
            $invalidProperties[] = "'session_valid_period_in_minutes' can't be null";
        }
        if ($this->container['session_availibility'] === null) {
            $invalidProperties[] = "'session_availibility' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string $session_id session_id
     *
     * @return $this
     */
    public function setSessionId($session_id)
    {
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets last_access_time
     *
     * @return \DateTime
     */
    public function getLastAccessTime()
    {
        return $this->container['last_access_time'];
    }

    /**
     * Sets last_access_time
     *
     * @param \DateTime $last_access_time last_access_time
     *
     * @return $this
     */
    public function setLastAccessTime($last_access_time)
    {
        $this->container['last_access_time'] = $last_access_time;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user_unique_id
     *
     * @return string
     */
    public function getUserUniqueId()
    {
        return $this->container['user_unique_id'];
    }

    /**
     * Sets user_unique_id
     *
     * @param string $user_unique_id user_unique_id
     *
     * @return $this
     */
    public function setUserUniqueId($user_unique_id)
    {
        $this->container['user_unique_id'] = $user_unique_id;

        return $this;
    }

    /**
     * Gets installment_plan_number
     *
     * @return string
     */
    public function getInstallmentPlanNumber()
    {
        return $this->container['installment_plan_number'];
    }

    /**
     * Sets installment_plan_number
     *
     * @param string $installment_plan_number installment_plan_number
     *
     * @return $this
     */
    public function setInstallmentPlanNumber($installment_plan_number)
    {
        $this->container['installment_plan_number'] = $installment_plan_number;

        return $this;
    }

    /**
     * Gets versioned_touch_point_id
     *
     * @return int
     */
    public function getVersionedTouchPointId()
    {
        return $this->container['versioned_touch_point_id'];
    }

    /**
     * Sets versioned_touch_point_id
     *
     * @param int $versioned_touch_point_id versioned_touch_point_id
     *
     * @return $this
     */
    public function setVersionedTouchPointId($versioned_touch_point_id)
    {
        $this->container['versioned_touch_point_id'] = $versioned_touch_point_id;

        return $this;
    }

    /**
     * Gets session_valid_period_in_minutes
     *
     * @return int
     */
    public function getSessionValidPeriodInMinutes()
    {
        return $this->container['session_valid_period_in_minutes'];
    }

    /**
     * Sets session_valid_period_in_minutes
     *
     * @param int $session_valid_period_in_minutes session_valid_period_in_minutes
     *
     * @return $this
     */
    public function setSessionValidPeriodInMinutes($session_valid_period_in_minutes)
    {
        $this->container['session_valid_period_in_minutes'] = $session_valid_period_in_minutes;

        return $this;
    }

    /**
     * Gets versioned_touch_point
     *
     * @return \SplititSdkClient\Model\VersionedTouchPoints
     */
    public function getVersionedTouchPoint()
    {
        return $this->container['versioned_touch_point'];
    }

    /**
     * Sets versioned_touch_point
     *
     * @param \SplititSdkClient\Model\VersionedTouchPoints $versioned_touch_point versioned_touch_point
     *
     * @return $this
     */
    public function setVersionedTouchPoint($versioned_touch_point)
    {
        $this->container['versioned_touch_point'] = $versioned_touch_point;

        return $this;
    }

    /**
     * Gets user_type
     *
     * @return \SplititSdkClient\Model\UserType
     */
    public function getUserType()
    {
        return $this->container['user_type'];
    }

    /**
     * Sets user_type
     *
     * @param \SplititSdkClient\Model\UserType $user_type user_type
     *
     * @return $this
     */
    public function setUserType($user_type)
    {
        $this->container['user_type'] = $user_type;

        return $this;
    }

    /**
     * Gets session_availibility
     *
     * @return \SplititSdkClient\Model\SessionAvailibility
     */
    public function getSessionAvailibility()
    {
        return $this->container['session_availibility'];
    }

    /**
     * Sets session_availibility
     *
     * @param \SplititSdkClient\Model\SessionAvailibility $session_availibility session_availibility
     *
     * @return $this
     */
    public function setSessionAvailibility($session_availibility)
    {
        $this->container['session_availibility'] = $session_availibility;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


