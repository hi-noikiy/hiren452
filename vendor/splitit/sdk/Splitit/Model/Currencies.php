<?php
/**
 * Currencies
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * Currencies Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Currencies implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Currencies';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'currency_code' => 'string',
        'currency_name' => 'string',
        'currency_symbol' => 'string',
        'currency_iso_number' => 'string',
        'decimal_places' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'currency_code' => null,
        'currency_name' => null,
        'currency_symbol' => null,
        'currency_iso_number' => null,
        'decimal_places' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'currency_code' => 'CurrencyCode',
        'currency_name' => 'CurrencyName',
        'currency_symbol' => 'CurrencySymbol',
        'currency_iso_number' => 'CurrencyIsoNumber',
        'decimal_places' => 'DecimalPlaces'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'currency_code' => 'setCurrencyCode',
        'currency_name' => 'setCurrencyName',
        'currency_symbol' => 'setCurrencySymbol',
        'currency_iso_number' => 'setCurrencyIsoNumber',
        'decimal_places' => 'setDecimalPlaces'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'currency_code' => 'getCurrencyCode',
        'currency_name' => 'getCurrencyName',
        'currency_symbol' => 'getCurrencySymbol',
        'currency_iso_number' => 'getCurrencyIsoNumber',
        'decimal_places' => 'getDecimalPlaces'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['currency_name'] = isset($data['currency_name']) ? $data['currency_name'] : null;
        $this->container['currency_symbol'] = isset($data['currency_symbol']) ? $data['currency_symbol'] : null;
        $this->container['currency_iso_number'] = isset($data['currency_iso_number']) ? $data['currency_iso_number'] : null;
        $this->container['decimal_places'] = isset($data['decimal_places']) ? $data['decimal_places'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ((mb_strlen($this->container['currency_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['currency_name'] === null) {
            $invalidProperties[] = "'currency_name' can't be null";
        }
        if ((mb_strlen($this->container['currency_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'currency_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['currency_symbol'] === null) {
            $invalidProperties[] = "'currency_symbol' can't be null";
        }
        if ((mb_strlen($this->container['currency_symbol']) < 1)) {
            $invalidProperties[] = "invalid value for 'currency_symbol', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['currency_iso_number'] === null) {
            $invalidProperties[] = "'currency_iso_number' can't be null";
        }
        if ((mb_strlen($this->container['currency_iso_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'currency_iso_number', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['decimal_places'] === null) {
            $invalidProperties[] = "'decimal_places' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {

        if ((mb_strlen($currency_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling Currencies., must be bigger than or equal to 1.');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets currency_name
     *
     * @return string
     */
    public function getCurrencyName()
    {
        return $this->container['currency_name'];
    }

    /**
     * Sets currency_name
     *
     * @param string $currency_name currency_name
     *
     * @return $this
     */
    public function setCurrencyName($currency_name)
    {

        if ((mb_strlen($currency_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $currency_name when calling Currencies., must be bigger than or equal to 1.');
        }

        $this->container['currency_name'] = $currency_name;

        return $this;
    }

    /**
     * Gets currency_symbol
     *
     * @return string
     */
    public function getCurrencySymbol()
    {
        return $this->container['currency_symbol'];
    }

    /**
     * Sets currency_symbol
     *
     * @param string $currency_symbol currency_symbol
     *
     * @return $this
     */
    public function setCurrencySymbol($currency_symbol)
    {

        if ((mb_strlen($currency_symbol) < 1)) {
            throw new \InvalidArgumentException('invalid length for $currency_symbol when calling Currencies., must be bigger than or equal to 1.');
        }

        $this->container['currency_symbol'] = $currency_symbol;

        return $this;
    }

    /**
     * Gets currency_iso_number
     *
     * @return string
     */
    public function getCurrencyIsoNumber()
    {
        return $this->container['currency_iso_number'];
    }

    /**
     * Sets currency_iso_number
     *
     * @param string $currency_iso_number currency_iso_number
     *
     * @return $this
     */
    public function setCurrencyIsoNumber($currency_iso_number)
    {

        if ((mb_strlen($currency_iso_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $currency_iso_number when calling Currencies., must be bigger than or equal to 1.');
        }

        $this->container['currency_iso_number'] = $currency_iso_number;

        return $this;
    }

    /**
     * Gets decimal_places
     *
     * @return int
     */
    public function getDecimalPlaces()
    {
        return $this->container['decimal_places'];
    }

    /**
     * Sets decimal_places
     *
     * @param int $decimal_places decimal_places
     *
     * @return $this
     */
    public function setDecimalPlaces($decimal_places)
    {
        $this->container['decimal_places'] = $decimal_places;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


