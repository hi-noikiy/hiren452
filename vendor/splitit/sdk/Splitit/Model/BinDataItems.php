<?php
/**
 * BinDataItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * BinDataItems Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BinDataItems implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BinDataItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'low_bin' => 'string',
        'high_bin' => 'string',
        'bin_length' => 'int',
        'bin_detail_pan' => 'int',
        'issuer_bank_name' => 'string',
        'issue_country_id' => 'int',
        'detail_card_indicator' => 'string',
        'issuer_update_date' => '\DateTime',
        'ebt_state' => 'string',
        'is_debit_signature_network_participant' => 'bool',
        'is_fsa' => 'bool',
        'is_prepaid' => 'bool',
        'product_id' => 'string',
        'regulator_indicator' => 'string',
        'visa_product_sub_type' => 'string',
        'visa_large_ticket_indicator' => 'string',
        'account_level_processing_indicator' => 'string',
        'card_class' => 'string',
        'pan_length_min' => 'int',
        'pan_length_max' => 'int',
        'token_indicator' => 'string',
        'issuing_network' => 'string',
        'card_holder_billing_currency' => 'string',
        'money_send_indicator' => 'string',
        'original_credit_money_transfer_indicator' => 'string',
        'original_credit_online_gambling_indicator' => 'string',
        'original_credit_transaction_indicator' => 'string',
        'fast_funds' => 'string',
        'reserved_field' => 'string',
        'issue_country' => '\SplititSdkClient\Model\Countries',
        'card_brand' => '\SplititSdkClient\Model\CardBrand',
        'card_type' => '\SplititSdkClient\Model\CardType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'low_bin' => null,
        'high_bin' => null,
        'bin_length' => 'int32',
        'bin_detail_pan' => 'int32',
        'issuer_bank_name' => null,
        'issue_country_id' => 'int64',
        'detail_card_indicator' => null,
        'issuer_update_date' => 'date-time',
        'ebt_state' => null,
        'is_debit_signature_network_participant' => null,
        'is_fsa' => null,
        'is_prepaid' => null,
        'product_id' => null,
        'regulator_indicator' => null,
        'visa_product_sub_type' => null,
        'visa_large_ticket_indicator' => null,
        'account_level_processing_indicator' => null,
        'card_class' => null,
        'pan_length_min' => 'int32',
        'pan_length_max' => 'int32',
        'token_indicator' => null,
        'issuing_network' => null,
        'card_holder_billing_currency' => null,
        'money_send_indicator' => null,
        'original_credit_money_transfer_indicator' => null,
        'original_credit_online_gambling_indicator' => null,
        'original_credit_transaction_indicator' => null,
        'fast_funds' => null,
        'reserved_field' => null,
        'issue_country' => null,
        'card_brand' => null,
        'card_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'low_bin' => 'LowBin',
        'high_bin' => 'HighBin',
        'bin_length' => 'BinLength',
        'bin_detail_pan' => 'BinDetailPan',
        'issuer_bank_name' => 'IssuerBankName',
        'issue_country_id' => 'IssueCountryId',
        'detail_card_indicator' => 'DetailCardIndicator',
        'issuer_update_date' => 'IssuerUpdateDate',
        'ebt_state' => 'EbtState',
        'is_debit_signature_network_participant' => 'IsDebitSignatureNetworkParticipant',
        'is_fsa' => 'IsFsa',
        'is_prepaid' => 'IsPrepaid',
        'product_id' => 'ProductId',
        'regulator_indicator' => 'RegulatorIndicator',
        'visa_product_sub_type' => 'VisaProductSubType',
        'visa_large_ticket_indicator' => 'VisaLargeTicketIndicator',
        'account_level_processing_indicator' => 'AccountLevelProcessingIndicator',
        'card_class' => 'CardClass',
        'pan_length_min' => 'PanLengthMin',
        'pan_length_max' => 'PanLengthMax',
        'token_indicator' => 'TokenIndicator',
        'issuing_network' => 'IssuingNetwork',
        'card_holder_billing_currency' => 'CardHolderBillingCurrency',
        'money_send_indicator' => 'MoneySendIndicator',
        'original_credit_money_transfer_indicator' => 'OriginalCreditMoneyTransferIndicator',
        'original_credit_online_gambling_indicator' => 'OriginalCreditOnlineGamblingIndicator',
        'original_credit_transaction_indicator' => 'OriginalCreditTransactionIndicator',
        'fast_funds' => 'FastFunds',
        'reserved_field' => 'ReservedField',
        'issue_country' => 'IssueCountry',
        'card_brand' => 'CardBrand',
        'card_type' => 'CardType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'low_bin' => 'setLowBin',
        'high_bin' => 'setHighBin',
        'bin_length' => 'setBinLength',
        'bin_detail_pan' => 'setBinDetailPan',
        'issuer_bank_name' => 'setIssuerBankName',
        'issue_country_id' => 'setIssueCountryId',
        'detail_card_indicator' => 'setDetailCardIndicator',
        'issuer_update_date' => 'setIssuerUpdateDate',
        'ebt_state' => 'setEbtState',
        'is_debit_signature_network_participant' => 'setIsDebitSignatureNetworkParticipant',
        'is_fsa' => 'setIsFsa',
        'is_prepaid' => 'setIsPrepaid',
        'product_id' => 'setProductId',
        'regulator_indicator' => 'setRegulatorIndicator',
        'visa_product_sub_type' => 'setVisaProductSubType',
        'visa_large_ticket_indicator' => 'setVisaLargeTicketIndicator',
        'account_level_processing_indicator' => 'setAccountLevelProcessingIndicator',
        'card_class' => 'setCardClass',
        'pan_length_min' => 'setPanLengthMin',
        'pan_length_max' => 'setPanLengthMax',
        'token_indicator' => 'setTokenIndicator',
        'issuing_network' => 'setIssuingNetwork',
        'card_holder_billing_currency' => 'setCardHolderBillingCurrency',
        'money_send_indicator' => 'setMoneySendIndicator',
        'original_credit_money_transfer_indicator' => 'setOriginalCreditMoneyTransferIndicator',
        'original_credit_online_gambling_indicator' => 'setOriginalCreditOnlineGamblingIndicator',
        'original_credit_transaction_indicator' => 'setOriginalCreditTransactionIndicator',
        'fast_funds' => 'setFastFunds',
        'reserved_field' => 'setReservedField',
        'issue_country' => 'setIssueCountry',
        'card_brand' => 'setCardBrand',
        'card_type' => 'setCardType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'low_bin' => 'getLowBin',
        'high_bin' => 'getHighBin',
        'bin_length' => 'getBinLength',
        'bin_detail_pan' => 'getBinDetailPan',
        'issuer_bank_name' => 'getIssuerBankName',
        'issue_country_id' => 'getIssueCountryId',
        'detail_card_indicator' => 'getDetailCardIndicator',
        'issuer_update_date' => 'getIssuerUpdateDate',
        'ebt_state' => 'getEbtState',
        'is_debit_signature_network_participant' => 'getIsDebitSignatureNetworkParticipant',
        'is_fsa' => 'getIsFsa',
        'is_prepaid' => 'getIsPrepaid',
        'product_id' => 'getProductId',
        'regulator_indicator' => 'getRegulatorIndicator',
        'visa_product_sub_type' => 'getVisaProductSubType',
        'visa_large_ticket_indicator' => 'getVisaLargeTicketIndicator',
        'account_level_processing_indicator' => 'getAccountLevelProcessingIndicator',
        'card_class' => 'getCardClass',
        'pan_length_min' => 'getPanLengthMin',
        'pan_length_max' => 'getPanLengthMax',
        'token_indicator' => 'getTokenIndicator',
        'issuing_network' => 'getIssuingNetwork',
        'card_holder_billing_currency' => 'getCardHolderBillingCurrency',
        'money_send_indicator' => 'getMoneySendIndicator',
        'original_credit_money_transfer_indicator' => 'getOriginalCreditMoneyTransferIndicator',
        'original_credit_online_gambling_indicator' => 'getOriginalCreditOnlineGamblingIndicator',
        'original_credit_transaction_indicator' => 'getOriginalCreditTransactionIndicator',
        'fast_funds' => 'getFastFunds',
        'reserved_field' => 'getReservedField',
        'issue_country' => 'getIssueCountry',
        'card_brand' => 'getCardBrand',
        'card_type' => 'getCardType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['low_bin'] = isset($data['low_bin']) ? $data['low_bin'] : null;
        $this->container['high_bin'] = isset($data['high_bin']) ? $data['high_bin'] : null;
        $this->container['bin_length'] = isset($data['bin_length']) ? $data['bin_length'] : null;
        $this->container['bin_detail_pan'] = isset($data['bin_detail_pan']) ? $data['bin_detail_pan'] : null;
        $this->container['issuer_bank_name'] = isset($data['issuer_bank_name']) ? $data['issuer_bank_name'] : null;
        $this->container['issue_country_id'] = isset($data['issue_country_id']) ? $data['issue_country_id'] : null;
        $this->container['detail_card_indicator'] = isset($data['detail_card_indicator']) ? $data['detail_card_indicator'] : null;
        $this->container['issuer_update_date'] = isset($data['issuer_update_date']) ? $data['issuer_update_date'] : null;
        $this->container['ebt_state'] = isset($data['ebt_state']) ? $data['ebt_state'] : null;
        $this->container['is_debit_signature_network_participant'] = isset($data['is_debit_signature_network_participant']) ? $data['is_debit_signature_network_participant'] : null;
        $this->container['is_fsa'] = isset($data['is_fsa']) ? $data['is_fsa'] : null;
        $this->container['is_prepaid'] = isset($data['is_prepaid']) ? $data['is_prepaid'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['regulator_indicator'] = isset($data['regulator_indicator']) ? $data['regulator_indicator'] : null;
        $this->container['visa_product_sub_type'] = isset($data['visa_product_sub_type']) ? $data['visa_product_sub_type'] : null;
        $this->container['visa_large_ticket_indicator'] = isset($data['visa_large_ticket_indicator']) ? $data['visa_large_ticket_indicator'] : null;
        $this->container['account_level_processing_indicator'] = isset($data['account_level_processing_indicator']) ? $data['account_level_processing_indicator'] : null;
        $this->container['card_class'] = isset($data['card_class']) ? $data['card_class'] : null;
        $this->container['pan_length_min'] = isset($data['pan_length_min']) ? $data['pan_length_min'] : null;
        $this->container['pan_length_max'] = isset($data['pan_length_max']) ? $data['pan_length_max'] : null;
        $this->container['token_indicator'] = isset($data['token_indicator']) ? $data['token_indicator'] : null;
        $this->container['issuing_network'] = isset($data['issuing_network']) ? $data['issuing_network'] : null;
        $this->container['card_holder_billing_currency'] = isset($data['card_holder_billing_currency']) ? $data['card_holder_billing_currency'] : null;
        $this->container['money_send_indicator'] = isset($data['money_send_indicator']) ? $data['money_send_indicator'] : null;
        $this->container['original_credit_money_transfer_indicator'] = isset($data['original_credit_money_transfer_indicator']) ? $data['original_credit_money_transfer_indicator'] : null;
        $this->container['original_credit_online_gambling_indicator'] = isset($data['original_credit_online_gambling_indicator']) ? $data['original_credit_online_gambling_indicator'] : null;
        $this->container['original_credit_transaction_indicator'] = isset($data['original_credit_transaction_indicator']) ? $data['original_credit_transaction_indicator'] : null;
        $this->container['fast_funds'] = isset($data['fast_funds']) ? $data['fast_funds'] : null;
        $this->container['reserved_field'] = isset($data['reserved_field']) ? $data['reserved_field'] : null;
        $this->container['issue_country'] = isset($data['issue_country']) ? $data['issue_country'] : null;
        $this->container['card_brand'] = isset($data['card_brand']) ? $data['card_brand'] : null;
        $this->container['card_type'] = isset($data['card_type']) ? $data['card_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['bin_length'] === null) {
            $invalidProperties[] = "'bin_length' can't be null";
        }
        if ($this->container['bin_detail_pan'] === null) {
            $invalidProperties[] = "'bin_detail_pan' can't be null";
        }
        if ($this->container['issuer_update_date'] === null) {
            $invalidProperties[] = "'issuer_update_date' can't be null";
        }
        if ($this->container['is_debit_signature_network_participant'] === null) {
            $invalidProperties[] = "'is_debit_signature_network_participant' can't be null";
        }
        if ($this->container['is_fsa'] === null) {
            $invalidProperties[] = "'is_fsa' can't be null";
        }
        if ($this->container['is_prepaid'] === null) {
            $invalidProperties[] = "'is_prepaid' can't be null";
        }
        if ($this->container['pan_length_min'] === null) {
            $invalidProperties[] = "'pan_length_min' can't be null";
        }
        if ($this->container['pan_length_max'] === null) {
            $invalidProperties[] = "'pan_length_max' can't be null";
        }
        if ($this->container['card_brand'] === null) {
            $invalidProperties[] = "'card_brand' can't be null";
        }
        if ($this->container['card_type'] === null) {
            $invalidProperties[] = "'card_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets low_bin
     *
     * @return string
     */
    public function getLowBin()
    {
        return $this->container['low_bin'];
    }

    /**
     * Sets low_bin
     *
     * @param string $low_bin low_bin
     *
     * @return $this
     */
    public function setLowBin($low_bin)
    {
        $this->container['low_bin'] = $low_bin;

        return $this;
    }

    /**
     * Gets high_bin
     *
     * @return string
     */
    public function getHighBin()
    {
        return $this->container['high_bin'];
    }

    /**
     * Sets high_bin
     *
     * @param string $high_bin high_bin
     *
     * @return $this
     */
    public function setHighBin($high_bin)
    {
        $this->container['high_bin'] = $high_bin;

        return $this;
    }

    /**
     * Gets bin_length
     *
     * @return int
     */
    public function getBinLength()
    {
        return $this->container['bin_length'];
    }

    /**
     * Sets bin_length
     *
     * @param int $bin_length bin_length
     *
     * @return $this
     */
    public function setBinLength($bin_length)
    {
        $this->container['bin_length'] = $bin_length;

        return $this;
    }

    /**
     * Gets bin_detail_pan
     *
     * @return int
     */
    public function getBinDetailPan()
    {
        return $this->container['bin_detail_pan'];
    }

    /**
     * Sets bin_detail_pan
     *
     * @param int $bin_detail_pan bin_detail_pan
     *
     * @return $this
     */
    public function setBinDetailPan($bin_detail_pan)
    {
        $this->container['bin_detail_pan'] = $bin_detail_pan;

        return $this;
    }

    /**
     * Gets issuer_bank_name
     *
     * @return string
     */
    public function getIssuerBankName()
    {
        return $this->container['issuer_bank_name'];
    }

    /**
     * Sets issuer_bank_name
     *
     * @param string $issuer_bank_name issuer_bank_name
     *
     * @return $this
     */
    public function setIssuerBankName($issuer_bank_name)
    {
        $this->container['issuer_bank_name'] = $issuer_bank_name;

        return $this;
    }

    /**
     * Gets issue_country_id
     *
     * @return int
     */
    public function getIssueCountryId()
    {
        return $this->container['issue_country_id'];
    }

    /**
     * Sets issue_country_id
     *
     * @param int $issue_country_id issue_country_id
     *
     * @return $this
     */
    public function setIssueCountryId($issue_country_id)
    {
        $this->container['issue_country_id'] = $issue_country_id;

        return $this;
    }

    /**
     * Gets detail_card_indicator
     *
     * @return string
     */
    public function getDetailCardIndicator()
    {
        return $this->container['detail_card_indicator'];
    }

    /**
     * Sets detail_card_indicator
     *
     * @param string $detail_card_indicator detail_card_indicator
     *
     * @return $this
     */
    public function setDetailCardIndicator($detail_card_indicator)
    {
        $this->container['detail_card_indicator'] = $detail_card_indicator;

        return $this;
    }

    /**
     * Gets issuer_update_date
     *
     * @return \DateTime
     */
    public function getIssuerUpdateDate()
    {
        return $this->container['issuer_update_date'];
    }

    /**
     * Sets issuer_update_date
     *
     * @param \DateTime $issuer_update_date issuer_update_date
     *
     * @return $this
     */
    public function setIssuerUpdateDate($issuer_update_date)
    {
        $this->container['issuer_update_date'] = $issuer_update_date;

        return $this;
    }

    /**
     * Gets ebt_state
     *
     * @return string
     */
    public function getEbtState()
    {
        return $this->container['ebt_state'];
    }

    /**
     * Sets ebt_state
     *
     * @param string $ebt_state ebt_state
     *
     * @return $this
     */
    public function setEbtState($ebt_state)
    {
        $this->container['ebt_state'] = $ebt_state;

        return $this;
    }

    /**
     * Gets is_debit_signature_network_participant
     *
     * @return bool
     */
    public function getIsDebitSignatureNetworkParticipant()
    {
        return $this->container['is_debit_signature_network_participant'];
    }

    /**
     * Sets is_debit_signature_network_participant
     *
     * @param bool $is_debit_signature_network_participant is_debit_signature_network_participant
     *
     * @return $this
     */
    public function setIsDebitSignatureNetworkParticipant($is_debit_signature_network_participant)
    {
        $this->container['is_debit_signature_network_participant'] = $is_debit_signature_network_participant;

        return $this;
    }

    /**
     * Gets is_fsa
     *
     * @return bool
     */
    public function getIsFsa()
    {
        return $this->container['is_fsa'];
    }

    /**
     * Sets is_fsa
     *
     * @param bool $is_fsa is_fsa
     *
     * @return $this
     */
    public function setIsFsa($is_fsa)
    {
        $this->container['is_fsa'] = $is_fsa;

        return $this;
    }

    /**
     * Gets is_prepaid
     *
     * @return bool
     */
    public function getIsPrepaid()
    {
        return $this->container['is_prepaid'];
    }

    /**
     * Sets is_prepaid
     *
     * @param bool $is_prepaid is_prepaid
     *
     * @return $this
     */
    public function setIsPrepaid($is_prepaid)
    {
        $this->container['is_prepaid'] = $is_prepaid;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets regulator_indicator
     *
     * @return string
     */
    public function getRegulatorIndicator()
    {
        return $this->container['regulator_indicator'];
    }

    /**
     * Sets regulator_indicator
     *
     * @param string $regulator_indicator regulator_indicator
     *
     * @return $this
     */
    public function setRegulatorIndicator($regulator_indicator)
    {
        $this->container['regulator_indicator'] = $regulator_indicator;

        return $this;
    }

    /**
     * Gets visa_product_sub_type
     *
     * @return string
     */
    public function getVisaProductSubType()
    {
        return $this->container['visa_product_sub_type'];
    }

    /**
     * Sets visa_product_sub_type
     *
     * @param string $visa_product_sub_type visa_product_sub_type
     *
     * @return $this
     */
    public function setVisaProductSubType($visa_product_sub_type)
    {
        $this->container['visa_product_sub_type'] = $visa_product_sub_type;

        return $this;
    }

    /**
     * Gets visa_large_ticket_indicator
     *
     * @return string
     */
    public function getVisaLargeTicketIndicator()
    {
        return $this->container['visa_large_ticket_indicator'];
    }

    /**
     * Sets visa_large_ticket_indicator
     *
     * @param string $visa_large_ticket_indicator visa_large_ticket_indicator
     *
     * @return $this
     */
    public function setVisaLargeTicketIndicator($visa_large_ticket_indicator)
    {
        $this->container['visa_large_ticket_indicator'] = $visa_large_ticket_indicator;

        return $this;
    }

    /**
     * Gets account_level_processing_indicator
     *
     * @return string
     */
    public function getAccountLevelProcessingIndicator()
    {
        return $this->container['account_level_processing_indicator'];
    }

    /**
     * Sets account_level_processing_indicator
     *
     * @param string $account_level_processing_indicator account_level_processing_indicator
     *
     * @return $this
     */
    public function setAccountLevelProcessingIndicator($account_level_processing_indicator)
    {
        $this->container['account_level_processing_indicator'] = $account_level_processing_indicator;

        return $this;
    }

    /**
     * Gets card_class
     *
     * @return string
     */
    public function getCardClass()
    {
        return $this->container['card_class'];
    }

    /**
     * Sets card_class
     *
     * @param string $card_class card_class
     *
     * @return $this
     */
    public function setCardClass($card_class)
    {
        $this->container['card_class'] = $card_class;

        return $this;
    }

    /**
     * Gets pan_length_min
     *
     * @return int
     */
    public function getPanLengthMin()
    {
        return $this->container['pan_length_min'];
    }

    /**
     * Sets pan_length_min
     *
     * @param int $pan_length_min pan_length_min
     *
     * @return $this
     */
    public function setPanLengthMin($pan_length_min)
    {
        $this->container['pan_length_min'] = $pan_length_min;

        return $this;
    }

    /**
     * Gets pan_length_max
     *
     * @return int
     */
    public function getPanLengthMax()
    {
        return $this->container['pan_length_max'];
    }

    /**
     * Sets pan_length_max
     *
     * @param int $pan_length_max pan_length_max
     *
     * @return $this
     */
    public function setPanLengthMax($pan_length_max)
    {
        $this->container['pan_length_max'] = $pan_length_max;

        return $this;
    }

    /**
     * Gets token_indicator
     *
     * @return string
     */
    public function getTokenIndicator()
    {
        return $this->container['token_indicator'];
    }

    /**
     * Sets token_indicator
     *
     * @param string $token_indicator token_indicator
     *
     * @return $this
     */
    public function setTokenIndicator($token_indicator)
    {
        $this->container['token_indicator'] = $token_indicator;

        return $this;
    }

    /**
     * Gets issuing_network
     *
     * @return string
     */
    public function getIssuingNetwork()
    {
        return $this->container['issuing_network'];
    }

    /**
     * Sets issuing_network
     *
     * @param string $issuing_network issuing_network
     *
     * @return $this
     */
    public function setIssuingNetwork($issuing_network)
    {
        $this->container['issuing_network'] = $issuing_network;

        return $this;
    }

    /**
     * Gets card_holder_billing_currency
     *
     * @return string
     */
    public function getCardHolderBillingCurrency()
    {
        return $this->container['card_holder_billing_currency'];
    }

    /**
     * Sets card_holder_billing_currency
     *
     * @param string $card_holder_billing_currency card_holder_billing_currency
     *
     * @return $this
     */
    public function setCardHolderBillingCurrency($card_holder_billing_currency)
    {
        $this->container['card_holder_billing_currency'] = $card_holder_billing_currency;

        return $this;
    }

    /**
     * Gets money_send_indicator
     *
     * @return string
     */
    public function getMoneySendIndicator()
    {
        return $this->container['money_send_indicator'];
    }

    /**
     * Sets money_send_indicator
     *
     * @param string $money_send_indicator money_send_indicator
     *
     * @return $this
     */
    public function setMoneySendIndicator($money_send_indicator)
    {
        $this->container['money_send_indicator'] = $money_send_indicator;

        return $this;
    }

    /**
     * Gets original_credit_money_transfer_indicator
     *
     * @return string
     */
    public function getOriginalCreditMoneyTransferIndicator()
    {
        return $this->container['original_credit_money_transfer_indicator'];
    }

    /**
     * Sets original_credit_money_transfer_indicator
     *
     * @param string $original_credit_money_transfer_indicator original_credit_money_transfer_indicator
     *
     * @return $this
     */
    public function setOriginalCreditMoneyTransferIndicator($original_credit_money_transfer_indicator)
    {
        $this->container['original_credit_money_transfer_indicator'] = $original_credit_money_transfer_indicator;

        return $this;
    }

    /**
     * Gets original_credit_online_gambling_indicator
     *
     * @return string
     */
    public function getOriginalCreditOnlineGamblingIndicator()
    {
        return $this->container['original_credit_online_gambling_indicator'];
    }

    /**
     * Sets original_credit_online_gambling_indicator
     *
     * @param string $original_credit_online_gambling_indicator original_credit_online_gambling_indicator
     *
     * @return $this
     */
    public function setOriginalCreditOnlineGamblingIndicator($original_credit_online_gambling_indicator)
    {
        $this->container['original_credit_online_gambling_indicator'] = $original_credit_online_gambling_indicator;

        return $this;
    }

    /**
     * Gets original_credit_transaction_indicator
     *
     * @return string
     */
    public function getOriginalCreditTransactionIndicator()
    {
        return $this->container['original_credit_transaction_indicator'];
    }

    /**
     * Sets original_credit_transaction_indicator
     *
     * @param string $original_credit_transaction_indicator original_credit_transaction_indicator
     *
     * @return $this
     */
    public function setOriginalCreditTransactionIndicator($original_credit_transaction_indicator)
    {
        $this->container['original_credit_transaction_indicator'] = $original_credit_transaction_indicator;

        return $this;
    }

    /**
     * Gets fast_funds
     *
     * @return string
     */
    public function getFastFunds()
    {
        return $this->container['fast_funds'];
    }

    /**
     * Sets fast_funds
     *
     * @param string $fast_funds fast_funds
     *
     * @return $this
     */
    public function setFastFunds($fast_funds)
    {
        $this->container['fast_funds'] = $fast_funds;

        return $this;
    }

    /**
     * Gets reserved_field
     *
     * @return string
     */
    public function getReservedField()
    {
        return $this->container['reserved_field'];
    }

    /**
     * Sets reserved_field
     *
     * @param string $reserved_field reserved_field
     *
     * @return $this
     */
    public function setReservedField($reserved_field)
    {
        $this->container['reserved_field'] = $reserved_field;

        return $this;
    }

    /**
     * Gets issue_country
     *
     * @return \SplititSdkClient\Model\Countries
     */
    public function getIssueCountry()
    {
        return $this->container['issue_country'];
    }

    /**
     * Sets issue_country
     *
     * @param \SplititSdkClient\Model\Countries $issue_country issue_country
     *
     * @return $this
     */
    public function setIssueCountry($issue_country)
    {
        $this->container['issue_country'] = $issue_country;

        return $this;
    }

    /**
     * Gets card_brand
     *
     * @return \SplititSdkClient\Model\CardBrand
     */
    public function getCardBrand()
    {
        return $this->container['card_brand'];
    }

    /**
     * Sets card_brand
     *
     * @param \SplititSdkClient\Model\CardBrand $card_brand card_brand
     *
     * @return $this
     */
    public function setCardBrand($card_brand)
    {
        $this->container['card_brand'] = $card_brand;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return \SplititSdkClient\Model\CardType
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param \SplititSdkClient\Model\CardType $card_type card_type
     *
     * @return $this
     */
    public function setCardType($card_type)
    {
        $this->container['card_type'] = $card_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


