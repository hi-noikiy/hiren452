<?php
/**
 * InstallmentPlanEventsSubscriptionDatas
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * InstallmentPlanEventsSubscriptionDatas Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InstallmentPlanEventsSubscriptionDatas implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstallmentPlanEventsSubscriptionDatas';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'subscribed_events_string' => 'string',
        'merchant_id' => 'int',
        'event_subscription_end_point_url' => 'string',
        'merchant' => '\SplititSdkClient\Model\Merchants',
        'subscribed_event' => '\SplititSdkClient\Model\InstallmentPlanEventType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'subscribed_events_string' => null,
        'merchant_id' => 'int64',
        'event_subscription_end_point_url' => null,
        'merchant' => null,
        'subscribed_event' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'subscribed_events_string' => 'SubscribedEventsString',
        'merchant_id' => 'MerchantId',
        'event_subscription_end_point_url' => 'EventSubscriptionEndPointUrl',
        'merchant' => 'Merchant',
        'subscribed_event' => 'SubscribedEvent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'subscribed_events_string' => 'setSubscribedEventsString',
        'merchant_id' => 'setMerchantId',
        'event_subscription_end_point_url' => 'setEventSubscriptionEndPointUrl',
        'merchant' => 'setMerchant',
        'subscribed_event' => 'setSubscribedEvent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'subscribed_events_string' => 'getSubscribedEventsString',
        'merchant_id' => 'getMerchantId',
        'event_subscription_end_point_url' => 'getEventSubscriptionEndPointUrl',
        'merchant' => 'getMerchant',
        'subscribed_event' => 'getSubscribedEvent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['subscribed_events_string'] = isset($data['subscribed_events_string']) ? $data['subscribed_events_string'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['event_subscription_end_point_url'] = isset($data['event_subscription_end_point_url']) ? $data['event_subscription_end_point_url'] : null;
        $this->container['merchant'] = isset($data['merchant']) ? $data['merchant'] : null;
        $this->container['subscribed_event'] = isset($data['subscribed_event']) ? $data['subscribed_event'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ($this->container['subscribed_event'] === null) {
            $invalidProperties[] = "'subscribed_event' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets subscribed_events_string
     *
     * @return string
     */
    public function getSubscribedEventsString()
    {
        return $this->container['subscribed_events_string'];
    }

    /**
     * Sets subscribed_events_string
     *
     * @param string $subscribed_events_string subscribed_events_string
     *
     * @return $this
     */
    public function setSubscribedEventsString($subscribed_events_string)
    {
        $this->container['subscribed_events_string'] = $subscribed_events_string;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id merchant_id
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets event_subscription_end_point_url
     *
     * @return string
     */
    public function getEventSubscriptionEndPointUrl()
    {
        return $this->container['event_subscription_end_point_url'];
    }

    /**
     * Sets event_subscription_end_point_url
     *
     * @param string $event_subscription_end_point_url event_subscription_end_point_url
     *
     * @return $this
     */
    public function setEventSubscriptionEndPointUrl($event_subscription_end_point_url)
    {
        $this->container['event_subscription_end_point_url'] = $event_subscription_end_point_url;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \SplititSdkClient\Model\Merchants
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \SplititSdkClient\Model\Merchants $merchant merchant
     *
     * @return $this
     */
    public function setMerchant($merchant)
    {
        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets subscribed_event
     *
     * @return \SplititSdkClient\Model\InstallmentPlanEventType
     */
    public function getSubscribedEvent()
    {
        return $this->container['subscribed_event'];
    }

    /**
     * Sets subscribed_event
     *
     * @param \SplititSdkClient\Model\InstallmentPlanEventType $subscribed_event subscribed_event
     *
     * @return $this
     */
    public function setSubscribedEvent($subscribed_event)
    {
        $this->container['subscribed_event'] = $subscribed_event;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


