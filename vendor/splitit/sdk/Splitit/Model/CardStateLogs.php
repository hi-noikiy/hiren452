<?php
/**
 * CardStateLogs
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * CardStateLogs Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CardStateLogs implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CardStateLogs';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'card_id' => 'int',
        'expiration_month' => 'int',
        'expiration_year' => 'int',
        'card_holder_name' => 'string',
        'address_data_address_line' => 'string',
        'address_data_zip' => 'string',
        'version' => 'int',
        'is_verified' => 'bool',
        'change_source' => 'string',
        'address_data_address_line2' => 'string',
        'address_data_city' => 'string',
        'address_data_country_id' => 'int',
        'address_data_state_id' => 'int',
        'address_data_legacy_full_address_line' => 'string',
        'card' => '\SplititSdkClient\Model\Cards',
        'country' => '\SplititSdkClient\Model\Countries',
        'state' => '\SplititSdkClient\Model\CountrySubdivisions',
        'installments' => '\SplititSdkClient\Model\Installments[]',
        're_authorizations' => '\SplititSdkClient\Model\ReAuthorizations[]',
        'address_data' => '\SplititSdkClient\Model\AddressData2'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'card_id' => 'int64',
        'expiration_month' => 'int32',
        'expiration_year' => 'int32',
        'card_holder_name' => null,
        'address_data_address_line' => null,
        'address_data_zip' => null,
        'version' => 'int32',
        'is_verified' => null,
        'change_source' => null,
        'address_data_address_line2' => null,
        'address_data_city' => null,
        'address_data_country_id' => 'int64',
        'address_data_state_id' => 'int64',
        'address_data_legacy_full_address_line' => null,
        'card' => null,
        'country' => null,
        'state' => null,
        'installments' => null,
        're_authorizations' => null,
        'address_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'card_id' => 'CardId',
        'expiration_month' => 'ExpirationMonth',
        'expiration_year' => 'ExpirationYear',
        'card_holder_name' => 'CardHolderName',
        'address_data_address_line' => 'AddressDataAddressLine',
        'address_data_zip' => 'AddressDataZip',
        'version' => 'Version',
        'is_verified' => 'IsVerified',
        'change_source' => 'ChangeSource',
        'address_data_address_line2' => 'AddressDataAddressLine2',
        'address_data_city' => 'AddressDataCity',
        'address_data_country_id' => 'AddressDataCountryId',
        'address_data_state_id' => 'AddressDataStateId',
        'address_data_legacy_full_address_line' => 'AddressDataLegacyFullAddressLine',
        'card' => 'Card',
        'country' => 'Country',
        'state' => 'State',
        'installments' => 'Installments',
        're_authorizations' => 'ReAuthorizations',
        'address_data' => 'AddressData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'card_id' => 'setCardId',
        'expiration_month' => 'setExpirationMonth',
        'expiration_year' => 'setExpirationYear',
        'card_holder_name' => 'setCardHolderName',
        'address_data_address_line' => 'setAddressDataAddressLine',
        'address_data_zip' => 'setAddressDataZip',
        'version' => 'setVersion',
        'is_verified' => 'setIsVerified',
        'change_source' => 'setChangeSource',
        'address_data_address_line2' => 'setAddressDataAddressLine2',
        'address_data_city' => 'setAddressDataCity',
        'address_data_country_id' => 'setAddressDataCountryId',
        'address_data_state_id' => 'setAddressDataStateId',
        'address_data_legacy_full_address_line' => 'setAddressDataLegacyFullAddressLine',
        'card' => 'setCard',
        'country' => 'setCountry',
        'state' => 'setState',
        'installments' => 'setInstallments',
        're_authorizations' => 'setReAuthorizations',
        'address_data' => 'setAddressData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'card_id' => 'getCardId',
        'expiration_month' => 'getExpirationMonth',
        'expiration_year' => 'getExpirationYear',
        'card_holder_name' => 'getCardHolderName',
        'address_data_address_line' => 'getAddressDataAddressLine',
        'address_data_zip' => 'getAddressDataZip',
        'version' => 'getVersion',
        'is_verified' => 'getIsVerified',
        'change_source' => 'getChangeSource',
        'address_data_address_line2' => 'getAddressDataAddressLine2',
        'address_data_city' => 'getAddressDataCity',
        'address_data_country_id' => 'getAddressDataCountryId',
        'address_data_state_id' => 'getAddressDataStateId',
        'address_data_legacy_full_address_line' => 'getAddressDataLegacyFullAddressLine',
        'card' => 'getCard',
        'country' => 'getCountry',
        'state' => 'getState',
        'installments' => 'getInstallments',
        're_authorizations' => 'getReAuthorizations',
        'address_data' => 'getAddressData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['card_id'] = isset($data['card_id']) ? $data['card_id'] : null;
        $this->container['expiration_month'] = isset($data['expiration_month']) ? $data['expiration_month'] : null;
        $this->container['expiration_year'] = isset($data['expiration_year']) ? $data['expiration_year'] : null;
        $this->container['card_holder_name'] = isset($data['card_holder_name']) ? $data['card_holder_name'] : null;
        $this->container['address_data_address_line'] = isset($data['address_data_address_line']) ? $data['address_data_address_line'] : null;
        $this->container['address_data_zip'] = isset($data['address_data_zip']) ? $data['address_data_zip'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['is_verified'] = isset($data['is_verified']) ? $data['is_verified'] : null;
        $this->container['change_source'] = isset($data['change_source']) ? $data['change_source'] : null;
        $this->container['address_data_address_line2'] = isset($data['address_data_address_line2']) ? $data['address_data_address_line2'] : null;
        $this->container['address_data_city'] = isset($data['address_data_city']) ? $data['address_data_city'] : null;
        $this->container['address_data_country_id'] = isset($data['address_data_country_id']) ? $data['address_data_country_id'] : null;
        $this->container['address_data_state_id'] = isset($data['address_data_state_id']) ? $data['address_data_state_id'] : null;
        $this->container['address_data_legacy_full_address_line'] = isset($data['address_data_legacy_full_address_line']) ? $data['address_data_legacy_full_address_line'] : null;
        $this->container['card'] = isset($data['card']) ? $data['card'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['installments'] = isset($data['installments']) ? $data['installments'] : null;
        $this->container['re_authorizations'] = isset($data['re_authorizations']) ? $data['re_authorizations'] : null;
        $this->container['address_data'] = isset($data['address_data']) ? $data['address_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['card_id'] === null) {
            $invalidProperties[] = "'card_id' can't be null";
        }
        if ($this->container['expiration_month'] === null) {
            $invalidProperties[] = "'expiration_month' can't be null";
        }
        if ($this->container['expiration_year'] === null) {
            $invalidProperties[] = "'expiration_year' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['is_verified'] === null) {
            $invalidProperties[] = "'is_verified' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets card_id
     *
     * @return int
     */
    public function getCardId()
    {
        return $this->container['card_id'];
    }

    /**
     * Sets card_id
     *
     * @param int $card_id card_id
     *
     * @return $this
     */
    public function setCardId($card_id)
    {
        $this->container['card_id'] = $card_id;

        return $this;
    }

    /**
     * Gets expiration_month
     *
     * @return int
     */
    public function getExpirationMonth()
    {
        return $this->container['expiration_month'];
    }

    /**
     * Sets expiration_month
     *
     * @param int $expiration_month expiration_month
     *
     * @return $this
     */
    public function setExpirationMonth($expiration_month)
    {
        $this->container['expiration_month'] = $expiration_month;

        return $this;
    }

    /**
     * Gets expiration_year
     *
     * @return int
     */
    public function getExpirationYear()
    {
        return $this->container['expiration_year'];
    }

    /**
     * Sets expiration_year
     *
     * @param int $expiration_year expiration_year
     *
     * @return $this
     */
    public function setExpirationYear($expiration_year)
    {
        $this->container['expiration_year'] = $expiration_year;

        return $this;
    }

    /**
     * Gets card_holder_name
     *
     * @return string
     */
    public function getCardHolderName()
    {
        return $this->container['card_holder_name'];
    }

    /**
     * Sets card_holder_name
     *
     * @param string $card_holder_name card_holder_name
     *
     * @return $this
     */
    public function setCardHolderName($card_holder_name)
    {
        $this->container['card_holder_name'] = $card_holder_name;

        return $this;
    }

    /**
     * Gets address_data_address_line
     *
     * @return string
     */
    public function getAddressDataAddressLine()
    {
        return $this->container['address_data_address_line'];
    }

    /**
     * Sets address_data_address_line
     *
     * @param string $address_data_address_line address_data_address_line
     *
     * @return $this
     */
    public function setAddressDataAddressLine($address_data_address_line)
    {
        $this->container['address_data_address_line'] = $address_data_address_line;

        return $this;
    }

    /**
     * Gets address_data_zip
     *
     * @return string
     */
    public function getAddressDataZip()
    {
        return $this->container['address_data_zip'];
    }

    /**
     * Sets address_data_zip
     *
     * @param string $address_data_zip address_data_zip
     *
     * @return $this
     */
    public function setAddressDataZip($address_data_zip)
    {
        $this->container['address_data_zip'] = $address_data_zip;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets is_verified
     *
     * @return bool
     */
    public function getIsVerified()
    {
        return $this->container['is_verified'];
    }

    /**
     * Sets is_verified
     *
     * @param bool $is_verified is_verified
     *
     * @return $this
     */
    public function setIsVerified($is_verified)
    {
        $this->container['is_verified'] = $is_verified;

        return $this;
    }

    /**
     * Gets change_source
     *
     * @return string
     */
    public function getChangeSource()
    {
        return $this->container['change_source'];
    }

    /**
     * Sets change_source
     *
     * @param string $change_source change_source
     *
     * @return $this
     */
    public function setChangeSource($change_source)
    {
        $this->container['change_source'] = $change_source;

        return $this;
    }

    /**
     * Gets address_data_address_line2
     *
     * @return string
     */
    public function getAddressDataAddressLine2()
    {
        return $this->container['address_data_address_line2'];
    }

    /**
     * Sets address_data_address_line2
     *
     * @param string $address_data_address_line2 address_data_address_line2
     *
     * @return $this
     */
    public function setAddressDataAddressLine2($address_data_address_line2)
    {
        $this->container['address_data_address_line2'] = $address_data_address_line2;

        return $this;
    }

    /**
     * Gets address_data_city
     *
     * @return string
     */
    public function getAddressDataCity()
    {
        return $this->container['address_data_city'];
    }

    /**
     * Sets address_data_city
     *
     * @param string $address_data_city address_data_city
     *
     * @return $this
     */
    public function setAddressDataCity($address_data_city)
    {
        $this->container['address_data_city'] = $address_data_city;

        return $this;
    }

    /**
     * Gets address_data_country_id
     *
     * @return int
     */
    public function getAddressDataCountryId()
    {
        return $this->container['address_data_country_id'];
    }

    /**
     * Sets address_data_country_id
     *
     * @param int $address_data_country_id address_data_country_id
     *
     * @return $this
     */
    public function setAddressDataCountryId($address_data_country_id)
    {
        $this->container['address_data_country_id'] = $address_data_country_id;

        return $this;
    }

    /**
     * Gets address_data_state_id
     *
     * @return int
     */
    public function getAddressDataStateId()
    {
        return $this->container['address_data_state_id'];
    }

    /**
     * Sets address_data_state_id
     *
     * @param int $address_data_state_id address_data_state_id
     *
     * @return $this
     */
    public function setAddressDataStateId($address_data_state_id)
    {
        $this->container['address_data_state_id'] = $address_data_state_id;

        return $this;
    }

    /**
     * Gets address_data_legacy_full_address_line
     *
     * @return string
     */
    public function getAddressDataLegacyFullAddressLine()
    {
        return $this->container['address_data_legacy_full_address_line'];
    }

    /**
     * Sets address_data_legacy_full_address_line
     *
     * @param string $address_data_legacy_full_address_line address_data_legacy_full_address_line
     *
     * @return $this
     */
    public function setAddressDataLegacyFullAddressLine($address_data_legacy_full_address_line)
    {
        $this->container['address_data_legacy_full_address_line'] = $address_data_legacy_full_address_line;

        return $this;
    }

    /**
     * Gets card
     *
     * @return \SplititSdkClient\Model\Cards
     */
    public function getCard()
    {
        return $this->container['card'];
    }

    /**
     * Sets card
     *
     * @param \SplititSdkClient\Model\Cards $card card
     *
     * @return $this
     */
    public function setCard($card)
    {
        $this->container['card'] = $card;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \SplititSdkClient\Model\Countries
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \SplititSdkClient\Model\Countries $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \SplititSdkClient\Model\CountrySubdivisions
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \SplititSdkClient\Model\CountrySubdivisions $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets installments
     *
     * @return \SplititSdkClient\Model\Installments[]
     */
    public function getInstallments()
    {
        return $this->container['installments'];
    }

    /**
     * Sets installments
     *
     * @param \SplititSdkClient\Model\Installments[] $installments installments
     *
     * @return $this
     */
    public function setInstallments($installments)
    {
        $this->container['installments'] = $installments;

        return $this;
    }

    /**
     * Gets re_authorizations
     *
     * @return \SplititSdkClient\Model\ReAuthorizations[]
     */
    public function getReAuthorizations()
    {
        return $this->container['re_authorizations'];
    }

    /**
     * Sets re_authorizations
     *
     * @param \SplititSdkClient\Model\ReAuthorizations[] $re_authorizations re_authorizations
     *
     * @return $this
     */
    public function setReAuthorizations($re_authorizations)
    {
        $this->container['re_authorizations'] = $re_authorizations;

        return $this;
    }

    /**
     * Gets address_data
     *
     * @return \SplititSdkClient\Model\AddressData2
     */
    public function getAddressData()
    {
        return $this->container['address_data'];
    }

    /**
     * Sets address_data
     *
     * @param \SplititSdkClient\Model\AddressData2 $address_data address_data
     *
     * @return $this
     */
    public function setAddressData($address_data)
    {
        $this->container['address_data'] = $address_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


