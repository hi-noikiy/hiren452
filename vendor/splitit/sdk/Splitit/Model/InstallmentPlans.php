<?php
/**
 * InstallmentPlans
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * InstallmentPlans Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InstallmentPlans implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstallmentPlans';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'terminal_id' => 'int',
        'number_of_installments' => 'int',
        'amount' => 'float',
        'amount_before_fees' => 'float',
        'eula' => 'bool',
        'installment_plan_number' => 'string',
        'is_full_captured' => 'bool',
        'begin_lock_time' => '\DateTime',
        'merchant_financed_date' => '\DateTime',
        'merchant_reserve_returned_date' => '\DateTime',
        'planned_full_capture' => '\DateTime',
        'installment_plan_terminal_data_id' => 'int',
        'currency_id' => 'int',
        'ref_order_number' => 'string',
        'active_card_id' => 'int',
        'base64_png_signature' => 'string',
        'is_charged_back' => 'bool',
        'are_charges_held' => 'bool',
        'auto_retry' => 'bool',
        'pis_member_unique_id' => 'string',
        'pis_member_id' => 'int',
        'subtotal' => 'float',
        'tax' => 'float',
        'shipping' => 'float',
        'setup_context_id' => 'int',
        'original_amount' => 'float',
        'refund_amount' => 'float',
        'reserve_pool_amount' => 'float',
        'shopper_approval_date_time' => '\DateTime',
        'cancellation_date_time' => '\DateTime',
        'activated_date' => '\DateTime',
        'de_activated_date' => '\DateTime',
        'amount_for_funding' => 'float',
        'amount_for_funding_currency' => '\SplititSdkClient\Model\Currencies',
        'amount_for_funding_exchange_rate' => 'float',
        'amount_for_funding_transaction_currency' => 'float',
        'active_card' => '\SplititSdkClient\Model\Cards',
        'currency' => '\SplititSdkClient\Model\Currencies',
        'installment_plan_terminal_data' => '\SplititSdkClient\Model\InstallmentPlanTerminalDatas',
        'pis_member' => 'object',
        'setup_context' => '\SplititSdkClient\Model\InstallmentPlanSetupContexts',
        'terminal' => '\SplititSdkClient\Model\Terminals',
        'cart_items' => '\SplititSdkClient\Model\CartItems[]',
        'email_audit_logs' => '\SplititSdkClient\Model\EmailAuditLogs[]',
        'fees_documents' => '\SplititSdkClient\Model\FeesDocuments[]',
        'fraud_detection_logs' => '\SplititSdkClient\Model\FraudDetectionLogs[]',
        'funding_collect_document_details' => '\SplititSdkClient\Model\FundingCollectDocumentDetails[]',
        'installment_plan_audit_logs' => '\SplititSdkClient\Model\InstallmentPlanAuditLogs[]',
        'installment_plan_events' => '\SplititSdkClient\Model\InstallmentPlanEvents[]',
        'installment_plan_status_log_entries' => '\SplititSdkClient\Model\InstallmentPlanStatusLogEntries[]',
        'installments' => '\SplititSdkClient\Model\Installments[]',
        're_authorizations' => '\SplititSdkClient\Model\ReAuthorizations[]',
        'refund_log_entries' => '\SplititSdkClient\Model\RefundLogEntries[]',
        'transfer_document_details' => '\SplititSdkClient\Model\TransferDocumentDetails[]',
        'active_terminal_data_id' => 'int',
        'active_terminal_data' => '\SplititSdkClient\Model\TerminalGatewayDatas',
        'delay_resolution' => '\SplititSdkClient\Model\DelayResolution',
        'test_mode' => '\SplititSdkClient\Model\TestModes',
        'funding_types_id' => '\SplititSdkClient\Model\MoneyFlows',
        'strategy' => '\SplititSdkClient\Model\PlanStrategy',
        'status' => '\SplititSdkClient\Model\InstallmentPlanStatus',
        'purchase_method' => '\SplititSdkClient\Model\PurchaseMethod',
        'extended_params_serialized_data' => 'string',
        'extended_params' => 'map[string,string]',
        'auto_capture' => 'bool',
        'items' => '\SplititSdkClient\Model\CartItems[]',
        'amount_details' => '\SplititSdkClient\Model\AmountDetails2'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'terminal_id' => 'int64',
        'number_of_installments' => 'int64',
        'amount' => 'decimal',
        'amount_before_fees' => 'decimal',
        'eula' => null,
        'installment_plan_number' => null,
        'is_full_captured' => null,
        'begin_lock_time' => 'date-time',
        'merchant_financed_date' => 'date-time',
        'merchant_reserve_returned_date' => 'date-time',
        'planned_full_capture' => 'date-time',
        'installment_plan_terminal_data_id' => 'int64',
        'currency_id' => 'int64',
        'ref_order_number' => null,
        'active_card_id' => 'int64',
        'base64_png_signature' => null,
        'is_charged_back' => null,
        'are_charges_held' => null,
        'auto_retry' => null,
        'pis_member_unique_id' => null,
        'pis_member_id' => 'int64',
        'subtotal' => 'decimal',
        'tax' => 'decimal',
        'shipping' => 'decimal',
        'setup_context_id' => 'int64',
        'original_amount' => 'decimal',
        'refund_amount' => 'decimal',
        'reserve_pool_amount' => 'decimal',
        'shopper_approval_date_time' => 'date-time',
        'cancellation_date_time' => 'date-time',
        'activated_date' => 'date-time',
        'de_activated_date' => 'date-time',
        'amount_for_funding' => 'decimal',
        'amount_for_funding_currency' => null,
        'amount_for_funding_exchange_rate' => 'decimal',
        'amount_for_funding_transaction_currency' => 'decimal',
        'active_card' => null,
        'currency' => null,
        'installment_plan_terminal_data' => null,
        'pis_member' => null,
        'setup_context' => null,
        'terminal' => null,
        'cart_items' => null,
        'email_audit_logs' => null,
        'fees_documents' => null,
        'fraud_detection_logs' => null,
        'funding_collect_document_details' => null,
        'installment_plan_audit_logs' => null,
        'installment_plan_events' => null,
        'installment_plan_status_log_entries' => null,
        'installments' => null,
        're_authorizations' => null,
        'refund_log_entries' => null,
        'transfer_document_details' => null,
        'active_terminal_data_id' => 'int64',
        'active_terminal_data' => null,
        'delay_resolution' => null,
        'test_mode' => null,
        'funding_types_id' => null,
        'strategy' => null,
        'status' => null,
        'purchase_method' => null,
        'extended_params_serialized_data' => null,
        'extended_params' => null,
        'auto_capture' => null,
        'items' => null,
        'amount_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'terminal_id' => 'TerminalId',
        'number_of_installments' => 'NumberOfInstallments',
        'amount' => 'Amount',
        'amount_before_fees' => 'AmountBeforeFees',
        'eula' => 'Eula',
        'installment_plan_number' => 'InstallmentPlanNumber',
        'is_full_captured' => 'IsFullCaptured',
        'begin_lock_time' => 'BeginLockTime',
        'merchant_financed_date' => 'MerchantFinancedDate',
        'merchant_reserve_returned_date' => 'MerchantReserveReturnedDate',
        'planned_full_capture' => 'PlannedFullCapture',
        'installment_plan_terminal_data_id' => 'InstallmentPlanTerminalDataId',
        'currency_id' => 'CurrencyId',
        'ref_order_number' => 'RefOrderNumber',
        'active_card_id' => 'ActiveCardId',
        'base64_png_signature' => 'Base64PngSignature',
        'is_charged_back' => 'IsChargedBack',
        'are_charges_held' => 'AreChargesHeld',
        'auto_retry' => 'AutoRetry',
        'pis_member_unique_id' => 'PisMemberUniqueId',
        'pis_member_id' => 'PisMemberId',
        'subtotal' => 'Subtotal',
        'tax' => 'Tax',
        'shipping' => 'Shipping',
        'setup_context_id' => 'SetupContextId',
        'original_amount' => 'OriginalAmount',
        'refund_amount' => 'RefundAmount',
        'reserve_pool_amount' => 'ReservePoolAmount',
        'shopper_approval_date_time' => 'ShopperApprovalDateTime',
        'cancellation_date_time' => 'CancellationDateTime',
        'activated_date' => 'ActivatedDate',
        'de_activated_date' => 'DeActivatedDate',
        'amount_for_funding' => 'AmountForFunding',
        'amount_for_funding_currency' => 'AmountForFunding_Currency',
        'amount_for_funding_exchange_rate' => 'AmountForFunding_ExchangeRate',
        'amount_for_funding_transaction_currency' => 'AmountForFunding_TransactionCurrency',
        'active_card' => 'ActiveCard',
        'currency' => 'Currency',
        'installment_plan_terminal_data' => 'InstallmentPlanTerminalData',
        'pis_member' => 'PisMember',
        'setup_context' => 'SetupContext',
        'terminal' => 'Terminal',
        'cart_items' => 'CartItems',
        'email_audit_logs' => 'EmailAuditLogs',
        'fees_documents' => 'FeesDocuments',
        'fraud_detection_logs' => 'FraudDetectionLogs',
        'funding_collect_document_details' => 'FundingCollectDocumentDetails',
        'installment_plan_audit_logs' => 'InstallmentPlanAuditLogs',
        'installment_plan_events' => 'InstallmentPlanEvents',
        'installment_plan_status_log_entries' => 'InstallmentPlanStatusLogEntries',
        'installments' => 'Installments',
        're_authorizations' => 'ReAuthorizations',
        'refund_log_entries' => 'RefundLogEntries',
        'transfer_document_details' => 'TransferDocumentDetails',
        'active_terminal_data_id' => 'ActiveTerminalDataId',
        'active_terminal_data' => 'ActiveTerminalData',
        'delay_resolution' => 'DelayResolution',
        'test_mode' => 'TestMode',
        'funding_types_id' => 'FundingTypesId',
        'strategy' => 'Strategy',
        'status' => 'Status',
        'purchase_method' => 'PurchaseMethod',
        'extended_params_serialized_data' => 'ExtendedParamsSerializedData',
        'extended_params' => 'ExtendedParams',
        'auto_capture' => 'AutoCapture',
        'items' => 'Items',
        'amount_details' => 'AmountDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'terminal_id' => 'setTerminalId',
        'number_of_installments' => 'setNumberOfInstallments',
        'amount' => 'setAmount',
        'amount_before_fees' => 'setAmountBeforeFees',
        'eula' => 'setEula',
        'installment_plan_number' => 'setInstallmentPlanNumber',
        'is_full_captured' => 'setIsFullCaptured',
        'begin_lock_time' => 'setBeginLockTime',
        'merchant_financed_date' => 'setMerchantFinancedDate',
        'merchant_reserve_returned_date' => 'setMerchantReserveReturnedDate',
        'planned_full_capture' => 'setPlannedFullCapture',
        'installment_plan_terminal_data_id' => 'setInstallmentPlanTerminalDataId',
        'currency_id' => 'setCurrencyId',
        'ref_order_number' => 'setRefOrderNumber',
        'active_card_id' => 'setActiveCardId',
        'base64_png_signature' => 'setBase64PngSignature',
        'is_charged_back' => 'setIsChargedBack',
        'are_charges_held' => 'setAreChargesHeld',
        'auto_retry' => 'setAutoRetry',
        'pis_member_unique_id' => 'setPisMemberUniqueId',
        'pis_member_id' => 'setPisMemberId',
        'subtotal' => 'setSubtotal',
        'tax' => 'setTax',
        'shipping' => 'setShipping',
        'setup_context_id' => 'setSetupContextId',
        'original_amount' => 'setOriginalAmount',
        'refund_amount' => 'setRefundAmount',
        'reserve_pool_amount' => 'setReservePoolAmount',
        'shopper_approval_date_time' => 'setShopperApprovalDateTime',
        'cancellation_date_time' => 'setCancellationDateTime',
        'activated_date' => 'setActivatedDate',
        'de_activated_date' => 'setDeActivatedDate',
        'amount_for_funding' => 'setAmountForFunding',
        'amount_for_funding_currency' => 'setAmountForFundingCurrency',
        'amount_for_funding_exchange_rate' => 'setAmountForFundingExchangeRate',
        'amount_for_funding_transaction_currency' => 'setAmountForFundingTransactionCurrency',
        'active_card' => 'setActiveCard',
        'currency' => 'setCurrency',
        'installment_plan_terminal_data' => 'setInstallmentPlanTerminalData',
        'pis_member' => 'setPisMember',
        'setup_context' => 'setSetupContext',
        'terminal' => 'setTerminal',
        'cart_items' => 'setCartItems',
        'email_audit_logs' => 'setEmailAuditLogs',
        'fees_documents' => 'setFeesDocuments',
        'fraud_detection_logs' => 'setFraudDetectionLogs',
        'funding_collect_document_details' => 'setFundingCollectDocumentDetails',
        'installment_plan_audit_logs' => 'setInstallmentPlanAuditLogs',
        'installment_plan_events' => 'setInstallmentPlanEvents',
        'installment_plan_status_log_entries' => 'setInstallmentPlanStatusLogEntries',
        'installments' => 'setInstallments',
        're_authorizations' => 'setReAuthorizations',
        'refund_log_entries' => 'setRefundLogEntries',
        'transfer_document_details' => 'setTransferDocumentDetails',
        'active_terminal_data_id' => 'setActiveTerminalDataId',
        'active_terminal_data' => 'setActiveTerminalData',
        'delay_resolution' => 'setDelayResolution',
        'test_mode' => 'setTestMode',
        'funding_types_id' => 'setFundingTypesId',
        'strategy' => 'setStrategy',
        'status' => 'setStatus',
        'purchase_method' => 'setPurchaseMethod',
        'extended_params_serialized_data' => 'setExtendedParamsSerializedData',
        'extended_params' => 'setExtendedParams',
        'auto_capture' => 'setAutoCapture',
        'items' => 'setItems',
        'amount_details' => 'setAmountDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'terminal_id' => 'getTerminalId',
        'number_of_installments' => 'getNumberOfInstallments',
        'amount' => 'getAmount',
        'amount_before_fees' => 'getAmountBeforeFees',
        'eula' => 'getEula',
        'installment_plan_number' => 'getInstallmentPlanNumber',
        'is_full_captured' => 'getIsFullCaptured',
        'begin_lock_time' => 'getBeginLockTime',
        'merchant_financed_date' => 'getMerchantFinancedDate',
        'merchant_reserve_returned_date' => 'getMerchantReserveReturnedDate',
        'planned_full_capture' => 'getPlannedFullCapture',
        'installment_plan_terminal_data_id' => 'getInstallmentPlanTerminalDataId',
        'currency_id' => 'getCurrencyId',
        'ref_order_number' => 'getRefOrderNumber',
        'active_card_id' => 'getActiveCardId',
        'base64_png_signature' => 'getBase64PngSignature',
        'is_charged_back' => 'getIsChargedBack',
        'are_charges_held' => 'getAreChargesHeld',
        'auto_retry' => 'getAutoRetry',
        'pis_member_unique_id' => 'getPisMemberUniqueId',
        'pis_member_id' => 'getPisMemberId',
        'subtotal' => 'getSubtotal',
        'tax' => 'getTax',
        'shipping' => 'getShipping',
        'setup_context_id' => 'getSetupContextId',
        'original_amount' => 'getOriginalAmount',
        'refund_amount' => 'getRefundAmount',
        'reserve_pool_amount' => 'getReservePoolAmount',
        'shopper_approval_date_time' => 'getShopperApprovalDateTime',
        'cancellation_date_time' => 'getCancellationDateTime',
        'activated_date' => 'getActivatedDate',
        'de_activated_date' => 'getDeActivatedDate',
        'amount_for_funding' => 'getAmountForFunding',
        'amount_for_funding_currency' => 'getAmountForFundingCurrency',
        'amount_for_funding_exchange_rate' => 'getAmountForFundingExchangeRate',
        'amount_for_funding_transaction_currency' => 'getAmountForFundingTransactionCurrency',
        'active_card' => 'getActiveCard',
        'currency' => 'getCurrency',
        'installment_plan_terminal_data' => 'getInstallmentPlanTerminalData',
        'pis_member' => 'getPisMember',
        'setup_context' => 'getSetupContext',
        'terminal' => 'getTerminal',
        'cart_items' => 'getCartItems',
        'email_audit_logs' => 'getEmailAuditLogs',
        'fees_documents' => 'getFeesDocuments',
        'fraud_detection_logs' => 'getFraudDetectionLogs',
        'funding_collect_document_details' => 'getFundingCollectDocumentDetails',
        'installment_plan_audit_logs' => 'getInstallmentPlanAuditLogs',
        'installment_plan_events' => 'getInstallmentPlanEvents',
        'installment_plan_status_log_entries' => 'getInstallmentPlanStatusLogEntries',
        'installments' => 'getInstallments',
        're_authorizations' => 'getReAuthorizations',
        'refund_log_entries' => 'getRefundLogEntries',
        'transfer_document_details' => 'getTransferDocumentDetails',
        'active_terminal_data_id' => 'getActiveTerminalDataId',
        'active_terminal_data' => 'getActiveTerminalData',
        'delay_resolution' => 'getDelayResolution',
        'test_mode' => 'getTestMode',
        'funding_types_id' => 'getFundingTypesId',
        'strategy' => 'getStrategy',
        'status' => 'getStatus',
        'purchase_method' => 'getPurchaseMethod',
        'extended_params_serialized_data' => 'getExtendedParamsSerializedData',
        'extended_params' => 'getExtendedParams',
        'auto_capture' => 'getAutoCapture',
        'items' => 'getItems',
        'amount_details' => 'getAmountDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['terminal_id'] = isset($data['terminal_id']) ? $data['terminal_id'] : null;
        $this->container['number_of_installments'] = isset($data['number_of_installments']) ? $data['number_of_installments'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['amount_before_fees'] = isset($data['amount_before_fees']) ? $data['amount_before_fees'] : null;
        $this->container['eula'] = isset($data['eula']) ? $data['eula'] : null;
        $this->container['installment_plan_number'] = isset($data['installment_plan_number']) ? $data['installment_plan_number'] : null;
        $this->container['is_full_captured'] = isset($data['is_full_captured']) ? $data['is_full_captured'] : null;
        $this->container['begin_lock_time'] = isset($data['begin_lock_time']) ? $data['begin_lock_time'] : null;
        $this->container['merchant_financed_date'] = isset($data['merchant_financed_date']) ? $data['merchant_financed_date'] : null;
        $this->container['merchant_reserve_returned_date'] = isset($data['merchant_reserve_returned_date']) ? $data['merchant_reserve_returned_date'] : null;
        $this->container['planned_full_capture'] = isset($data['planned_full_capture']) ? $data['planned_full_capture'] : null;
        $this->container['installment_plan_terminal_data_id'] = isset($data['installment_plan_terminal_data_id']) ? $data['installment_plan_terminal_data_id'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['ref_order_number'] = isset($data['ref_order_number']) ? $data['ref_order_number'] : null;
        $this->container['active_card_id'] = isset($data['active_card_id']) ? $data['active_card_id'] : null;
        $this->container['base64_png_signature'] = isset($data['base64_png_signature']) ? $data['base64_png_signature'] : null;
        $this->container['is_charged_back'] = isset($data['is_charged_back']) ? $data['is_charged_back'] : null;
        $this->container['are_charges_held'] = isset($data['are_charges_held']) ? $data['are_charges_held'] : null;
        $this->container['auto_retry'] = isset($data['auto_retry']) ? $data['auto_retry'] : null;
        $this->container['pis_member_unique_id'] = isset($data['pis_member_unique_id']) ? $data['pis_member_unique_id'] : null;
        $this->container['pis_member_id'] = isset($data['pis_member_id']) ? $data['pis_member_id'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['shipping'] = isset($data['shipping']) ? $data['shipping'] : null;
        $this->container['setup_context_id'] = isset($data['setup_context_id']) ? $data['setup_context_id'] : null;
        $this->container['original_amount'] = isset($data['original_amount']) ? $data['original_amount'] : null;
        $this->container['refund_amount'] = isset($data['refund_amount']) ? $data['refund_amount'] : null;
        $this->container['reserve_pool_amount'] = isset($data['reserve_pool_amount']) ? $data['reserve_pool_amount'] : null;
        $this->container['shopper_approval_date_time'] = isset($data['shopper_approval_date_time']) ? $data['shopper_approval_date_time'] : null;
        $this->container['cancellation_date_time'] = isset($data['cancellation_date_time']) ? $data['cancellation_date_time'] : null;
        $this->container['activated_date'] = isset($data['activated_date']) ? $data['activated_date'] : null;
        $this->container['de_activated_date'] = isset($data['de_activated_date']) ? $data['de_activated_date'] : null;
        $this->container['amount_for_funding'] = isset($data['amount_for_funding']) ? $data['amount_for_funding'] : null;
        $this->container['amount_for_funding_currency'] = isset($data['amount_for_funding_currency']) ? $data['amount_for_funding_currency'] : null;
        $this->container['amount_for_funding_exchange_rate'] = isset($data['amount_for_funding_exchange_rate']) ? $data['amount_for_funding_exchange_rate'] : null;
        $this->container['amount_for_funding_transaction_currency'] = isset($data['amount_for_funding_transaction_currency']) ? $data['amount_for_funding_transaction_currency'] : null;
        $this->container['active_card'] = isset($data['active_card']) ? $data['active_card'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['installment_plan_terminal_data'] = isset($data['installment_plan_terminal_data']) ? $data['installment_plan_terminal_data'] : null;
        $this->container['pis_member'] = isset($data['pis_member']) ? $data['pis_member'] : null;
        $this->container['setup_context'] = isset($data['setup_context']) ? $data['setup_context'] : null;
        $this->container['terminal'] = isset($data['terminal']) ? $data['terminal'] : null;
        $this->container['cart_items'] = isset($data['cart_items']) ? $data['cart_items'] : null;
        $this->container['email_audit_logs'] = isset($data['email_audit_logs']) ? $data['email_audit_logs'] : null;
        $this->container['fees_documents'] = isset($data['fees_documents']) ? $data['fees_documents'] : null;
        $this->container['fraud_detection_logs'] = isset($data['fraud_detection_logs']) ? $data['fraud_detection_logs'] : null;
        $this->container['funding_collect_document_details'] = isset($data['funding_collect_document_details']) ? $data['funding_collect_document_details'] : null;
        $this->container['installment_plan_audit_logs'] = isset($data['installment_plan_audit_logs']) ? $data['installment_plan_audit_logs'] : null;
        $this->container['installment_plan_events'] = isset($data['installment_plan_events']) ? $data['installment_plan_events'] : null;
        $this->container['installment_plan_status_log_entries'] = isset($data['installment_plan_status_log_entries']) ? $data['installment_plan_status_log_entries'] : null;
        $this->container['installments'] = isset($data['installments']) ? $data['installments'] : null;
        $this->container['re_authorizations'] = isset($data['re_authorizations']) ? $data['re_authorizations'] : null;
        $this->container['refund_log_entries'] = isset($data['refund_log_entries']) ? $data['refund_log_entries'] : null;
        $this->container['transfer_document_details'] = isset($data['transfer_document_details']) ? $data['transfer_document_details'] : null;
        $this->container['active_terminal_data_id'] = isset($data['active_terminal_data_id']) ? $data['active_terminal_data_id'] : null;
        $this->container['active_terminal_data'] = isset($data['active_terminal_data']) ? $data['active_terminal_data'] : null;
        $this->container['delay_resolution'] = isset($data['delay_resolution']) ? $data['delay_resolution'] : null;
        $this->container['test_mode'] = isset($data['test_mode']) ? $data['test_mode'] : null;
        $this->container['funding_types_id'] = isset($data['funding_types_id']) ? $data['funding_types_id'] : null;
        $this->container['strategy'] = isset($data['strategy']) ? $data['strategy'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['purchase_method'] = isset($data['purchase_method']) ? $data['purchase_method'] : null;
        $this->container['extended_params_serialized_data'] = isset($data['extended_params_serialized_data']) ? $data['extended_params_serialized_data'] : null;
        $this->container['extended_params'] = isset($data['extended_params']) ? $data['extended_params'] : null;
        $this->container['auto_capture'] = isset($data['auto_capture']) ? $data['auto_capture'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['amount_details'] = isset($data['amount_details']) ? $data['amount_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['terminal_id'] === null) {
            $invalidProperties[] = "'terminal_id' can't be null";
        }
        if ($this->container['number_of_installments'] === null) {
            $invalidProperties[] = "'number_of_installments' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['amount_before_fees'] === null) {
            $invalidProperties[] = "'amount_before_fees' can't be null";
        }
        if ($this->container['eula'] === null) {
            $invalidProperties[] = "'eula' can't be null";
        }
        if ($this->container['is_full_captured'] === null) {
            $invalidProperties[] = "'is_full_captured' can't be null";
        }
        if ($this->container['installment_plan_terminal_data_id'] === null) {
            $invalidProperties[] = "'installment_plan_terminal_data_id' can't be null";
        }
        if ($this->container['currency_id'] === null) {
            $invalidProperties[] = "'currency_id' can't be null";
        }
        if ($this->container['is_charged_back'] === null) {
            $invalidProperties[] = "'is_charged_back' can't be null";
        }
        if ($this->container['are_charges_held'] === null) {
            $invalidProperties[] = "'are_charges_held' can't be null";
        }
        if ($this->container['auto_retry'] === null) {
            $invalidProperties[] = "'auto_retry' can't be null";
        }
        if ($this->container['subtotal'] === null) {
            $invalidProperties[] = "'subtotal' can't be null";
        }
        if ($this->container['tax'] === null) {
            $invalidProperties[] = "'tax' can't be null";
        }
        if ($this->container['shipping'] === null) {
            $invalidProperties[] = "'shipping' can't be null";
        }
        if ($this->container['setup_context_id'] === null) {
            $invalidProperties[] = "'setup_context_id' can't be null";
        }
        if ($this->container['original_amount'] === null) {
            $invalidProperties[] = "'original_amount' can't be null";
        }
        if ($this->container['refund_amount'] === null) {
            $invalidProperties[] = "'refund_amount' can't be null";
        }
        if ($this->container['reserve_pool_amount'] === null) {
            $invalidProperties[] = "'reserve_pool_amount' can't be null";
        }
        if ($this->container['amount_for_funding'] === null) {
            $invalidProperties[] = "'amount_for_funding' can't be null";
        }
        if ($this->container['amount_for_funding_exchange_rate'] === null) {
            $invalidProperties[] = "'amount_for_funding_exchange_rate' can't be null";
        }
        if ($this->container['amount_for_funding_transaction_currency'] === null) {
            $invalidProperties[] = "'amount_for_funding_transaction_currency' can't be null";
        }
        if ($this->container['test_mode'] === null) {
            $invalidProperties[] = "'test_mode' can't be null";
        }
        if ($this->container['funding_types_id'] === null) {
            $invalidProperties[] = "'funding_types_id' can't be null";
        }
        if ($this->container['strategy'] === null) {
            $invalidProperties[] = "'strategy' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['purchase_method'] === null) {
            $invalidProperties[] = "'purchase_method' can't be null";
        }
        if ($this->container['auto_capture'] === null) {
            $invalidProperties[] = "'auto_capture' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets terminal_id
     *
     * @return int
     */
    public function getTerminalId()
    {
        return $this->container['terminal_id'];
    }

    /**
     * Sets terminal_id
     *
     * @param int $terminal_id terminal_id
     *
     * @return $this
     */
    public function setTerminalId($terminal_id)
    {
        $this->container['terminal_id'] = $terminal_id;

        return $this;
    }

    /**
     * Gets number_of_installments
     *
     * @return int
     */
    public function getNumberOfInstallments()
    {
        return $this->container['number_of_installments'];
    }

    /**
     * Sets number_of_installments
     *
     * @param int $number_of_installments number_of_installments
     *
     * @return $this
     */
    public function setNumberOfInstallments($number_of_installments)
    {
        $this->container['number_of_installments'] = $number_of_installments;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_before_fees
     *
     * @return float
     */
    public function getAmountBeforeFees()
    {
        return $this->container['amount_before_fees'];
    }

    /**
     * Sets amount_before_fees
     *
     * @param float $amount_before_fees amount_before_fees
     *
     * @return $this
     */
    public function setAmountBeforeFees($amount_before_fees)
    {
        $this->container['amount_before_fees'] = $amount_before_fees;

        return $this;
    }

    /**
     * Gets eula
     *
     * @return bool
     */
    public function getEula()
    {
        return $this->container['eula'];
    }

    /**
     * Sets eula
     *
     * @param bool $eula eula
     *
     * @return $this
     */
    public function setEula($eula)
    {
        $this->container['eula'] = $eula;

        return $this;
    }

    /**
     * Gets installment_plan_number
     *
     * @return string
     */
    public function getInstallmentPlanNumber()
    {
        return $this->container['installment_plan_number'];
    }

    /**
     * Sets installment_plan_number
     *
     * @param string $installment_plan_number installment_plan_number
     *
     * @return $this
     */
    public function setInstallmentPlanNumber($installment_plan_number)
    {
        $this->container['installment_plan_number'] = $installment_plan_number;

        return $this;
    }

    /**
     * Gets is_full_captured
     *
     * @return bool
     */
    public function getIsFullCaptured()
    {
        return $this->container['is_full_captured'];
    }

    /**
     * Sets is_full_captured
     *
     * @param bool $is_full_captured is_full_captured
     *
     * @return $this
     */
    public function setIsFullCaptured($is_full_captured)
    {
        $this->container['is_full_captured'] = $is_full_captured;

        return $this;
    }

    /**
     * Gets begin_lock_time
     *
     * @return \DateTime
     */
    public function getBeginLockTime()
    {
        return $this->container['begin_lock_time'];
    }

    /**
     * Sets begin_lock_time
     *
     * @param \DateTime $begin_lock_time begin_lock_time
     *
     * @return $this
     */
    public function setBeginLockTime($begin_lock_time)
    {
        $this->container['begin_lock_time'] = $begin_lock_time;

        return $this;
    }

    /**
     * Gets merchant_financed_date
     *
     * @return \DateTime
     */
    public function getMerchantFinancedDate()
    {
        return $this->container['merchant_financed_date'];
    }

    /**
     * Sets merchant_financed_date
     *
     * @param \DateTime $merchant_financed_date merchant_financed_date
     *
     * @return $this
     */
    public function setMerchantFinancedDate($merchant_financed_date)
    {
        $this->container['merchant_financed_date'] = $merchant_financed_date;

        return $this;
    }

    /**
     * Gets merchant_reserve_returned_date
     *
     * @return \DateTime
     */
    public function getMerchantReserveReturnedDate()
    {
        return $this->container['merchant_reserve_returned_date'];
    }

    /**
     * Sets merchant_reserve_returned_date
     *
     * @param \DateTime $merchant_reserve_returned_date merchant_reserve_returned_date
     *
     * @return $this
     */
    public function setMerchantReserveReturnedDate($merchant_reserve_returned_date)
    {
        $this->container['merchant_reserve_returned_date'] = $merchant_reserve_returned_date;

        return $this;
    }

    /**
     * Gets planned_full_capture
     *
     * @return \DateTime
     */
    public function getPlannedFullCapture()
    {
        return $this->container['planned_full_capture'];
    }

    /**
     * Sets planned_full_capture
     *
     * @param \DateTime $planned_full_capture planned_full_capture
     *
     * @return $this
     */
    public function setPlannedFullCapture($planned_full_capture)
    {
        $this->container['planned_full_capture'] = $planned_full_capture;

        return $this;
    }

    /**
     * Gets installment_plan_terminal_data_id
     *
     * @return int
     */
    public function getInstallmentPlanTerminalDataId()
    {
        return $this->container['installment_plan_terminal_data_id'];
    }

    /**
     * Sets installment_plan_terminal_data_id
     *
     * @param int $installment_plan_terminal_data_id installment_plan_terminal_data_id
     *
     * @return $this
     */
    public function setInstallmentPlanTerminalDataId($installment_plan_terminal_data_id)
    {
        $this->container['installment_plan_terminal_data_id'] = $installment_plan_terminal_data_id;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return int
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param int $currency_id currency_id
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets ref_order_number
     *
     * @return string
     */
    public function getRefOrderNumber()
    {
        return $this->container['ref_order_number'];
    }

    /**
     * Sets ref_order_number
     *
     * @param string $ref_order_number ref_order_number
     *
     * @return $this
     */
    public function setRefOrderNumber($ref_order_number)
    {
        $this->container['ref_order_number'] = $ref_order_number;

        return $this;
    }

    /**
     * Gets active_card_id
     *
     * @return int
     */
    public function getActiveCardId()
    {
        return $this->container['active_card_id'];
    }

    /**
     * Sets active_card_id
     *
     * @param int $active_card_id active_card_id
     *
     * @return $this
     */
    public function setActiveCardId($active_card_id)
    {
        $this->container['active_card_id'] = $active_card_id;

        return $this;
    }

    /**
     * Gets base64_png_signature
     *
     * @return string
     */
    public function getBase64PngSignature()
    {
        return $this->container['base64_png_signature'];
    }

    /**
     * Sets base64_png_signature
     *
     * @param string $base64_png_signature base64_png_signature
     *
     * @return $this
     */
    public function setBase64PngSignature($base64_png_signature)
    {
        $this->container['base64_png_signature'] = $base64_png_signature;

        return $this;
    }

    /**
     * Gets is_charged_back
     *
     * @return bool
     */
    public function getIsChargedBack()
    {
        return $this->container['is_charged_back'];
    }

    /**
     * Sets is_charged_back
     *
     * @param bool $is_charged_back is_charged_back
     *
     * @return $this
     */
    public function setIsChargedBack($is_charged_back)
    {
        $this->container['is_charged_back'] = $is_charged_back;

        return $this;
    }

    /**
     * Gets are_charges_held
     *
     * @return bool
     */
    public function getAreChargesHeld()
    {
        return $this->container['are_charges_held'];
    }

    /**
     * Sets are_charges_held
     *
     * @param bool $are_charges_held are_charges_held
     *
     * @return $this
     */
    public function setAreChargesHeld($are_charges_held)
    {
        $this->container['are_charges_held'] = $are_charges_held;

        return $this;
    }

    /**
     * Gets auto_retry
     *
     * @return bool
     */
    public function getAutoRetry()
    {
        return $this->container['auto_retry'];
    }

    /**
     * Sets auto_retry
     *
     * @param bool $auto_retry auto_retry
     *
     * @return $this
     */
    public function setAutoRetry($auto_retry)
    {
        $this->container['auto_retry'] = $auto_retry;

        return $this;
    }

    /**
     * Gets pis_member_unique_id
     *
     * @return string
     */
    public function getPisMemberUniqueId()
    {
        return $this->container['pis_member_unique_id'];
    }

    /**
     * Sets pis_member_unique_id
     *
     * @param string $pis_member_unique_id pis_member_unique_id
     *
     * @return $this
     */
    public function setPisMemberUniqueId($pis_member_unique_id)
    {
        $this->container['pis_member_unique_id'] = $pis_member_unique_id;

        return $this;
    }

    /**
     * Gets pis_member_id
     *
     * @return int
     */
    public function getPisMemberId()
    {
        return $this->container['pis_member_id'];
    }

    /**
     * Sets pis_member_id
     *
     * @param int $pis_member_id pis_member_id
     *
     * @return $this
     */
    public function setPisMemberId($pis_member_id)
    {
        $this->container['pis_member_id'] = $pis_member_id;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return float
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param float $subtotal subtotal
     *
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return float
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param float $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets shipping
     *
     * @return float
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     *
     * @param float $shipping shipping
     *
     * @return $this
     */
    public function setShipping($shipping)
    {
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets setup_context_id
     *
     * @return int
     */
    public function getSetupContextId()
    {
        return $this->container['setup_context_id'];
    }

    /**
     * Sets setup_context_id
     *
     * @param int $setup_context_id setup_context_id
     *
     * @return $this
     */
    public function setSetupContextId($setup_context_id)
    {
        $this->container['setup_context_id'] = $setup_context_id;

        return $this;
    }

    /**
     * Gets original_amount
     *
     * @return float
     */
    public function getOriginalAmount()
    {
        return $this->container['original_amount'];
    }

    /**
     * Sets original_amount
     *
     * @param float $original_amount original_amount
     *
     * @return $this
     */
    public function setOriginalAmount($original_amount)
    {
        $this->container['original_amount'] = $original_amount;

        return $this;
    }

    /**
     * Gets refund_amount
     *
     * @return float
     */
    public function getRefundAmount()
    {
        return $this->container['refund_amount'];
    }

    /**
     * Sets refund_amount
     *
     * @param float $refund_amount refund_amount
     *
     * @return $this
     */
    public function setRefundAmount($refund_amount)
    {
        $this->container['refund_amount'] = $refund_amount;

        return $this;
    }

    /**
     * Gets reserve_pool_amount
     *
     * @return float
     */
    public function getReservePoolAmount()
    {
        return $this->container['reserve_pool_amount'];
    }

    /**
     * Sets reserve_pool_amount
     *
     * @param float $reserve_pool_amount reserve_pool_amount
     *
     * @return $this
     */
    public function setReservePoolAmount($reserve_pool_amount)
    {
        $this->container['reserve_pool_amount'] = $reserve_pool_amount;

        return $this;
    }

    /**
     * Gets shopper_approval_date_time
     *
     * @return \DateTime
     */
    public function getShopperApprovalDateTime()
    {
        return $this->container['shopper_approval_date_time'];
    }

    /**
     * Sets shopper_approval_date_time
     *
     * @param \DateTime $shopper_approval_date_time shopper_approval_date_time
     *
     * @return $this
     */
    public function setShopperApprovalDateTime($shopper_approval_date_time)
    {
        $this->container['shopper_approval_date_time'] = $shopper_approval_date_time;

        return $this;
    }

    /**
     * Gets cancellation_date_time
     *
     * @return \DateTime
     */
    public function getCancellationDateTime()
    {
        return $this->container['cancellation_date_time'];
    }

    /**
     * Sets cancellation_date_time
     *
     * @param \DateTime $cancellation_date_time cancellation_date_time
     *
     * @return $this
     */
    public function setCancellationDateTime($cancellation_date_time)
    {
        $this->container['cancellation_date_time'] = $cancellation_date_time;

        return $this;
    }

    /**
     * Gets activated_date
     *
     * @return \DateTime
     */
    public function getActivatedDate()
    {
        return $this->container['activated_date'];
    }

    /**
     * Sets activated_date
     *
     * @param \DateTime $activated_date activated_date
     *
     * @return $this
     */
    public function setActivatedDate($activated_date)
    {
        $this->container['activated_date'] = $activated_date;

        return $this;
    }

    /**
     * Gets de_activated_date
     *
     * @return \DateTime
     */
    public function getDeActivatedDate()
    {
        return $this->container['de_activated_date'];
    }

    /**
     * Sets de_activated_date
     *
     * @param \DateTime $de_activated_date de_activated_date
     *
     * @return $this
     */
    public function setDeActivatedDate($de_activated_date)
    {
        $this->container['de_activated_date'] = $de_activated_date;

        return $this;
    }

    /**
     * Gets amount_for_funding
     *
     * @return float
     */
    public function getAmountForFunding()
    {
        return $this->container['amount_for_funding'];
    }

    /**
     * Sets amount_for_funding
     *
     * @param float $amount_for_funding amount_for_funding
     *
     * @return $this
     */
    public function setAmountForFunding($amount_for_funding)
    {
        $this->container['amount_for_funding'] = $amount_for_funding;

        return $this;
    }

    /**
     * Gets amount_for_funding_currency
     *
     * @return \SplititSdkClient\Model\Currencies
     */
    public function getAmountForFundingCurrency()
    {
        return $this->container['amount_for_funding_currency'];
    }

    /**
     * Sets amount_for_funding_currency
     *
     * @param \SplititSdkClient\Model\Currencies $amount_for_funding_currency amount_for_funding_currency
     *
     * @return $this
     */
    public function setAmountForFundingCurrency($amount_for_funding_currency)
    {
        $this->container['amount_for_funding_currency'] = $amount_for_funding_currency;

        return $this;
    }

    /**
     * Gets amount_for_funding_exchange_rate
     *
     * @return float
     */
    public function getAmountForFundingExchangeRate()
    {
        return $this->container['amount_for_funding_exchange_rate'];
    }

    /**
     * Sets amount_for_funding_exchange_rate
     *
     * @param float $amount_for_funding_exchange_rate amount_for_funding_exchange_rate
     *
     * @return $this
     */
    public function setAmountForFundingExchangeRate($amount_for_funding_exchange_rate)
    {
        $this->container['amount_for_funding_exchange_rate'] = $amount_for_funding_exchange_rate;

        return $this;
    }

    /**
     * Gets amount_for_funding_transaction_currency
     *
     * @return float
     */
    public function getAmountForFundingTransactionCurrency()
    {
        return $this->container['amount_for_funding_transaction_currency'];
    }

    /**
     * Sets amount_for_funding_transaction_currency
     *
     * @param float $amount_for_funding_transaction_currency amount_for_funding_transaction_currency
     *
     * @return $this
     */
    public function setAmountForFundingTransactionCurrency($amount_for_funding_transaction_currency)
    {
        $this->container['amount_for_funding_transaction_currency'] = $amount_for_funding_transaction_currency;

        return $this;
    }

    /**
     * Gets active_card
     *
     * @return \SplititSdkClient\Model\Cards
     */
    public function getActiveCard()
    {
        return $this->container['active_card'];
    }

    /**
     * Sets active_card
     *
     * @param \SplititSdkClient\Model\Cards $active_card active_card
     *
     * @return $this
     */
    public function setActiveCard($active_card)
    {
        $this->container['active_card'] = $active_card;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \SplititSdkClient\Model\Currencies
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \SplititSdkClient\Model\Currencies $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets installment_plan_terminal_data
     *
     * @return \SplititSdkClient\Model\InstallmentPlanTerminalDatas
     */
    public function getInstallmentPlanTerminalData()
    {
        return $this->container['installment_plan_terminal_data'];
    }

    /**
     * Sets installment_plan_terminal_data
     *
     * @param \SplititSdkClient\Model\InstallmentPlanTerminalDatas $installment_plan_terminal_data installment_plan_terminal_data
     *
     * @return $this
     */
    public function setInstallmentPlanTerminalData($installment_plan_terminal_data)
    {
        $this->container['installment_plan_terminal_data'] = $installment_plan_terminal_data;

        return $this;
    }

    /**
     * Gets pis_member
     *
     * @return object
     */
    public function getPisMember()
    {
        return $this->container['pis_member'];
    }

    /**
     * Sets pis_member
     *
     * @param object $pis_member pis_member
     *
     * @return $this
     */
    public function setPisMember($pis_member)
    {
        $this->container['pis_member'] = $pis_member;

        return $this;
    }

    /**
     * Gets setup_context
     *
     * @return \SplititSdkClient\Model\InstallmentPlanSetupContexts
     */
    public function getSetupContext()
    {
        return $this->container['setup_context'];
    }

    /**
     * Sets setup_context
     *
     * @param \SplititSdkClient\Model\InstallmentPlanSetupContexts $setup_context setup_context
     *
     * @return $this
     */
    public function setSetupContext($setup_context)
    {
        $this->container['setup_context'] = $setup_context;

        return $this;
    }

    /**
     * Gets terminal
     *
     * @return \SplititSdkClient\Model\Terminals
     */
    public function getTerminal()
    {
        return $this->container['terminal'];
    }

    /**
     * Sets terminal
     *
     * @param \SplititSdkClient\Model\Terminals $terminal terminal
     *
     * @return $this
     */
    public function setTerminal($terminal)
    {
        $this->container['terminal'] = $terminal;

        return $this;
    }

    /**
     * Gets cart_items
     *
     * @return \SplititSdkClient\Model\CartItems[]
     */
    public function getCartItems()
    {
        return $this->container['cart_items'];
    }

    /**
     * Sets cart_items
     *
     * @param \SplititSdkClient\Model\CartItems[] $cart_items cart_items
     *
     * @return $this
     */
    public function setCartItems($cart_items)
    {
        $this->container['cart_items'] = $cart_items;

        return $this;
    }

    /**
     * Gets email_audit_logs
     *
     * @return \SplititSdkClient\Model\EmailAuditLogs[]
     */
    public function getEmailAuditLogs()
    {
        return $this->container['email_audit_logs'];
    }

    /**
     * Sets email_audit_logs
     *
     * @param \SplititSdkClient\Model\EmailAuditLogs[] $email_audit_logs email_audit_logs
     *
     * @return $this
     */
    public function setEmailAuditLogs($email_audit_logs)
    {
        $this->container['email_audit_logs'] = $email_audit_logs;

        return $this;
    }

    /**
     * Gets fees_documents
     *
     * @return \SplititSdkClient\Model\FeesDocuments[]
     */
    public function getFeesDocuments()
    {
        return $this->container['fees_documents'];
    }

    /**
     * Sets fees_documents
     *
     * @param \SplititSdkClient\Model\FeesDocuments[] $fees_documents fees_documents
     *
     * @return $this
     */
    public function setFeesDocuments($fees_documents)
    {
        $this->container['fees_documents'] = $fees_documents;

        return $this;
    }

    /**
     * Gets fraud_detection_logs
     *
     * @return \SplititSdkClient\Model\FraudDetectionLogs[]
     */
    public function getFraudDetectionLogs()
    {
        return $this->container['fraud_detection_logs'];
    }

    /**
     * Sets fraud_detection_logs
     *
     * @param \SplititSdkClient\Model\FraudDetectionLogs[] $fraud_detection_logs fraud_detection_logs
     *
     * @return $this
     */
    public function setFraudDetectionLogs($fraud_detection_logs)
    {
        $this->container['fraud_detection_logs'] = $fraud_detection_logs;

        return $this;
    }

    /**
     * Gets funding_collect_document_details
     *
     * @return \SplititSdkClient\Model\FundingCollectDocumentDetails[]
     */
    public function getFundingCollectDocumentDetails()
    {
        return $this->container['funding_collect_document_details'];
    }

    /**
     * Sets funding_collect_document_details
     *
     * @param \SplititSdkClient\Model\FundingCollectDocumentDetails[] $funding_collect_document_details funding_collect_document_details
     *
     * @return $this
     */
    public function setFundingCollectDocumentDetails($funding_collect_document_details)
    {
        $this->container['funding_collect_document_details'] = $funding_collect_document_details;

        return $this;
    }

    /**
     * Gets installment_plan_audit_logs
     *
     * @return \SplititSdkClient\Model\InstallmentPlanAuditLogs[]
     */
    public function getInstallmentPlanAuditLogs()
    {
        return $this->container['installment_plan_audit_logs'];
    }

    /**
     * Sets installment_plan_audit_logs
     *
     * @param \SplititSdkClient\Model\InstallmentPlanAuditLogs[] $installment_plan_audit_logs installment_plan_audit_logs
     *
     * @return $this
     */
    public function setInstallmentPlanAuditLogs($installment_plan_audit_logs)
    {
        $this->container['installment_plan_audit_logs'] = $installment_plan_audit_logs;

        return $this;
    }

    /**
     * Gets installment_plan_events
     *
     * @return \SplititSdkClient\Model\InstallmentPlanEvents[]
     */
    public function getInstallmentPlanEvents()
    {
        return $this->container['installment_plan_events'];
    }

    /**
     * Sets installment_plan_events
     *
     * @param \SplititSdkClient\Model\InstallmentPlanEvents[] $installment_plan_events installment_plan_events
     *
     * @return $this
     */
    public function setInstallmentPlanEvents($installment_plan_events)
    {
        $this->container['installment_plan_events'] = $installment_plan_events;

        return $this;
    }

    /**
     * Gets installment_plan_status_log_entries
     *
     * @return \SplititSdkClient\Model\InstallmentPlanStatusLogEntries[]
     */
    public function getInstallmentPlanStatusLogEntries()
    {
        return $this->container['installment_plan_status_log_entries'];
    }

    /**
     * Sets installment_plan_status_log_entries
     *
     * @param \SplititSdkClient\Model\InstallmentPlanStatusLogEntries[] $installment_plan_status_log_entries installment_plan_status_log_entries
     *
     * @return $this
     */
    public function setInstallmentPlanStatusLogEntries($installment_plan_status_log_entries)
    {
        $this->container['installment_plan_status_log_entries'] = $installment_plan_status_log_entries;

        return $this;
    }

    /**
     * Gets installments
     *
     * @return \SplititSdkClient\Model\Installments[]
     */
    public function getInstallments()
    {
        return $this->container['installments'];
    }

    /**
     * Sets installments
     *
     * @param \SplititSdkClient\Model\Installments[] $installments installments
     *
     * @return $this
     */
    public function setInstallments($installments)
    {
        $this->container['installments'] = $installments;

        return $this;
    }

    /**
     * Gets re_authorizations
     *
     * @return \SplititSdkClient\Model\ReAuthorizations[]
     */
    public function getReAuthorizations()
    {
        return $this->container['re_authorizations'];
    }

    /**
     * Sets re_authorizations
     *
     * @param \SplititSdkClient\Model\ReAuthorizations[] $re_authorizations re_authorizations
     *
     * @return $this
     */
    public function setReAuthorizations($re_authorizations)
    {
        $this->container['re_authorizations'] = $re_authorizations;

        return $this;
    }

    /**
     * Gets refund_log_entries
     *
     * @return \SplititSdkClient\Model\RefundLogEntries[]
     */
    public function getRefundLogEntries()
    {
        return $this->container['refund_log_entries'];
    }

    /**
     * Sets refund_log_entries
     *
     * @param \SplititSdkClient\Model\RefundLogEntries[] $refund_log_entries refund_log_entries
     *
     * @return $this
     */
    public function setRefundLogEntries($refund_log_entries)
    {
        $this->container['refund_log_entries'] = $refund_log_entries;

        return $this;
    }

    /**
     * Gets transfer_document_details
     *
     * @return \SplititSdkClient\Model\TransferDocumentDetails[]
     */
    public function getTransferDocumentDetails()
    {
        return $this->container['transfer_document_details'];
    }

    /**
     * Sets transfer_document_details
     *
     * @param \SplititSdkClient\Model\TransferDocumentDetails[] $transfer_document_details transfer_document_details
     *
     * @return $this
     */
    public function setTransferDocumentDetails($transfer_document_details)
    {
        $this->container['transfer_document_details'] = $transfer_document_details;

        return $this;
    }

    /**
     * Gets active_terminal_data_id
     *
     * @return int
     */
    public function getActiveTerminalDataId()
    {
        return $this->container['active_terminal_data_id'];
    }

    /**
     * Sets active_terminal_data_id
     *
     * @param int $active_terminal_data_id active_terminal_data_id
     *
     * @return $this
     */
    public function setActiveTerminalDataId($active_terminal_data_id)
    {
        $this->container['active_terminal_data_id'] = $active_terminal_data_id;

        return $this;
    }

    /**
     * Gets active_terminal_data
     *
     * @return \SplititSdkClient\Model\TerminalGatewayDatas
     */
    public function getActiveTerminalData()
    {
        return $this->container['active_terminal_data'];
    }

    /**
     * Sets active_terminal_data
     *
     * @param \SplititSdkClient\Model\TerminalGatewayDatas $active_terminal_data active_terminal_data
     *
     * @return $this
     */
    public function setActiveTerminalData($active_terminal_data)
    {
        $this->container['active_terminal_data'] = $active_terminal_data;

        return $this;
    }

    /**
     * Gets delay_resolution
     *
     * @return \SplititSdkClient\Model\DelayResolution
     */
    public function getDelayResolution()
    {
        return $this->container['delay_resolution'];
    }

    /**
     * Sets delay_resolution
     *
     * @param \SplititSdkClient\Model\DelayResolution $delay_resolution delay_resolution
     *
     * @return $this
     */
    public function setDelayResolution($delay_resolution)
    {
        $this->container['delay_resolution'] = $delay_resolution;

        return $this;
    }

    /**
     * Gets test_mode
     *
     * @return \SplititSdkClient\Model\TestModes
     */
    public function getTestMode()
    {
        return $this->container['test_mode'];
    }

    /**
     * Sets test_mode
     *
     * @param \SplititSdkClient\Model\TestModes $test_mode test_mode
     *
     * @return $this
     */
    public function setTestMode($test_mode)
    {
        $this->container['test_mode'] = $test_mode;

        return $this;
    }

    /**
     * Gets funding_types_id
     *
     * @return \SplititSdkClient\Model\MoneyFlows
     */
    public function getFundingTypesId()
    {
        return $this->container['funding_types_id'];
    }

    /**
     * Sets funding_types_id
     *
     * @param \SplititSdkClient\Model\MoneyFlows $funding_types_id funding_types_id
     *
     * @return $this
     */
    public function setFundingTypesId($funding_types_id)
    {
        $this->container['funding_types_id'] = $funding_types_id;

        return $this;
    }

    /**
     * Gets strategy
     *
     * @return \SplititSdkClient\Model\PlanStrategy
     */
    public function getStrategy()
    {
        return $this->container['strategy'];
    }

    /**
     * Sets strategy
     *
     * @param \SplititSdkClient\Model\PlanStrategy $strategy strategy
     *
     * @return $this
     */
    public function setStrategy($strategy)
    {
        $this->container['strategy'] = $strategy;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \SplititSdkClient\Model\InstallmentPlanStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \SplititSdkClient\Model\InstallmentPlanStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets purchase_method
     *
     * @return \SplititSdkClient\Model\PurchaseMethod
     */
    public function getPurchaseMethod()
    {
        return $this->container['purchase_method'];
    }

    /**
     * Sets purchase_method
     *
     * @param \SplititSdkClient\Model\PurchaseMethod $purchase_method purchase_method
     *
     * @return $this
     */
    public function setPurchaseMethod($purchase_method)
    {
        $this->container['purchase_method'] = $purchase_method;

        return $this;
    }

    /**
     * Gets extended_params_serialized_data
     *
     * @return string
     */
    public function getExtendedParamsSerializedData()
    {
        return $this->container['extended_params_serialized_data'];
    }

    /**
     * Sets extended_params_serialized_data
     *
     * @param string $extended_params_serialized_data extended_params_serialized_data
     *
     * @return $this
     */
    public function setExtendedParamsSerializedData($extended_params_serialized_data)
    {
        $this->container['extended_params_serialized_data'] = $extended_params_serialized_data;

        return $this;
    }

    /**
     * Gets extended_params
     *
     * @return map[string,string]
     */
    public function getExtendedParams()
    {
        return $this->container['extended_params'];
    }

    /**
     * Sets extended_params
     *
     * @param map[string,string] $extended_params extended_params
     *
     * @return $this
     */
    public function setExtendedParams($extended_params)
    {
        $this->container['extended_params'] = $extended_params;

        return $this;
    }

    /**
     * Gets auto_capture
     *
     * @return bool
     */
    public function getAutoCapture()
    {
        return $this->container['auto_capture'];
    }

    /**
     * Sets auto_capture
     *
     * @param bool $auto_capture auto_capture
     *
     * @return $this
     */
    public function setAutoCapture($auto_capture)
    {
        $this->container['auto_capture'] = $auto_capture;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \SplititSdkClient\Model\CartItems[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \SplititSdkClient\Model\CartItems[] $items items
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets amount_details
     *
     * @return \SplititSdkClient\Model\AmountDetails2
     */
    public function getAmountDetails()
    {
        return $this->container['amount_details'];
    }

    /**
     * Sets amount_details
     *
     * @param \SplititSdkClient\Model\AmountDetails2 $amount_details amount_details
     *
     * @return $this
     */
    public function setAmountDetails($amount_details)
    {
        $this->container['amount_details'] = $amount_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


