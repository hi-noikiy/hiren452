<?php
/**
 * InstallmentPlanTerminalDatas
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * InstallmentPlanTerminalDatas Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InstallmentPlanTerminalDatas implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InstallmentPlanTerminalDatas';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'scp_variable_cost_annual_percent' => 'float',
        'scp_funding_percent' => 'float',
        'scp_reserve_pool_percent' => 'float',
        'scp_return_merchant_max_days' => 'int',
        'scp_revenue_share_percent' => 'float',
        'scp_fixed_cost' => 'float',
        'accounting_currency_id' => 'int',
        'funding_rule_scp_setting_id' => 'int',
        'fees_rule_data_id' => 'int',
        'accounting_currency' => '\SplititSdkClient\Model\Currencies',
        'fees_rule_data' => '\SplititSdkClient\Model\FeesRuleDatas',
        'funding_rule_scp_setting' => '\SplititSdkClient\Model\FundingRuleDataScpProviderSetting',
        'installment_plans' => '\SplititSdkClient\Model\InstallmentPlans[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'scp_variable_cost_annual_percent' => 'decimal',
        'scp_funding_percent' => 'decimal',
        'scp_reserve_pool_percent' => 'decimal',
        'scp_return_merchant_max_days' => 'int32',
        'scp_revenue_share_percent' => 'decimal',
        'scp_fixed_cost' => 'decimal',
        'accounting_currency_id' => 'int64',
        'funding_rule_scp_setting_id' => 'int64',
        'fees_rule_data_id' => 'int64',
        'accounting_currency' => null,
        'fees_rule_data' => null,
        'funding_rule_scp_setting' => null,
        'installment_plans' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'scp_variable_cost_annual_percent' => 'ScpVariableCostAnnualPercent',
        'scp_funding_percent' => 'ScpFundingPercent',
        'scp_reserve_pool_percent' => 'ScpReservePoolPercent',
        'scp_return_merchant_max_days' => 'ScpReturnMerchantMaxDays',
        'scp_revenue_share_percent' => 'ScpRevenueSharePercent',
        'scp_fixed_cost' => 'ScpFixedCost',
        'accounting_currency_id' => 'AccountingCurrencyId',
        'funding_rule_scp_setting_id' => 'FundingRuleScpSettingId',
        'fees_rule_data_id' => 'FeesRuleDataId',
        'accounting_currency' => 'AccountingCurrency',
        'fees_rule_data' => 'FeesRuleData',
        'funding_rule_scp_setting' => 'FundingRuleScpSetting',
        'installment_plans' => 'InstallmentPlans'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'scp_variable_cost_annual_percent' => 'setScpVariableCostAnnualPercent',
        'scp_funding_percent' => 'setScpFundingPercent',
        'scp_reserve_pool_percent' => 'setScpReservePoolPercent',
        'scp_return_merchant_max_days' => 'setScpReturnMerchantMaxDays',
        'scp_revenue_share_percent' => 'setScpRevenueSharePercent',
        'scp_fixed_cost' => 'setScpFixedCost',
        'accounting_currency_id' => 'setAccountingCurrencyId',
        'funding_rule_scp_setting_id' => 'setFundingRuleScpSettingId',
        'fees_rule_data_id' => 'setFeesRuleDataId',
        'accounting_currency' => 'setAccountingCurrency',
        'fees_rule_data' => 'setFeesRuleData',
        'funding_rule_scp_setting' => 'setFundingRuleScpSetting',
        'installment_plans' => 'setInstallmentPlans'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'scp_variable_cost_annual_percent' => 'getScpVariableCostAnnualPercent',
        'scp_funding_percent' => 'getScpFundingPercent',
        'scp_reserve_pool_percent' => 'getScpReservePoolPercent',
        'scp_return_merchant_max_days' => 'getScpReturnMerchantMaxDays',
        'scp_revenue_share_percent' => 'getScpRevenueSharePercent',
        'scp_fixed_cost' => 'getScpFixedCost',
        'accounting_currency_id' => 'getAccountingCurrencyId',
        'funding_rule_scp_setting_id' => 'getFundingRuleScpSettingId',
        'fees_rule_data_id' => 'getFeesRuleDataId',
        'accounting_currency' => 'getAccountingCurrency',
        'fees_rule_data' => 'getFeesRuleData',
        'funding_rule_scp_setting' => 'getFundingRuleScpSetting',
        'installment_plans' => 'getInstallmentPlans'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['scp_variable_cost_annual_percent'] = isset($data['scp_variable_cost_annual_percent']) ? $data['scp_variable_cost_annual_percent'] : null;
        $this->container['scp_funding_percent'] = isset($data['scp_funding_percent']) ? $data['scp_funding_percent'] : null;
        $this->container['scp_reserve_pool_percent'] = isset($data['scp_reserve_pool_percent']) ? $data['scp_reserve_pool_percent'] : null;
        $this->container['scp_return_merchant_max_days'] = isset($data['scp_return_merchant_max_days']) ? $data['scp_return_merchant_max_days'] : null;
        $this->container['scp_revenue_share_percent'] = isset($data['scp_revenue_share_percent']) ? $data['scp_revenue_share_percent'] : null;
        $this->container['scp_fixed_cost'] = isset($data['scp_fixed_cost']) ? $data['scp_fixed_cost'] : null;
        $this->container['accounting_currency_id'] = isset($data['accounting_currency_id']) ? $data['accounting_currency_id'] : null;
        $this->container['funding_rule_scp_setting_id'] = isset($data['funding_rule_scp_setting_id']) ? $data['funding_rule_scp_setting_id'] : null;
        $this->container['fees_rule_data_id'] = isset($data['fees_rule_data_id']) ? $data['fees_rule_data_id'] : null;
        $this->container['accounting_currency'] = isset($data['accounting_currency']) ? $data['accounting_currency'] : null;
        $this->container['fees_rule_data'] = isset($data['fees_rule_data']) ? $data['fees_rule_data'] : null;
        $this->container['funding_rule_scp_setting'] = isset($data['funding_rule_scp_setting']) ? $data['funding_rule_scp_setting'] : null;
        $this->container['installment_plans'] = isset($data['installment_plans']) ? $data['installment_plans'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['scp_variable_cost_annual_percent'] === null) {
            $invalidProperties[] = "'scp_variable_cost_annual_percent' can't be null";
        }
        if ($this->container['scp_funding_percent'] === null) {
            $invalidProperties[] = "'scp_funding_percent' can't be null";
        }
        if ($this->container['scp_reserve_pool_percent'] === null) {
            $invalidProperties[] = "'scp_reserve_pool_percent' can't be null";
        }
        if ($this->container['scp_return_merchant_max_days'] === null) {
            $invalidProperties[] = "'scp_return_merchant_max_days' can't be null";
        }
        if ($this->container['scp_revenue_share_percent'] === null) {
            $invalidProperties[] = "'scp_revenue_share_percent' can't be null";
        }
        if ($this->container['scp_fixed_cost'] === null) {
            $invalidProperties[] = "'scp_fixed_cost' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets scp_variable_cost_annual_percent
     *
     * @return float
     */
    public function getScpVariableCostAnnualPercent()
    {
        return $this->container['scp_variable_cost_annual_percent'];
    }

    /**
     * Sets scp_variable_cost_annual_percent
     *
     * @param float $scp_variable_cost_annual_percent scp_variable_cost_annual_percent
     *
     * @return $this
     */
    public function setScpVariableCostAnnualPercent($scp_variable_cost_annual_percent)
    {
        $this->container['scp_variable_cost_annual_percent'] = $scp_variable_cost_annual_percent;

        return $this;
    }

    /**
     * Gets scp_funding_percent
     *
     * @return float
     */
    public function getScpFundingPercent()
    {
        return $this->container['scp_funding_percent'];
    }

    /**
     * Sets scp_funding_percent
     *
     * @param float $scp_funding_percent scp_funding_percent
     *
     * @return $this
     */
    public function setScpFundingPercent($scp_funding_percent)
    {
        $this->container['scp_funding_percent'] = $scp_funding_percent;

        return $this;
    }

    /**
     * Gets scp_reserve_pool_percent
     *
     * @return float
     */
    public function getScpReservePoolPercent()
    {
        return $this->container['scp_reserve_pool_percent'];
    }

    /**
     * Sets scp_reserve_pool_percent
     *
     * @param float $scp_reserve_pool_percent scp_reserve_pool_percent
     *
     * @return $this
     */
    public function setScpReservePoolPercent($scp_reserve_pool_percent)
    {
        $this->container['scp_reserve_pool_percent'] = $scp_reserve_pool_percent;

        return $this;
    }

    /**
     * Gets scp_return_merchant_max_days
     *
     * @return int
     */
    public function getScpReturnMerchantMaxDays()
    {
        return $this->container['scp_return_merchant_max_days'];
    }

    /**
     * Sets scp_return_merchant_max_days
     *
     * @param int $scp_return_merchant_max_days scp_return_merchant_max_days
     *
     * @return $this
     */
    public function setScpReturnMerchantMaxDays($scp_return_merchant_max_days)
    {
        $this->container['scp_return_merchant_max_days'] = $scp_return_merchant_max_days;

        return $this;
    }

    /**
     * Gets scp_revenue_share_percent
     *
     * @return float
     */
    public function getScpRevenueSharePercent()
    {
        return $this->container['scp_revenue_share_percent'];
    }

    /**
     * Sets scp_revenue_share_percent
     *
     * @param float $scp_revenue_share_percent scp_revenue_share_percent
     *
     * @return $this
     */
    public function setScpRevenueSharePercent($scp_revenue_share_percent)
    {
        $this->container['scp_revenue_share_percent'] = $scp_revenue_share_percent;

        return $this;
    }

    /**
     * Gets scp_fixed_cost
     *
     * @return float
     */
    public function getScpFixedCost()
    {
        return $this->container['scp_fixed_cost'];
    }

    /**
     * Sets scp_fixed_cost
     *
     * @param float $scp_fixed_cost scp_fixed_cost
     *
     * @return $this
     */
    public function setScpFixedCost($scp_fixed_cost)
    {
        $this->container['scp_fixed_cost'] = $scp_fixed_cost;

        return $this;
    }

    /**
     * Gets accounting_currency_id
     *
     * @return int
     */
    public function getAccountingCurrencyId()
    {
        return $this->container['accounting_currency_id'];
    }

    /**
     * Sets accounting_currency_id
     *
     * @param int $accounting_currency_id accounting_currency_id
     *
     * @return $this
     */
    public function setAccountingCurrencyId($accounting_currency_id)
    {
        $this->container['accounting_currency_id'] = $accounting_currency_id;

        return $this;
    }

    /**
     * Gets funding_rule_scp_setting_id
     *
     * @return int
     */
    public function getFundingRuleScpSettingId()
    {
        return $this->container['funding_rule_scp_setting_id'];
    }

    /**
     * Sets funding_rule_scp_setting_id
     *
     * @param int $funding_rule_scp_setting_id funding_rule_scp_setting_id
     *
     * @return $this
     */
    public function setFundingRuleScpSettingId($funding_rule_scp_setting_id)
    {
        $this->container['funding_rule_scp_setting_id'] = $funding_rule_scp_setting_id;

        return $this;
    }

    /**
     * Gets fees_rule_data_id
     *
     * @return int
     */
    public function getFeesRuleDataId()
    {
        return $this->container['fees_rule_data_id'];
    }

    /**
     * Sets fees_rule_data_id
     *
     * @param int $fees_rule_data_id fees_rule_data_id
     *
     * @return $this
     */
    public function setFeesRuleDataId($fees_rule_data_id)
    {
        $this->container['fees_rule_data_id'] = $fees_rule_data_id;

        return $this;
    }

    /**
     * Gets accounting_currency
     *
     * @return \SplititSdkClient\Model\Currencies
     */
    public function getAccountingCurrency()
    {
        return $this->container['accounting_currency'];
    }

    /**
     * Sets accounting_currency
     *
     * @param \SplititSdkClient\Model\Currencies $accounting_currency accounting_currency
     *
     * @return $this
     */
    public function setAccountingCurrency($accounting_currency)
    {
        $this->container['accounting_currency'] = $accounting_currency;

        return $this;
    }

    /**
     * Gets fees_rule_data
     *
     * @return \SplititSdkClient\Model\FeesRuleDatas
     */
    public function getFeesRuleData()
    {
        return $this->container['fees_rule_data'];
    }

    /**
     * Sets fees_rule_data
     *
     * @param \SplititSdkClient\Model\FeesRuleDatas $fees_rule_data fees_rule_data
     *
     * @return $this
     */
    public function setFeesRuleData($fees_rule_data)
    {
        $this->container['fees_rule_data'] = $fees_rule_data;

        return $this;
    }

    /**
     * Gets funding_rule_scp_setting
     *
     * @return \SplititSdkClient\Model\FundingRuleDataScpProviderSetting
     */
    public function getFundingRuleScpSetting()
    {
        return $this->container['funding_rule_scp_setting'];
    }

    /**
     * Sets funding_rule_scp_setting
     *
     * @param \SplititSdkClient\Model\FundingRuleDataScpProviderSetting $funding_rule_scp_setting funding_rule_scp_setting
     *
     * @return $this
     */
    public function setFundingRuleScpSetting($funding_rule_scp_setting)
    {
        $this->container['funding_rule_scp_setting'] = $funding_rule_scp_setting;

        return $this;
    }

    /**
     * Gets installment_plans
     *
     * @return \SplititSdkClient\Model\InstallmentPlans[]
     */
    public function getInstallmentPlans()
    {
        return $this->container['installment_plans'];
    }

    /**
     * Sets installment_plans
     *
     * @param \SplititSdkClient\Model\InstallmentPlans[] $installment_plans installment_plans
     *
     * @return $this
     */
    public function setInstallmentPlans($installment_plans)
    {
        $this->container['installment_plans'] = $installment_plans;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


