<?php
/**
 * Countries
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * Countries Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Countries implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Countries';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'iso_name' => 'string',
        'iso_number' => 'int',
        'iso_a2' => 'string',
        'iso_a3' => 'string',
        'continent' => 'string',
        'utc_time_offset_in_mins' => 'int',
        'is_zip_used' => 'bool',
        'bin_data_items' => '\SplititSdkClient\Model\BinDataItems[]',
        'country_subdivisions' => '\SplititSdkClient\Model\CountrySubdivisions[]',
        'terminal_countries' => '\SplititSdkClient\Model\TerminalCountries[]',
        'currency_countries' => '\SplititSdkClient\Model\CurrencyCountries[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'iso_name' => null,
        'iso_number' => 'int32',
        'iso_a2' => null,
        'iso_a3' => null,
        'continent' => null,
        'utc_time_offset_in_mins' => 'int32',
        'is_zip_used' => null,
        'bin_data_items' => null,
        'country_subdivisions' => null,
        'terminal_countries' => null,
        'currency_countries' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'iso_name' => 'IsoName',
        'iso_number' => 'IsoNumber',
        'iso_a2' => 'IsoA2',
        'iso_a3' => 'IsoA3',
        'continent' => 'Continent',
        'utc_time_offset_in_mins' => 'UtcTimeOffsetInMins',
        'is_zip_used' => 'IsZipUsed',
        'bin_data_items' => 'BinDataItems',
        'country_subdivisions' => 'CountrySubdivisions',
        'terminal_countries' => 'TerminalCountries',
        'currency_countries' => 'CurrencyCountries'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'iso_name' => 'setIsoName',
        'iso_number' => 'setIsoNumber',
        'iso_a2' => 'setIsoA2',
        'iso_a3' => 'setIsoA3',
        'continent' => 'setContinent',
        'utc_time_offset_in_mins' => 'setUtcTimeOffsetInMins',
        'is_zip_used' => 'setIsZipUsed',
        'bin_data_items' => 'setBinDataItems',
        'country_subdivisions' => 'setCountrySubdivisions',
        'terminal_countries' => 'setTerminalCountries',
        'currency_countries' => 'setCurrencyCountries'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'iso_name' => 'getIsoName',
        'iso_number' => 'getIsoNumber',
        'iso_a2' => 'getIsoA2',
        'iso_a3' => 'getIsoA3',
        'continent' => 'getContinent',
        'utc_time_offset_in_mins' => 'getUtcTimeOffsetInMins',
        'is_zip_used' => 'getIsZipUsed',
        'bin_data_items' => 'getBinDataItems',
        'country_subdivisions' => 'getCountrySubdivisions',
        'terminal_countries' => 'getTerminalCountries',
        'currency_countries' => 'getCurrencyCountries'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['iso_name'] = isset($data['iso_name']) ? $data['iso_name'] : null;
        $this->container['iso_number'] = isset($data['iso_number']) ? $data['iso_number'] : null;
        $this->container['iso_a2'] = isset($data['iso_a2']) ? $data['iso_a2'] : null;
        $this->container['iso_a3'] = isset($data['iso_a3']) ? $data['iso_a3'] : null;
        $this->container['continent'] = isset($data['continent']) ? $data['continent'] : null;
        $this->container['utc_time_offset_in_mins'] = isset($data['utc_time_offset_in_mins']) ? $data['utc_time_offset_in_mins'] : null;
        $this->container['is_zip_used'] = isset($data['is_zip_used']) ? $data['is_zip_used'] : null;
        $this->container['bin_data_items'] = isset($data['bin_data_items']) ? $data['bin_data_items'] : null;
        $this->container['country_subdivisions'] = isset($data['country_subdivisions']) ? $data['country_subdivisions'] : null;
        $this->container['terminal_countries'] = isset($data['terminal_countries']) ? $data['terminal_countries'] : null;
        $this->container['currency_countries'] = isset($data['currency_countries']) ? $data['currency_countries'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['iso_number'] === null) {
            $invalidProperties[] = "'iso_number' can't be null";
        }
        if ($this->container['utc_time_offset_in_mins'] === null) {
            $invalidProperties[] = "'utc_time_offset_in_mins' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets iso_name
     *
     * @return string
     */
    public function getIsoName()
    {
        return $this->container['iso_name'];
    }

    /**
     * Sets iso_name
     *
     * @param string $iso_name iso_name
     *
     * @return $this
     */
    public function setIsoName($iso_name)
    {
        $this->container['iso_name'] = $iso_name;

        return $this;
    }

    /**
     * Gets iso_number
     *
     * @return int
     */
    public function getIsoNumber()
    {
        return $this->container['iso_number'];
    }

    /**
     * Sets iso_number
     *
     * @param int $iso_number iso_number
     *
     * @return $this
     */
    public function setIsoNumber($iso_number)
    {
        $this->container['iso_number'] = $iso_number;

        return $this;
    }

    /**
     * Gets iso_a2
     *
     * @return string
     */
    public function getIsoA2()
    {
        return $this->container['iso_a2'];
    }

    /**
     * Sets iso_a2
     *
     * @param string $iso_a2 iso_a2
     *
     * @return $this
     */
    public function setIsoA2($iso_a2)
    {
        $this->container['iso_a2'] = $iso_a2;

        return $this;
    }

    /**
     * Gets iso_a3
     *
     * @return string
     */
    public function getIsoA3()
    {
        return $this->container['iso_a3'];
    }

    /**
     * Sets iso_a3
     *
     * @param string $iso_a3 iso_a3
     *
     * @return $this
     */
    public function setIsoA3($iso_a3)
    {
        $this->container['iso_a3'] = $iso_a3;

        return $this;
    }

    /**
     * Gets continent
     *
     * @return string
     */
    public function getContinent()
    {
        return $this->container['continent'];
    }

    /**
     * Sets continent
     *
     * @param string $continent continent
     *
     * @return $this
     */
    public function setContinent($continent)
    {
        $this->container['continent'] = $continent;

        return $this;
    }

    /**
     * Gets utc_time_offset_in_mins
     *
     * @return int
     */
    public function getUtcTimeOffsetInMins()
    {
        return $this->container['utc_time_offset_in_mins'];
    }

    /**
     * Sets utc_time_offset_in_mins
     *
     * @param int $utc_time_offset_in_mins utc_time_offset_in_mins
     *
     * @return $this
     */
    public function setUtcTimeOffsetInMins($utc_time_offset_in_mins)
    {
        $this->container['utc_time_offset_in_mins'] = $utc_time_offset_in_mins;

        return $this;
    }

    /**
     * Gets is_zip_used
     *
     * @return bool
     */
    public function getIsZipUsed()
    {
        return $this->container['is_zip_used'];
    }

    /**
     * Sets is_zip_used
     *
     * @param bool $is_zip_used is_zip_used
     *
     * @return $this
     */
    public function setIsZipUsed($is_zip_used)
    {
        $this->container['is_zip_used'] = $is_zip_used;

        return $this;
    }

    /**
     * Gets bin_data_items
     *
     * @return \SplititSdkClient\Model\BinDataItems[]
     */
    public function getBinDataItems()
    {
        return $this->container['bin_data_items'];
    }

    /**
     * Sets bin_data_items
     *
     * @param \SplititSdkClient\Model\BinDataItems[] $bin_data_items bin_data_items
     *
     * @return $this
     */
    public function setBinDataItems($bin_data_items)
    {
        $this->container['bin_data_items'] = $bin_data_items;

        return $this;
    }

    /**
     * Gets country_subdivisions
     *
     * @return \SplititSdkClient\Model\CountrySubdivisions[]
     */
    public function getCountrySubdivisions()
    {
        return $this->container['country_subdivisions'];
    }

    /**
     * Sets country_subdivisions
     *
     * @param \SplititSdkClient\Model\CountrySubdivisions[] $country_subdivisions country_subdivisions
     *
     * @return $this
     */
    public function setCountrySubdivisions($country_subdivisions)
    {
        $this->container['country_subdivisions'] = $country_subdivisions;

        return $this;
    }

    /**
     * Gets terminal_countries
     *
     * @return \SplititSdkClient\Model\TerminalCountries[]
     */
    public function getTerminalCountries()
    {
        return $this->container['terminal_countries'];
    }

    /**
     * Sets terminal_countries
     *
     * @param \SplititSdkClient\Model\TerminalCountries[] $terminal_countries terminal_countries
     *
     * @return $this
     */
    public function setTerminalCountries($terminal_countries)
    {
        $this->container['terminal_countries'] = $terminal_countries;

        return $this;
    }

    /**
     * Gets currency_countries
     *
     * @return \SplititSdkClient\Model\CurrencyCountries[]
     */
    public function getCurrencyCountries()
    {
        return $this->container['currency_countries'];
    }

    /**
     * Sets currency_countries
     *
     * @param \SplititSdkClient\Model\CurrencyCountries[] $currency_countries currency_countries
     *
     * @return $this
     */
    public function setCurrencyCountries($currency_countries)
    {
        $this->container['currency_countries'] = $currency_countries;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


