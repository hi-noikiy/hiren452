<?php
/**
 * FeesRuleDatas
 *
 * PHP version 5
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SplititSdkClient\Model;

use \ArrayAccess;
use \SplititSdkClient\ObjectSerializer;

/**
 * FeesRuleDatas Class Doc Comment
 *
 * @category Class
 * @package  SplititSdkClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FeesRuleDatas implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FeesRuleDatas';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'accounting_currency_id' => 'int',
        'accounting_currency' => '\SplititSdkClient\Model\Currencies',
        'business_unit_id' => 'int',
        'business_unit' => '\SplititSdkClient\Model\BusinessUnits',
        'pos_setup_percentage' => 'float',
        'refund_fee' => 'float',
        'cancellation_fee' => 'float',
        'chb_fee' => 'float',
        'monthly_subscription_amount' => 'float',
        'fraud_check' => 'float',
        'fixed_non_funded_secure' => '\SplititSdkClient\Model\FeeRateCollections',
        'variable_non_funded_secure' => '\SplititSdkClient\Model\FeeRateCollections',
        'fixed_non_funded_non_secure' => '\SplititSdkClient\Model\FeeRateCollections',
        'variable_non_funded_non_secure' => '\SplititSdkClient\Model\FeeRateCollections',
        'fixed_funded_secure' => '\SplititSdkClient\Model\FeeRateCollections',
        'fixed_funded_non_secure' => '\SplititSdkClient\Model\FeeRateCollections',
        'variable_funded_secure' => '\SplititSdkClient\Model\FeeRateCollections',
        'variable_funded_non_secure' => '\SplititSdkClient\Model\FeeRateCollections',
        'variable_funded_non_secure_id' => 'int',
        'variable_funded_secure_id' => 'int',
        'variable_non_funded_non_secure_id' => 'int',
        'variable_non_funded_secure_id' => 'int',
        'fixed_funded_non_secure_id' => 'int',
        'fixed_funded_secure_id' => 'int',
        'fixed_non_funded_non_secure_id' => 'int',
        'fixed_non_funded_secure_id' => 'int',
        'installment_plan_terminal_datas' => '\SplititSdkClient\Model\InstallmentPlanTerminalDatas[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'accounting_currency_id' => 'int64',
        'accounting_currency' => null,
        'business_unit_id' => 'int64',
        'business_unit' => null,
        'pos_setup_percentage' => 'decimal',
        'refund_fee' => 'decimal',
        'cancellation_fee' => 'decimal',
        'chb_fee' => 'decimal',
        'monthly_subscription_amount' => 'decimal',
        'fraud_check' => 'decimal',
        'fixed_non_funded_secure' => null,
        'variable_non_funded_secure' => null,
        'fixed_non_funded_non_secure' => null,
        'variable_non_funded_non_secure' => null,
        'fixed_funded_secure' => null,
        'fixed_funded_non_secure' => null,
        'variable_funded_secure' => null,
        'variable_funded_non_secure' => null,
        'variable_funded_non_secure_id' => 'int64',
        'variable_funded_secure_id' => 'int64',
        'variable_non_funded_non_secure_id' => 'int64',
        'variable_non_funded_secure_id' => 'int64',
        'fixed_funded_non_secure_id' => 'int64',
        'fixed_funded_secure_id' => 'int64',
        'fixed_non_funded_non_secure_id' => 'int64',
        'fixed_non_funded_secure_id' => 'int64',
        'installment_plan_terminal_datas' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'accounting_currency_id' => 'AccountingCurrencyId',
        'accounting_currency' => 'AccountingCurrency',
        'business_unit_id' => 'BusinessUnitId',
        'business_unit' => 'BusinessUnit',
        'pos_setup_percentage' => 'PosSetupPercentage',
        'refund_fee' => 'RefundFee',
        'cancellation_fee' => 'CancellationFee',
        'chb_fee' => 'ChbFee',
        'monthly_subscription_amount' => 'MonthlySubscriptionAmount',
        'fraud_check' => 'FraudCheck',
        'fixed_non_funded_secure' => 'FixedNonFundedSecure',
        'variable_non_funded_secure' => 'VariableNonFundedSecure',
        'fixed_non_funded_non_secure' => 'FixedNonFundedNonSecure',
        'variable_non_funded_non_secure' => 'VariableNonFundedNonSecure',
        'fixed_funded_secure' => 'FixedFundedSecure',
        'fixed_funded_non_secure' => 'FixedFundedNonSecure',
        'variable_funded_secure' => 'VariableFundedSecure',
        'variable_funded_non_secure' => 'VariableFundedNonSecure',
        'variable_funded_non_secure_id' => 'VariableFundedNonSecureId',
        'variable_funded_secure_id' => 'VariableFundedSecureId',
        'variable_non_funded_non_secure_id' => 'VariableNonFundedNonSecureId',
        'variable_non_funded_secure_id' => 'VariableNonFundedSecureId',
        'fixed_funded_non_secure_id' => 'FixedFundedNonSecureId',
        'fixed_funded_secure_id' => 'FixedFundedSecureId',
        'fixed_non_funded_non_secure_id' => 'FixedNonFundedNonSecureId',
        'fixed_non_funded_secure_id' => 'FixedNonFundedSecureId',
        'installment_plan_terminal_datas' => 'InstallmentPlanTerminalDatas'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'accounting_currency_id' => 'setAccountingCurrencyId',
        'accounting_currency' => 'setAccountingCurrency',
        'business_unit_id' => 'setBusinessUnitId',
        'business_unit' => 'setBusinessUnit',
        'pos_setup_percentage' => 'setPosSetupPercentage',
        'refund_fee' => 'setRefundFee',
        'cancellation_fee' => 'setCancellationFee',
        'chb_fee' => 'setChbFee',
        'monthly_subscription_amount' => 'setMonthlySubscriptionAmount',
        'fraud_check' => 'setFraudCheck',
        'fixed_non_funded_secure' => 'setFixedNonFundedSecure',
        'variable_non_funded_secure' => 'setVariableNonFundedSecure',
        'fixed_non_funded_non_secure' => 'setFixedNonFundedNonSecure',
        'variable_non_funded_non_secure' => 'setVariableNonFundedNonSecure',
        'fixed_funded_secure' => 'setFixedFundedSecure',
        'fixed_funded_non_secure' => 'setFixedFundedNonSecure',
        'variable_funded_secure' => 'setVariableFundedSecure',
        'variable_funded_non_secure' => 'setVariableFundedNonSecure',
        'variable_funded_non_secure_id' => 'setVariableFundedNonSecureId',
        'variable_funded_secure_id' => 'setVariableFundedSecureId',
        'variable_non_funded_non_secure_id' => 'setVariableNonFundedNonSecureId',
        'variable_non_funded_secure_id' => 'setVariableNonFundedSecureId',
        'fixed_funded_non_secure_id' => 'setFixedFundedNonSecureId',
        'fixed_funded_secure_id' => 'setFixedFundedSecureId',
        'fixed_non_funded_non_secure_id' => 'setFixedNonFundedNonSecureId',
        'fixed_non_funded_secure_id' => 'setFixedNonFundedSecureId',
        'installment_plan_terminal_datas' => 'setInstallmentPlanTerminalDatas'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'accounting_currency_id' => 'getAccountingCurrencyId',
        'accounting_currency' => 'getAccountingCurrency',
        'business_unit_id' => 'getBusinessUnitId',
        'business_unit' => 'getBusinessUnit',
        'pos_setup_percentage' => 'getPosSetupPercentage',
        'refund_fee' => 'getRefundFee',
        'cancellation_fee' => 'getCancellationFee',
        'chb_fee' => 'getChbFee',
        'monthly_subscription_amount' => 'getMonthlySubscriptionAmount',
        'fraud_check' => 'getFraudCheck',
        'fixed_non_funded_secure' => 'getFixedNonFundedSecure',
        'variable_non_funded_secure' => 'getVariableNonFundedSecure',
        'fixed_non_funded_non_secure' => 'getFixedNonFundedNonSecure',
        'variable_non_funded_non_secure' => 'getVariableNonFundedNonSecure',
        'fixed_funded_secure' => 'getFixedFundedSecure',
        'fixed_funded_non_secure' => 'getFixedFundedNonSecure',
        'variable_funded_secure' => 'getVariableFundedSecure',
        'variable_funded_non_secure' => 'getVariableFundedNonSecure',
        'variable_funded_non_secure_id' => 'getVariableFundedNonSecureId',
        'variable_funded_secure_id' => 'getVariableFundedSecureId',
        'variable_non_funded_non_secure_id' => 'getVariableNonFundedNonSecureId',
        'variable_non_funded_secure_id' => 'getVariableNonFundedSecureId',
        'fixed_funded_non_secure_id' => 'getFixedFundedNonSecureId',
        'fixed_funded_secure_id' => 'getFixedFundedSecureId',
        'fixed_non_funded_non_secure_id' => 'getFixedNonFundedNonSecureId',
        'fixed_non_funded_secure_id' => 'getFixedNonFundedSecureId',
        'installment_plan_terminal_datas' => 'getInstallmentPlanTerminalDatas'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['accounting_currency_id'] = isset($data['accounting_currency_id']) ? $data['accounting_currency_id'] : null;
        $this->container['accounting_currency'] = isset($data['accounting_currency']) ? $data['accounting_currency'] : null;
        $this->container['business_unit_id'] = isset($data['business_unit_id']) ? $data['business_unit_id'] : null;
        $this->container['business_unit'] = isset($data['business_unit']) ? $data['business_unit'] : null;
        $this->container['pos_setup_percentage'] = isset($data['pos_setup_percentage']) ? $data['pos_setup_percentage'] : null;
        $this->container['refund_fee'] = isset($data['refund_fee']) ? $data['refund_fee'] : null;
        $this->container['cancellation_fee'] = isset($data['cancellation_fee']) ? $data['cancellation_fee'] : null;
        $this->container['chb_fee'] = isset($data['chb_fee']) ? $data['chb_fee'] : null;
        $this->container['monthly_subscription_amount'] = isset($data['monthly_subscription_amount']) ? $data['monthly_subscription_amount'] : null;
        $this->container['fraud_check'] = isset($data['fraud_check']) ? $data['fraud_check'] : null;
        $this->container['fixed_non_funded_secure'] = isset($data['fixed_non_funded_secure']) ? $data['fixed_non_funded_secure'] : null;
        $this->container['variable_non_funded_secure'] = isset($data['variable_non_funded_secure']) ? $data['variable_non_funded_secure'] : null;
        $this->container['fixed_non_funded_non_secure'] = isset($data['fixed_non_funded_non_secure']) ? $data['fixed_non_funded_non_secure'] : null;
        $this->container['variable_non_funded_non_secure'] = isset($data['variable_non_funded_non_secure']) ? $data['variable_non_funded_non_secure'] : null;
        $this->container['fixed_funded_secure'] = isset($data['fixed_funded_secure']) ? $data['fixed_funded_secure'] : null;
        $this->container['fixed_funded_non_secure'] = isset($data['fixed_funded_non_secure']) ? $data['fixed_funded_non_secure'] : null;
        $this->container['variable_funded_secure'] = isset($data['variable_funded_secure']) ? $data['variable_funded_secure'] : null;
        $this->container['variable_funded_non_secure'] = isset($data['variable_funded_non_secure']) ? $data['variable_funded_non_secure'] : null;
        $this->container['variable_funded_non_secure_id'] = isset($data['variable_funded_non_secure_id']) ? $data['variable_funded_non_secure_id'] : null;
        $this->container['variable_funded_secure_id'] = isset($data['variable_funded_secure_id']) ? $data['variable_funded_secure_id'] : null;
        $this->container['variable_non_funded_non_secure_id'] = isset($data['variable_non_funded_non_secure_id']) ? $data['variable_non_funded_non_secure_id'] : null;
        $this->container['variable_non_funded_secure_id'] = isset($data['variable_non_funded_secure_id']) ? $data['variable_non_funded_secure_id'] : null;
        $this->container['fixed_funded_non_secure_id'] = isset($data['fixed_funded_non_secure_id']) ? $data['fixed_funded_non_secure_id'] : null;
        $this->container['fixed_funded_secure_id'] = isset($data['fixed_funded_secure_id']) ? $data['fixed_funded_secure_id'] : null;
        $this->container['fixed_non_funded_non_secure_id'] = isset($data['fixed_non_funded_non_secure_id']) ? $data['fixed_non_funded_non_secure_id'] : null;
        $this->container['fixed_non_funded_secure_id'] = isset($data['fixed_non_funded_secure_id']) ? $data['fixed_non_funded_secure_id'] : null;
        $this->container['installment_plan_terminal_datas'] = isset($data['installment_plan_terminal_datas']) ? $data['installment_plan_terminal_datas'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['accounting_currency_id'] === null) {
            $invalidProperties[] = "'accounting_currency_id' can't be null";
        }
        if ($this->container['business_unit_id'] === null) {
            $invalidProperties[] = "'business_unit_id' can't be null";
        }
        if ($this->container['pos_setup_percentage'] === null) {
            $invalidProperties[] = "'pos_setup_percentage' can't be null";
        }
        if ($this->container['refund_fee'] === null) {
            $invalidProperties[] = "'refund_fee' can't be null";
        }
        if ($this->container['cancellation_fee'] === null) {
            $invalidProperties[] = "'cancellation_fee' can't be null";
        }
        if ($this->container['chb_fee'] === null) {
            $invalidProperties[] = "'chb_fee' can't be null";
        }
        if ($this->container['monthly_subscription_amount'] === null) {
            $invalidProperties[] = "'monthly_subscription_amount' can't be null";
        }
        if ($this->container['fraud_check'] === null) {
            $invalidProperties[] = "'fraud_check' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets accounting_currency_id
     *
     * @return int
     */
    public function getAccountingCurrencyId()
    {
        return $this->container['accounting_currency_id'];
    }

    /**
     * Sets accounting_currency_id
     *
     * @param int $accounting_currency_id accounting_currency_id
     *
     * @return $this
     */
    public function setAccountingCurrencyId($accounting_currency_id)
    {
        $this->container['accounting_currency_id'] = $accounting_currency_id;

        return $this;
    }

    /**
     * Gets accounting_currency
     *
     * @return \SplititSdkClient\Model\Currencies
     */
    public function getAccountingCurrency()
    {
        return $this->container['accounting_currency'];
    }

    /**
     * Sets accounting_currency
     *
     * @param \SplititSdkClient\Model\Currencies $accounting_currency accounting_currency
     *
     * @return $this
     */
    public function setAccountingCurrency($accounting_currency)
    {
        $this->container['accounting_currency'] = $accounting_currency;

        return $this;
    }

    /**
     * Gets business_unit_id
     *
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     *
     * @param int $business_unit_id business_unit_id
     *
     * @return $this
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets business_unit
     *
     * @return \SplititSdkClient\Model\BusinessUnits
     */
    public function getBusinessUnit()
    {
        return $this->container['business_unit'];
    }

    /**
     * Sets business_unit
     *
     * @param \SplititSdkClient\Model\BusinessUnits $business_unit business_unit
     *
     * @return $this
     */
    public function setBusinessUnit($business_unit)
    {
        $this->container['business_unit'] = $business_unit;

        return $this;
    }

    /**
     * Gets pos_setup_percentage
     *
     * @return float
     */
    public function getPosSetupPercentage()
    {
        return $this->container['pos_setup_percentage'];
    }

    /**
     * Sets pos_setup_percentage
     *
     * @param float $pos_setup_percentage pos_setup_percentage
     *
     * @return $this
     */
    public function setPosSetupPercentage($pos_setup_percentage)
    {
        $this->container['pos_setup_percentage'] = $pos_setup_percentage;

        return $this;
    }

    /**
     * Gets refund_fee
     *
     * @return float
     */
    public function getRefundFee()
    {
        return $this->container['refund_fee'];
    }

    /**
     * Sets refund_fee
     *
     * @param float $refund_fee refund_fee
     *
     * @return $this
     */
    public function setRefundFee($refund_fee)
    {
        $this->container['refund_fee'] = $refund_fee;

        return $this;
    }

    /**
     * Gets cancellation_fee
     *
     * @return float
     */
    public function getCancellationFee()
    {
        return $this->container['cancellation_fee'];
    }

    /**
     * Sets cancellation_fee
     *
     * @param float $cancellation_fee cancellation_fee
     *
     * @return $this
     */
    public function setCancellationFee($cancellation_fee)
    {
        $this->container['cancellation_fee'] = $cancellation_fee;

        return $this;
    }

    /**
     * Gets chb_fee
     *
     * @return float
     */
    public function getChbFee()
    {
        return $this->container['chb_fee'];
    }

    /**
     * Sets chb_fee
     *
     * @param float $chb_fee chb_fee
     *
     * @return $this
     */
    public function setChbFee($chb_fee)
    {
        $this->container['chb_fee'] = $chb_fee;

        return $this;
    }

    /**
     * Gets monthly_subscription_amount
     *
     * @return float
     */
    public function getMonthlySubscriptionAmount()
    {
        return $this->container['monthly_subscription_amount'];
    }

    /**
     * Sets monthly_subscription_amount
     *
     * @param float $monthly_subscription_amount monthly_subscription_amount
     *
     * @return $this
     */
    public function setMonthlySubscriptionAmount($monthly_subscription_amount)
    {
        $this->container['monthly_subscription_amount'] = $monthly_subscription_amount;

        return $this;
    }

    /**
     * Gets fraud_check
     *
     * @return float
     */
    public function getFraudCheck()
    {
        return $this->container['fraud_check'];
    }

    /**
     * Sets fraud_check
     *
     * @param float $fraud_check fraud_check
     *
     * @return $this
     */
    public function setFraudCheck($fraud_check)
    {
        $this->container['fraud_check'] = $fraud_check;

        return $this;
    }

    /**
     * Gets fixed_non_funded_secure
     *
     * @return \SplititSdkClient\Model\FeeRateCollections
     */
    public function getFixedNonFundedSecure()
    {
        return $this->container['fixed_non_funded_secure'];
    }

    /**
     * Sets fixed_non_funded_secure
     *
     * @param \SplititSdkClient\Model\FeeRateCollections $fixed_non_funded_secure fixed_non_funded_secure
     *
     * @return $this
     */
    public function setFixedNonFundedSecure($fixed_non_funded_secure)
    {
        $this->container['fixed_non_funded_secure'] = $fixed_non_funded_secure;

        return $this;
    }

    /**
     * Gets variable_non_funded_secure
     *
     * @return \SplititSdkClient\Model\FeeRateCollections
     */
    public function getVariableNonFundedSecure()
    {
        return $this->container['variable_non_funded_secure'];
    }

    /**
     * Sets variable_non_funded_secure
     *
     * @param \SplititSdkClient\Model\FeeRateCollections $variable_non_funded_secure variable_non_funded_secure
     *
     * @return $this
     */
    public function setVariableNonFundedSecure($variable_non_funded_secure)
    {
        $this->container['variable_non_funded_secure'] = $variable_non_funded_secure;

        return $this;
    }

    /**
     * Gets fixed_non_funded_non_secure
     *
     * @return \SplititSdkClient\Model\FeeRateCollections
     */
    public function getFixedNonFundedNonSecure()
    {
        return $this->container['fixed_non_funded_non_secure'];
    }

    /**
     * Sets fixed_non_funded_non_secure
     *
     * @param \SplititSdkClient\Model\FeeRateCollections $fixed_non_funded_non_secure fixed_non_funded_non_secure
     *
     * @return $this
     */
    public function setFixedNonFundedNonSecure($fixed_non_funded_non_secure)
    {
        $this->container['fixed_non_funded_non_secure'] = $fixed_non_funded_non_secure;

        return $this;
    }

    /**
     * Gets variable_non_funded_non_secure
     *
     * @return \SplititSdkClient\Model\FeeRateCollections
     */
    public function getVariableNonFundedNonSecure()
    {
        return $this->container['variable_non_funded_non_secure'];
    }

    /**
     * Sets variable_non_funded_non_secure
     *
     * @param \SplititSdkClient\Model\FeeRateCollections $variable_non_funded_non_secure variable_non_funded_non_secure
     *
     * @return $this
     */
    public function setVariableNonFundedNonSecure($variable_non_funded_non_secure)
    {
        $this->container['variable_non_funded_non_secure'] = $variable_non_funded_non_secure;

        return $this;
    }

    /**
     * Gets fixed_funded_secure
     *
     * @return \SplititSdkClient\Model\FeeRateCollections
     */
    public function getFixedFundedSecure()
    {
        return $this->container['fixed_funded_secure'];
    }

    /**
     * Sets fixed_funded_secure
     *
     * @param \SplititSdkClient\Model\FeeRateCollections $fixed_funded_secure fixed_funded_secure
     *
     * @return $this
     */
    public function setFixedFundedSecure($fixed_funded_secure)
    {
        $this->container['fixed_funded_secure'] = $fixed_funded_secure;

        return $this;
    }

    /**
     * Gets fixed_funded_non_secure
     *
     * @return \SplititSdkClient\Model\FeeRateCollections
     */
    public function getFixedFundedNonSecure()
    {
        return $this->container['fixed_funded_non_secure'];
    }

    /**
     * Sets fixed_funded_non_secure
     *
     * @param \SplititSdkClient\Model\FeeRateCollections $fixed_funded_non_secure fixed_funded_non_secure
     *
     * @return $this
     */
    public function setFixedFundedNonSecure($fixed_funded_non_secure)
    {
        $this->container['fixed_funded_non_secure'] = $fixed_funded_non_secure;

        return $this;
    }

    /**
     * Gets variable_funded_secure
     *
     * @return \SplititSdkClient\Model\FeeRateCollections
     */
    public function getVariableFundedSecure()
    {
        return $this->container['variable_funded_secure'];
    }

    /**
     * Sets variable_funded_secure
     *
     * @param \SplititSdkClient\Model\FeeRateCollections $variable_funded_secure variable_funded_secure
     *
     * @return $this
     */
    public function setVariableFundedSecure($variable_funded_secure)
    {
        $this->container['variable_funded_secure'] = $variable_funded_secure;

        return $this;
    }

    /**
     * Gets variable_funded_non_secure
     *
     * @return \SplititSdkClient\Model\FeeRateCollections
     */
    public function getVariableFundedNonSecure()
    {
        return $this->container['variable_funded_non_secure'];
    }

    /**
     * Sets variable_funded_non_secure
     *
     * @param \SplititSdkClient\Model\FeeRateCollections $variable_funded_non_secure variable_funded_non_secure
     *
     * @return $this
     */
    public function setVariableFundedNonSecure($variable_funded_non_secure)
    {
        $this->container['variable_funded_non_secure'] = $variable_funded_non_secure;

        return $this;
    }

    /**
     * Gets variable_funded_non_secure_id
     *
     * @return int
     */
    public function getVariableFundedNonSecureId()
    {
        return $this->container['variable_funded_non_secure_id'];
    }

    /**
     * Sets variable_funded_non_secure_id
     *
     * @param int $variable_funded_non_secure_id variable_funded_non_secure_id
     *
     * @return $this
     */
    public function setVariableFundedNonSecureId($variable_funded_non_secure_id)
    {
        $this->container['variable_funded_non_secure_id'] = $variable_funded_non_secure_id;

        return $this;
    }

    /**
     * Gets variable_funded_secure_id
     *
     * @return int
     */
    public function getVariableFundedSecureId()
    {
        return $this->container['variable_funded_secure_id'];
    }

    /**
     * Sets variable_funded_secure_id
     *
     * @param int $variable_funded_secure_id variable_funded_secure_id
     *
     * @return $this
     */
    public function setVariableFundedSecureId($variable_funded_secure_id)
    {
        $this->container['variable_funded_secure_id'] = $variable_funded_secure_id;

        return $this;
    }

    /**
     * Gets variable_non_funded_non_secure_id
     *
     * @return int
     */
    public function getVariableNonFundedNonSecureId()
    {
        return $this->container['variable_non_funded_non_secure_id'];
    }

    /**
     * Sets variable_non_funded_non_secure_id
     *
     * @param int $variable_non_funded_non_secure_id variable_non_funded_non_secure_id
     *
     * @return $this
     */
    public function setVariableNonFundedNonSecureId($variable_non_funded_non_secure_id)
    {
        $this->container['variable_non_funded_non_secure_id'] = $variable_non_funded_non_secure_id;

        return $this;
    }

    /**
     * Gets variable_non_funded_secure_id
     *
     * @return int
     */
    public function getVariableNonFundedSecureId()
    {
        return $this->container['variable_non_funded_secure_id'];
    }

    /**
     * Sets variable_non_funded_secure_id
     *
     * @param int $variable_non_funded_secure_id variable_non_funded_secure_id
     *
     * @return $this
     */
    public function setVariableNonFundedSecureId($variable_non_funded_secure_id)
    {
        $this->container['variable_non_funded_secure_id'] = $variable_non_funded_secure_id;

        return $this;
    }

    /**
     * Gets fixed_funded_non_secure_id
     *
     * @return int
     */
    public function getFixedFundedNonSecureId()
    {
        return $this->container['fixed_funded_non_secure_id'];
    }

    /**
     * Sets fixed_funded_non_secure_id
     *
     * @param int $fixed_funded_non_secure_id fixed_funded_non_secure_id
     *
     * @return $this
     */
    public function setFixedFundedNonSecureId($fixed_funded_non_secure_id)
    {
        $this->container['fixed_funded_non_secure_id'] = $fixed_funded_non_secure_id;

        return $this;
    }

    /**
     * Gets fixed_funded_secure_id
     *
     * @return int
     */
    public function getFixedFundedSecureId()
    {
        return $this->container['fixed_funded_secure_id'];
    }

    /**
     * Sets fixed_funded_secure_id
     *
     * @param int $fixed_funded_secure_id fixed_funded_secure_id
     *
     * @return $this
     */
    public function setFixedFundedSecureId($fixed_funded_secure_id)
    {
        $this->container['fixed_funded_secure_id'] = $fixed_funded_secure_id;

        return $this;
    }

    /**
     * Gets fixed_non_funded_non_secure_id
     *
     * @return int
     */
    public function getFixedNonFundedNonSecureId()
    {
        return $this->container['fixed_non_funded_non_secure_id'];
    }

    /**
     * Sets fixed_non_funded_non_secure_id
     *
     * @param int $fixed_non_funded_non_secure_id fixed_non_funded_non_secure_id
     *
     * @return $this
     */
    public function setFixedNonFundedNonSecureId($fixed_non_funded_non_secure_id)
    {
        $this->container['fixed_non_funded_non_secure_id'] = $fixed_non_funded_non_secure_id;

        return $this;
    }

    /**
     * Gets fixed_non_funded_secure_id
     *
     * @return int
     */
    public function getFixedNonFundedSecureId()
    {
        return $this->container['fixed_non_funded_secure_id'];
    }

    /**
     * Sets fixed_non_funded_secure_id
     *
     * @param int $fixed_non_funded_secure_id fixed_non_funded_secure_id
     *
     * @return $this
     */
    public function setFixedNonFundedSecureId($fixed_non_funded_secure_id)
    {
        $this->container['fixed_non_funded_secure_id'] = $fixed_non_funded_secure_id;

        return $this;
    }

    /**
     * Gets installment_plan_terminal_datas
     *
     * @return \SplititSdkClient\Model\InstallmentPlanTerminalDatas[]
     */
    public function getInstallmentPlanTerminalDatas()
    {
        return $this->container['installment_plan_terminal_datas'];
    }

    /**
     * Sets installment_plan_terminal_datas
     *
     * @param \SplititSdkClient\Model\InstallmentPlanTerminalDatas[] $installment_plan_terminal_datas installment_plan_terminal_datas
     *
     * @return $this
     */
    public function setInstallmentPlanTerminalDatas($installment_plan_terminal_datas)
    {
        $this->container['installment_plan_terminal_datas'] = $installment_plan_terminal_datas;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


